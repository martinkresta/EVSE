
EVSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda4  0800bda4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdac  0800bdac  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdac  0800bdac  0001bdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800bdb4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b3c  200001d8  0800bf8c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d14  0800bf8c  00020d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aaf4  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004466  00000000  00000000  0003acfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00040a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002800a  00000000  00000000  000420e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd09  00000000  00000000  0006a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8d05  00000000  00000000  00087df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007830  00000000  00000000  00170b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9a4 	.word	0x0800b9a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b9a4 	.word	0x0800b9a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__gedf2>:
 800086c:	f04f 3cff 	mov.w	ip, #4294967295
 8000870:	e006      	b.n	8000880 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__ledf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	e002      	b.n	8000880 <__cmpdf2+0x4>
 800087a:	bf00      	nop

0800087c <__cmpdf2>:
 800087c:	f04f 0c01 	mov.w	ip, #1
 8000880:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800088c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000896:	d01b      	beq.n	80008d0 <__cmpdf2+0x54>
 8000898:	b001      	add	sp, #4
 800089a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800089e:	bf0c      	ite	eq
 80008a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008a4:	ea91 0f03 	teqne	r1, r3
 80008a8:	bf02      	ittt	eq
 80008aa:	ea90 0f02 	teqeq	r0, r2
 80008ae:	2000      	moveq	r0, #0
 80008b0:	4770      	bxeq	lr
 80008b2:	f110 0f00 	cmn.w	r0, #0
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf58      	it	pl
 80008bc:	4299      	cmppl	r1, r3
 80008be:	bf08      	it	eq
 80008c0:	4290      	cmpeq	r0, r2
 80008c2:	bf2c      	ite	cs
 80008c4:	17d8      	asrcs	r0, r3, #31
 80008c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	4770      	bx	lr
 80008d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d102      	bne.n	80008e0 <__cmpdf2+0x64>
 80008da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008de:	d107      	bne.n	80008f0 <__cmpdf2+0x74>
 80008e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d1d6      	bne.n	8000898 <__cmpdf2+0x1c>
 80008ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ee:	d0d3      	beq.n	8000898 <__cmpdf2+0x1c>
 80008f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdrcmple>:
 80008f8:	4684      	mov	ip, r0
 80008fa:	4610      	mov	r0, r2
 80008fc:	4662      	mov	r2, ip
 80008fe:	468c      	mov	ip, r1
 8000900:	4619      	mov	r1, r3
 8000902:	4663      	mov	r3, ip
 8000904:	e000      	b.n	8000908 <__aeabi_cdcmpeq>
 8000906:	bf00      	nop

08000908 <__aeabi_cdcmpeq>:
 8000908:	b501      	push	{r0, lr}
 800090a:	f7ff ffb7 	bl	800087c <__cmpdf2>
 800090e:	2800      	cmp	r0, #0
 8000910:	bf48      	it	mi
 8000912:	f110 0f00 	cmnmi.w	r0, #0
 8000916:	bd01      	pop	{r0, pc}

08000918 <__aeabi_dcmpeq>:
 8000918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800091c:	f7ff fff4 	bl	8000908 <__aeabi_cdcmpeq>
 8000920:	bf0c      	ite	eq
 8000922:	2001      	moveq	r0, #1
 8000924:	2000      	movne	r0, #0
 8000926:	f85d fb08 	ldr.w	pc, [sp], #8
 800092a:	bf00      	nop

0800092c <__aeabi_dcmplt>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff ffea 	bl	8000908 <__aeabi_cdcmpeq>
 8000934:	bf34      	ite	cc
 8000936:	2001      	movcc	r0, #1
 8000938:	2000      	movcs	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmple>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffe0 	bl	8000908 <__aeabi_cdcmpeq>
 8000948:	bf94      	ite	ls
 800094a:	2001      	movls	r0, #1
 800094c:	2000      	movhi	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmpge>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffce 	bl	80008f8 <__aeabi_cdrcmple>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpgt>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffc4 	bl	80008f8 <__aeabi_cdrcmple>
 8000970:	bf34      	ite	cc
 8000972:	2001      	movcc	r0, #1
 8000974:	2000      	movcs	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_ldivmod>:
 800097c:	b97b      	cbnz	r3, 800099e <__aeabi_ldivmod+0x22>
 800097e:	b972      	cbnz	r2, 800099e <__aeabi_ldivmod+0x22>
 8000980:	2900      	cmp	r1, #0
 8000982:	bfbe      	ittt	lt
 8000984:	2000      	movlt	r0, #0
 8000986:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800098a:	e006      	blt.n	800099a <__aeabi_ldivmod+0x1e>
 800098c:	bf08      	it	eq
 800098e:	2800      	cmpeq	r0, #0
 8000990:	bf1c      	itt	ne
 8000992:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000996:	f04f 30ff 	movne.w	r0, #4294967295
 800099a:	f000 b9a7 	b.w	8000cec <__aeabi_idiv0>
 800099e:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a6:	2900      	cmp	r1, #0
 80009a8:	db09      	blt.n	80009be <__aeabi_ldivmod+0x42>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db1a      	blt.n	80009e4 <__aeabi_ldivmod+0x68>
 80009ae:	f000 f835 	bl	8000a1c <__udivmoddi4>
 80009b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ba:	b004      	add	sp, #16
 80009bc:	4770      	bx	lr
 80009be:	4240      	negs	r0, r0
 80009c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db1b      	blt.n	8000a00 <__aeabi_ldivmod+0x84>
 80009c8:	f000 f828 	bl	8000a1c <__udivmoddi4>
 80009cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d4:	b004      	add	sp, #16
 80009d6:	4240      	negs	r0, r0
 80009d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009dc:	4252      	negs	r2, r2
 80009de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e2:	4770      	bx	lr
 80009e4:	4252      	negs	r2, r2
 80009e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ea:	f000 f817 	bl	8000a1c <__udivmoddi4>
 80009ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f6:	b004      	add	sp, #16
 80009f8:	4240      	negs	r0, r0
 80009fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fe:	4770      	bx	lr
 8000a00:	4252      	negs	r2, r2
 8000a02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a06:	f000 f809 	bl	8000a1c <__udivmoddi4>
 8000a0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a12:	b004      	add	sp, #16
 8000a14:	4252      	negs	r2, r2
 8000a16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468e      	mov	lr, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d14d      	bne.n	8000ac6 <__udivmoddi4+0xaa>
 8000a2a:	428a      	cmp	r2, r1
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	d969      	bls.n	8000b04 <__udivmoddi4+0xe8>
 8000a30:	fab2 f282 	clz	r2, r2
 8000a34:	b152      	cbz	r2, 8000a4c <__udivmoddi4+0x30>
 8000a36:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3a:	f1c2 0120 	rsb	r1, r2, #32
 8000a3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a46:	ea41 0e03 	orr.w	lr, r1, r3
 8000a4a:	4094      	lsls	r4, r2
 8000a4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a50:	0c21      	lsrs	r1, r4, #16
 8000a52:	fbbe f6f8 	udiv	r6, lr, r8
 8000a56:	fa1f f78c 	uxth.w	r7, ip
 8000a5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a62:	fb06 f107 	mul.w	r1, r6, r7
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x64>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a72:	f080 811f 	bcs.w	8000cb4 <__udivmoddi4+0x298>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 811c 	bls.w	8000cb4 <__udivmoddi4+0x298>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a88:	fb08 3310 	mls	r3, r8, r0, r3
 8000a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a90:	fb00 f707 	mul.w	r7, r0, r7
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x92>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa0:	f080 810a 	bcs.w	8000cb8 <__udivmoddi4+0x29c>
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	f240 8107 	bls.w	8000cb8 <__udivmoddi4+0x29c>
 8000aaa:	4464      	add	r4, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab2:	1be4      	subs	r4, r4, r7
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	b11d      	cbz	r5, 8000ac0 <__udivmoddi4+0xa4>
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	2300      	movs	r3, #0
 8000abc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0xc2>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	f000 80ef 	beq.w	8000cae <__udivmoddi4+0x292>
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	fab3 f683 	clz	r6, r3
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d14a      	bne.n	8000b7c <__udivmoddi4+0x160>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xd4>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	f200 80f9 	bhi.w	8000ce2 <__udivmoddi4+0x2c6>
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0303 	sbc.w	r3, r1, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	469e      	mov	lr, r3
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d0e0      	beq.n	8000ac0 <__udivmoddi4+0xa4>
 8000afe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b02:	e7dd      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000b04:	b902      	cbnz	r2, 8000b08 <__udivmoddi4+0xec>
 8000b06:	deff      	udf	#255	; 0xff
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f040 8092 	bne.w	8000c36 <__udivmoddi4+0x21a>
 8000b12:	eba1 010c 	sub.w	r1, r1, ip
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2601      	movs	r6, #1
 8000b20:	0c20      	lsrs	r0, r4, #16
 8000b22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b26:	fb07 1113 	mls	r1, r7, r3, r1
 8000b2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2e:	fb0e f003 	mul.w	r0, lr, r3
 8000b32:	4288      	cmp	r0, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x12c>
 8000b36:	eb1c 0101 	adds.w	r1, ip, r1
 8000b3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x12a>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2c0>
 8000b46:	4643      	mov	r3, r8
 8000b48:	1a09      	subs	r1, r1, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b50:	fb07 1110 	mls	r1, r7, r0, r1
 8000b54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x156>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x154>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b70:	4608      	mov	r0, r1
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7a:	e79c      	b.n	8000ab6 <__udivmoddi4+0x9a>
 8000b7c:	f1c6 0720 	rsb	r7, r6, #32
 8000b80:	40b3      	lsls	r3, r6
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b92:	431c      	orrs	r4, r3
 8000b94:	40f9      	lsrs	r1, r7
 8000b96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ba2:	0c20      	lsrs	r0, r4, #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb4:	4288      	cmp	r0, r1
 8000bb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b8>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bc8:	4288      	cmp	r0, r1
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000be0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	458e      	cmp	lr, r1
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1e2>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bf6:	458e      	cmp	lr, r1
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4461      	add	r1, ip
 8000bfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c02:	fba0 9402 	umull	r9, r4, r0, r2
 8000c06:	eba1 010e 	sub.w	r1, r1, lr
 8000c0a:	42a1      	cmp	r1, r4
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46a6      	mov	lr, r4
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x2a4>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x2a0>
 8000c14:	b15d      	cbz	r5, 8000c2e <__udivmoddi4+0x212>
 8000c16:	ebb3 0208 	subs.w	r2, r3, r8
 8000c1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c22:	fa22 f306 	lsr.w	r3, r2, r6
 8000c26:	40f1      	lsrs	r1, r6
 8000c28:	431f      	orrs	r7, r3
 8000c2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c2e:	2600      	movs	r6, #0
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa21 f303 	lsr.w	r3, r1, r3
 8000c44:	4091      	lsls	r1, r2
 8000c46:	4301      	orrs	r1, r0
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c54:	fb07 3610 	mls	r6, r7, r0, r3
 8000c58:	0c0b      	lsrs	r3, r1, #16
 8000c5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c62:	429e      	cmp	r6, r3
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x260>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c74:	429e      	cmp	r6, r3
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	b289      	uxth	r1, r1
 8000c80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c84:	fb07 3316 	mls	r3, r7, r6, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x28a>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000ca2:	3e02      	subs	r6, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0x104>
 8000cae:	462e      	mov	r6, r5
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e705      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	e6e3      	b.n	8000a80 <__udivmoddi4+0x64>
 8000cb8:	4618      	mov	r0, r3
 8000cba:	e6f8      	b.n	8000aae <__udivmoddi4+0x92>
 8000cbc:	454b      	cmp	r3, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f8>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f8>
 8000ccc:	4646      	mov	r6, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x28a>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1e2>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b8>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x12c>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e709      	b.n	8000afa <__udivmoddi4+0xde>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x156>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <ADC_Init>:
uint8_t mNumOfChannels;
uint16_t* mResults = NULL;


void ADC_Init(ADC_HandleTypeDef*  hADC, DMA_HandleTypeDef* hDMA, uint8_t numOfChannels)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
	adc = hADC;
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <ADC_Init+0x48>)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6013      	str	r3, [r2, #0]
	dma = hDMA;
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <ADC_Init+0x4c>)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	6013      	str	r3, [r2, #0]
	mNumOfChannels = numOfChannels;
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <ADC_Init+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	7013      	strb	r3, [r2, #0]
#ifdef STM32L4    // calibration supported only by STM32L4xx family
	HAL_ADCEx_Calibration_Start(adc, ADC_SINGLE_ENDED);
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <ADC_Init+0x48>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	217f      	movs	r1, #127	; 0x7f
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 fb7a 	bl	8005410 <HAL_ADCEx_Calibration_Start>
#endif
	mResults = malloc(mNumOfChannels * sizeof(uint16_t));
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <ADC_Init+0x50>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 fc36 	bl	8009594 <malloc>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <ADC_Init+0x54>)
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001f4 	.word	0x200001f4
 8000d3c:	200001f8 	.word	0x200001f8
 8000d40:	200001fc 	.word	0x200001fc
 8000d44:	20000200 	.word	0x20000200

08000d48 <ADC_StartConversion>:


void ADC_StartConversion(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	if (mResults != NULL)
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <ADC_StartConversion+0x24>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <ADC_StartConversion+0x1e>
	{
		HAL_ADC_Start_DMA(adc, (uint32_t*)mResults, mNumOfChannels);
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <ADC_StartConversion+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <ADC_StartConversion+0x24>)
 8000d5a:	6811      	ldr	r1, [r2, #0]
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <ADC_StartConversion+0x2c>)
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fa7f 	bl	8004264 <HAL_ADC_Start_DMA>
	}
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000200 	.word	0x20000200
 8000d70:	200001f4 	.word	0x200001f4
 8000d74:	200001fc 	.word	0x200001fc

08000d78 <ADC_GetValue>:

uint16_t ADC_GetValue(uint8_t channel)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	if (channel < mNumOfChannels && mResults != NULL)
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <ADC_GetValue+0x38>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d20a      	bcs.n	8000da2 <ADC_GetValue+0x2a>
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <ADC_GetValue+0x3c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <ADC_GetValue+0x2a>
	{
		return mResults[channel];
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <ADC_GetValue+0x3c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	e000      	b.n	8000da4 <ADC_GetValue+0x2c>
	}
	else
	{
		return 0;
 8000da2:	2300      	movs	r3, #0
	}
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	200001fc 	.word	0x200001fc
 8000db4:	20000200 	.word	0x20000200

08000db8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(adc);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fad1 	bl	800436c <HAL_ADC_Stop_DMA>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001f4 	.word	0x200001f4

08000dd8 <COM_Init>:

static void SendVariable(uint16_t id);


void COM_Init(uint8_t nodeId)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	mNodeId = nodeId;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <COM_Init+0x1c>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	7013      	strb	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	2000054c 	.word	0x2000054c

08000df8 <COM_GetRxMessage>:
	return ns;
}

// just wrapper to MCAN
uint8_t COM_GetRxMessage( s_CanRxMsg* msg)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	return MCAN_GetRxMessage(msg);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fbeb 	bl	80015dc <MCAN_GetRxMessage>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <COM_Update_10ms>:

void COM_Update_10ms(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

	// stream the variables to CAN
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e017      	b.n	8000e4c <COM_Update_10ms+0x3c>
	{
		mStreamList[i].timer+=10;
 8000e1c:	4934      	ldr	r1, [pc, #208]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	330a      	adds	r3, #10
 8000e30:	b298      	uxth	r0, r3
 8000e32:	492f      	ldr	r1, [pc, #188]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3306      	adds	r3, #6
 8000e42:	4602      	mov	r2, r0
 8000e44:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b45      	cmp	r3, #69	; 0x45
 8000e50:	dde4      	ble.n	8000e1c <COM_Update_10ms+0xc>
	}
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	e042      	b.n	8000ede <COM_Update_10ms+0xce>
	{
		if (mStreamList[i].enable == 1 && mStreamList[i].sendPeriod != 0)
 8000e58:	4925      	ldr	r1, [pc, #148]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d135      	bne.n	8000ed8 <COM_Update_10ms+0xc8>
 8000e6c:	4920      	ldr	r1, [pc, #128]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d02a      	beq.n	8000ed8 <COM_Update_10ms+0xc8>
		{
			if (mStreamList[i].timer >= mStreamList[i].sendPeriod)
 8000e82:	491b      	ldr	r1, [pc, #108]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	3306      	adds	r3, #6
 8000e92:	8819      	ldrh	r1, [r3, #0]
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	d316      	bcc.n	8000ed8 <COM_Update_10ms+0xc8>
			{
				SendVariable(mStreamList[i].varId);
 8000eaa:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3302      	adds	r3, #2
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f819 	bl	8000ef4 <SendVariable>
				mStreamList[i].timer = 0;
 8000ec2:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3306      	adds	r3, #6
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
				break;  // send just 1 value every 10ms
 8000ed6:	e006      	b.n	8000ee6 <COM_Update_10ms+0xd6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b45      	cmp	r3, #69	; 0x45
 8000ee2:	ddb9      	ble.n	8000e58 <COM_Update_10ms+0x48>
			}
		}
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <SendVariable>:
	}
}

/*Private methods*/
static void SendVariable(uint16_t id)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	uint16_t invalid = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	827b      	strh	r3, [r7, #18]
	uint16_t validflag = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	82fb      	strh	r3, [r7, #22]
	int16_t tmp = VAR_GetVariable(id, &invalid);
 8000f06:	f107 0212 	add.w	r2, r7, #18
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 f832 	bl	8001f78 <VAR_GetVariable>
 8000f14:	4603      	mov	r3, r0
 8000f16:	82bb      	strh	r3, [r7, #20]
	validflag = (invalid == INVALID_FLAG ? 0 : 1);
 8000f18:	8a7b      	ldrh	r3, [r7, #18]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	bf14      	ite	ne
 8000f1e:	2301      	movne	r3, #1
 8000f20:	2300      	moveq	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	82fb      	strh	r3, [r7, #22]
	uint8_t data[8];
	data[0] = id >> 8;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	723b      	strb	r3, [r7, #8]
	data[1] = id  & 0xFF;
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	727b      	strb	r3, [r7, #9]
	data[2] = tmp >> 8;
 8000f36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f3a:	121b      	asrs	r3, r3, #8
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72bb      	strb	r3, [r7, #10]
	data[3] = tmp & 0xFF;
 8000f42:	8abb      	ldrh	r3, [r7, #20]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
	data[4] = validflag >> 8;
 8000f48:	8afb      	ldrh	r3, [r7, #22]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	733b      	strb	r3, [r7, #12]
	data[5] = validflag & 0xFF;
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	737b      	strb	r3, [r7, #13]
	data[6] = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data[7] = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	MCAN_SendFrame(CMD_VAR_VALUE + mNodeId, data, 8);
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <SendVariable+0x8c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f107 0108 	add.w	r1, r7, #8
 8000f70:	2208      	movs	r2, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fb48 	bl	8001608 <MCAN_SendFrame>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000054c 	.word	0x2000054c

08000f84 <ELM_Init>:
sElMeter*  mMeters;
uint8_t mNumOfMeters;


void ELM_Init(uint8_t numOfMeters)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	mNumOfMeters = numOfMeters;
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <ELM_Init+0x3c>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	7013      	strb	r3, [r2, #0]
	mMeters = malloc(numOfMeters * sizeof(sElMeter));
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 faf8 	bl	8009594 <malloc>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <ELM_Init+0x40>)
 8000faa:	601a      	str	r2, [r3, #0]
	if (mMeters == NULL)
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <ELM_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <ELM_Init+0x34>
	{
	  Error_Handler();
 8000fb4:	f002 f92a 	bl	800320c <Error_Handler>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000554 	.word	0x20000554
 8000fc4:	20000550 	.word	0x20000550

08000fc8 <ELM_AddMeter>:

void ELM_AddMeter(uint8_t ElmId, uint32_t pin, uint16_t VarId)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
	if(ElmId < mNumOfMeters)
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <ELM_AddMeter+0xa0>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d23b      	bcs.n	800105a <ELM_AddMeter+0x92>
	{
		mMeters[ElmId].id = ElmId;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <ELM_AddMeter+0xa4>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	701a      	strb	r2, [r3, #0]
		mMeters[ElmId].Pin = pin;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <ELM_AddMeter+0xa4>)
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	60da      	str	r2, [r3, #12]
		mMeters[ElmId].VarId = VarId;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <ELM_AddMeter+0xa4>)
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	88ba      	ldrh	r2, [r7, #4]
 800101c:	821a      	strh	r2, [r3, #16]
		mMeters[ElmId].W = 0;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <ELM_AddMeter+0xa4>)
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	2200      	movs	r2, #0
 8001030:	809a      	strh	r2, [r3, #4]
		mMeters[ElmId].Wh = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <ELM_AddMeter+0xa4>)
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	2200      	movs	r2, #0
 8001044:	805a      	strh	r2, [r3, #2]
		mMeters[ElmId].LastPulse = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <ELM_AddMeter+0xa4>)
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	}
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000554 	.word	0x20000554
 800106c:	20000550 	.word	0x20000550

08001070 <ELM_Update_1s>:

void ELM_Update_1s(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
	// copy the values to variables
	uint8_t i;
	uint32_t tick = HAL_GetTick();
 8001076:	f002 fd55 	bl	8003b24 <HAL_GetTick>
 800107a:	60b8      	str	r0, [r7, #8]
	uint32_t period;
	uint16_t estimatedPower;
	for(i = 0 ; i < mNumOfMeters; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e06f      	b.n	8001162 <ELM_Update_1s+0xf2>
	{
		period = tick - mMeters[i].LastPulse;
 8001082:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <ELM_Update_1s+0x108>)
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	607b      	str	r3, [r7, #4]
		if (period >  (3600000 / MIN_MEASURABLE_POWER_W))  // power decreased under measurable threshold
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a37      	ldr	r2, [pc, #220]	; (800117c <ELM_Update_1s+0x10c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d90a      	bls.n	80010b8 <ELM_Update_1s+0x48>
		{
			mMeters[i].W = 0;  // set power to zero
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <ELM_Update_1s+0x108>)
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	809a      	strh	r2, [r3, #4]
 80010b6:	e01f      	b.n	80010f8 <ELM_Update_1s+0x88>
		}
		else if (period >  10000)  // after 10 seconds from last S0 pulse start decreasing measured power (worstcase estimation)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80010be:	4293      	cmp	r3, r2
 80010c0:	d91a      	bls.n	80010f8 <ELM_Update_1s+0x88>
		{
			estimatedPower = 3600000 / period;  // actual estimated power
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <ELM_Update_1s+0x110>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	807b      	strh	r3, [r7, #2]
			if (mMeters[i].W > estimatedPower)
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <ELM_Update_1s+0x108>)
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d209      	bcs.n	80010f8 <ELM_Update_1s+0x88>
			{
				mMeters[i].W = estimatedPower;
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <ELM_Update_1s+0x108>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	809a      	strh	r2, [r3, #4]
			}
		}

		VAR_SetVariable(mMeters[i].VarId, mMeters[i].Wh, 1);
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <ELM_Update_1s+0x108>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	8a1b      	ldrh	r3, [r3, #16]
 800110a:	b2d8      	uxtb	r0, r3
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <ELM_Update_1s+0x108>)
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	885b      	ldrh	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	f000 ff5c 	bl	8001fe0 <VAR_SetVariable>
		VAR_SetVariable(mMeters[i].VarId + 10, mMeters[i].W, 1);
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <ELM_Update_1s+0x108>)
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	330a      	adds	r3, #10
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <ELM_Update_1s+0x108>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	b21b      	sxth	r3, r3
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f000 ff42 	bl	8001fe0 <VAR_SetVariable>
	for(i = 0 ; i < mNumOfMeters; i++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <ELM_Update_1s+0x114>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	429a      	cmp	r2, r3
 800116a:	d38a      	bcc.n	8001082 <ELM_Update_1s+0x12>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000550 	.word	0x20000550
 800117c:	00057e40 	.word	0x00057e40
 8001180:	0036ee80 	.word	0x0036ee80
 8001184:	20000554 	.word	0x20000554

08001188 <ELM_GetConsumptionWh>:

uint16_t ELM_GetConsumptionWh(uint8_t ElmId)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if(ElmId < mNumOfMeters)
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <ELM_GetConsumptionWh+0x38>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	429a      	cmp	r2, r3
 800119a:	d209      	bcs.n	80011b0 <ELM_GetConsumptionWh+0x28>
	{
		return mMeters[ElmId].Wh;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <ELM_GetConsumptionWh+0x3c>)
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	885b      	ldrh	r3, [r3, #2]
 80011ae:	e000      	b.n	80011b2 <ELM_GetConsumptionWh+0x2a>
	}
	else
	{
		return 0;
 80011b0:	2300      	movs	r3, #0
	}
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000554 	.word	0x20000554
 80011c4:	20000550 	.word	0x20000550

080011c8 <ELM_GetPowerW>:


uint16_t ELM_GetPowerW(uint8_t ElmId)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if(ElmId < mNumOfMeters)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <ELM_GetPowerW+0x38>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	79fa      	ldrb	r2, [r7, #7]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d209      	bcs.n	80011f0 <ELM_GetPowerW+0x28>
	{
		return mMeters[ElmId].W;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <ELM_GetPowerW+0x3c>)
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	e000      	b.n	80011f2 <ELM_GetPowerW+0x2a>
	}
	return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000554 	.word	0x20000554
 8001204:	20000550 	.word	0x20000550

08001208 <ELM_ResetConsumption>:


void ELM_ResetConsumption(uint8_t ElmId)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	if(ElmId < mNumOfMeters)
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <ELM_ResetConsumption+0x34>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d209      	bcs.n	8001230 <ELM_ResetConsumption+0x28>
	{
		mMeters[ElmId].Wh = 0;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <ELM_ResetConsumption+0x38>)
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	2200      	movs	r2, #0
 800122e:	805a      	strh	r2, [r3, #2]
	}
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000554 	.word	0x20000554
 8001240:	20000550 	.word	0x20000550

08001244 <ELM_ExtiCallback>:

// exti interrupt callback


void ELM_ExtiCallback(uint16_t GPIO_Pin)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	uint8_t i;
	uint32_t period;
	uint32_t tick = HAL_GetTick();
 800124e:	f002 fc69 	bl	8003b24 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]
	for(i = 0 ; i < mNumOfMeters; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e03e      	b.n	80012d8 <ELM_ExtiCallback+0x94>
	{
		if (mMeters[i].Pin == GPIO_Pin)
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <ELM_ExtiCallback+0xa8>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	7dfa      	ldrb	r2, [r7, #23]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	429a      	cmp	r2, r3
 8001270:	d12f      	bne.n	80012d2 <ELM_ExtiCallback+0x8e>
		{
			mMeters[i].Wh ++;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <ELM_ExtiCallback+0xa8>)
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	7dfa      	ldrb	r2, [r7, #23]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	885a      	ldrh	r2, [r3, #2]
 8001284:	3201      	adds	r2, #1
 8001286:	b292      	uxth	r2, r2
 8001288:	805a      	strh	r2, [r3, #2]
			period = tick - mMeters[i].LastPulse;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <ELM_ExtiCallback+0xa8>)
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	60fb      	str	r3, [r7, #12]
			mMeters[i].W = 3600000/period;
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <ELM_ExtiCallback+0xac>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <ELM_ExtiCallback+0xa8>)
 80012ac:	6819      	ldr	r1, [r3, #0]
 80012ae:	7dfa      	ldrb	r2, [r7, #23]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	b282      	uxth	r2, r0
 80012bc:	809a      	strh	r2, [r3, #4]
			mMeters[i].LastPulse = tick;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <ELM_ExtiCallback+0xa8>)
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	609a      	str	r2, [r3, #8]
	for(i = 0 ; i < mNumOfMeters; i++)
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	3301      	adds	r3, #1
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <ELM_ExtiCallback+0xb0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	7dfa      	ldrb	r2, [r7, #23]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3bb      	bcc.n	800125a <ELM_ExtiCallback+0x16>
		}
	}
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000550 	.word	0x20000550
 80012f0:	0036ee80 	.word	0x0036ee80
 80012f4:	20000554 	.word	0x20000554

080012f8 <MCAN_Init>:



// initialization of CAN node, and buffers
void MCAN_Init(CAN_HandleTypeDef	* can, uint8_t id)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af04      	add	r7, sp, #16
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
	uint8_t bank_offset = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	mMcan.Rx0Buf = CB_Create(sizeof(s_CanRxMsg),RX_NMT_BUFF_SIZE);
 8001308:	21c8      	movs	r1, #200	; 0xc8
 800130a:	2024      	movs	r0, #36	; 0x24
 800130c:	f000 fe88 	bl	8002020 <CB_Create>
 8001310:	4603      	mov	r3, r0
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <MCAN_Init+0x140>)
 8001314:	60d3      	str	r3, [r2, #12]
	mMcan.Rx1Buf = CB_Create(sizeof(s_CanRxMsg),RX_BUFF_SIZE);
 8001316:	2150      	movs	r1, #80	; 0x50
 8001318:	2024      	movs	r0, #36	; 0x24
 800131a:	f000 fe81 	bl	8002020 <CB_Create>
 800131e:	4603      	mov	r3, r0
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <MCAN_Init+0x140>)
 8001322:	6113      	str	r3, [r2, #16]
	mMcan.TxBuf = CB_Create(sizeof(s_CanTxMsg),TX_BUFF_SIZE);
 8001324:	2164      	movs	r1, #100	; 0x64
 8001326:	2020      	movs	r0, #32
 8001328:	f000 fe7a 	bl	8002020 <CB_Create>
 800132c:	4603      	mov	r3, r0
 800132e:	4a42      	ldr	r2, [pc, #264]	; (8001438 <MCAN_Init+0x140>)
 8001330:	6153      	str	r3, [r2, #20]
	if (mMcan.Rx0Buf == NULL || mMcan.Rx1Buf == NULL ||mMcan.TxBuf == NULL)
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <MCAN_Init+0x140>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <MCAN_Init+0x48>
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <MCAN_Init+0x140>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
	{
		// TBD
	}

	mMcan.CanHw = can;
 8001340:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <MCAN_Init+0x140>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6093      	str	r3, [r2, #8]
		bank_offset = 15;
	}
	#endif


	mMcan.Node.nodeId = id;
 8001346:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <MCAN_Init+0x140>)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	7013      	strb	r3, [r2, #0]
	mMcan.Node.timeout = CO_DEFAULT_HB_TO/2;
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <MCAN_Init+0x140>)
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	809a      	strh	r2, [r3, #4]
	mMcan.Node.timeout_cnt = 0;
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MCAN_Init+0x140>)
 8001356:	2200      	movs	r2, #0
 8001358:	805a      	strh	r2, [r3, #2]

	mMcan.HbMsg.header.DLC = 1;
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MCAN_Init+0x140>)
 800135c:	2201      	movs	r2, #1
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
	mMcan.HbMsg.header.StdId = HB + mMcan.Node.nodeId;
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MCAN_Init+0x140>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001368:	461a      	mov	r2, r3
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <MCAN_Init+0x140>)
 800136c:	619a      	str	r2, [r3, #24]
	mMcan.HbMsg.header.ExtId = 0x00;
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MCAN_Init+0x140>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
	mMcan.HbMsg.header.RTR = CAN_RTR_DATA;
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MCAN_Init+0x140>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
	mMcan.HbMsg.header.IDE = CAN_ID_STD;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <MCAN_Init+0x140>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]

	// init network
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e014      	b.n	80013b0 <MCAN_Init+0xb8>
	{
		mNodes[i].timeout = CO_DEFAULT_HB_TO;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <MCAN_Init+0x144>)
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001392:	809a      	strh	r2, [r3, #4]
		mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	4a29      	ldr	r2, [pc, #164]	; (800143c <MCAN_Init+0x144>)
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	719a      	strb	r2, [r3, #6]
		mNodes[i].nodeId = i;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4926      	ldr	r1, [pc, #152]	; (800143c <MCAN_Init+0x144>)
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d9e7      	bls.n	8001386 <MCAN_Init+0x8e>
	}
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MCAN_Init+0x140>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MCAN_Init+0x140>)
 80013be:	7999      	ldrb	r1, [r3, #6]
 80013c0:	4a1e      	ldr	r2, [pc, #120]	; (800143c <MCAN_Init+0x144>)
 80013c2:	00c3      	lsls	r3, r0, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	460a      	mov	r2, r1
 80013c8:	719a      	strb	r2, [r3, #6]



	// set the filter of FIFO0 for hearbeats (0x700 - 0x70F)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO0, 1 + bank_offset , HB, HB+ID_RANGE, 0,0); // HeartBeats from all devices => FMI = 0/4
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MCAN_Init+0x140>)
 80013cc:	6898      	ldr	r0, [r3, #8]
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2300      	movs	r3, #0
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f240 730f 	movw	r3, #1807	; 0x70f
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013e6:	2100      	movs	r1, #0
 80013e8:	f000 f990 	bl	800170c <Set_Filter_Id_Mask>

	// set the filter of FIFO1 for all other messages (0x000 - 0x6FF)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO1, 2 + bank_offset , 0x000, 0x6FF, 0,0);
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MCAN_Init+0x140>)
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	3302      	adds	r3, #2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2101      	movs	r1, #1
 8001408:	f000 f980 	bl	800170c <Set_Filter_Id_Mask>


	HAL_CAN_ActivateNotification(mMcan.CanHw, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_LAST_ERROR_CODE| CAN_IT_ERROR);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MCAN_Init+0x140>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f648 0112 	movw	r1, #34834	; 0x8812
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fc83 	bl	8005d20 <HAL_CAN_ActivateNotification>

	mMcan.CanHw->Instance->MCR &= ~0x00010000;	// enable CAN in debug mode (clear DBF bit)
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MCAN_Init+0x140>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <MCAN_Init+0x140>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000558 	.word	0x20000558
 800143c:	20000594 	.word	0x20000594

08001440 <MCAN_Start>:



// Start CANOPEN protocols
void MCAN_Start(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_CAN_Start(mMcan.CanHw);  // start can
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MCAN_Start+0x2c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f004 fa38 	bl	80058be <HAL_CAN_Start>
	mMcan.Node.canStatus = eNS_NMT_RUN;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <MCAN_Start+0x2c>)
 8001450:	2201      	movs	r2, #1
 8001452:	719a      	strb	r2, [r3, #6]
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <MCAN_Start+0x2c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <MCAN_Start+0x2c>)
 800145c:	7999      	ldrb	r1, [r3, #6]
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <MCAN_Start+0x30>)
 8001460:	00c3      	lsls	r3, r0, #3
 8001462:	4413      	add	r3, r2
 8001464:	460a      	mov	r2, r1
 8001466:	719a      	strb	r2, [r3, #6]
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000558 	.word	0x20000558
 8001470:	20000594 	.word	0x20000594

08001474 <MCAN_Update_10ms>:
	return mNodes;
}

// Periodic update function for synchronous CAN handling
void MCAN_Update_10ms(void)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b098      	sub	sp, #96	; 0x60
 8001478:	af04      	add	r7, sp, #16
	uint32_t	TxMailbox;


	// Check messages from FIFO 0 (NMT, HB)

	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 800147a:	e01e      	b.n	80014ba <MCAN_Update_10ms+0x46>
	{
		if (msg.header.StdId >= HB && msg.header.StdId <= HB + ID_RANGE) // received HB
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001482:	d31a      	bcc.n	80014ba <MCAN_Update_10ms+0x46>
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 800148a:	d216      	bcs.n	80014ba <MCAN_Update_10ms+0x46>
		{
			uint8_t nodeId = msg.header.StdId - HB;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			if (nodeId < MAX_NUM_OF_NODES)  // valid heartbeat received
 8001492:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001496:	2b07      	cmp	r3, #7
 8001498:	d80f      	bhi.n	80014ba <MCAN_Update_10ms+0x46>
			{
				mNodes[nodeId].canStatus = (e_NodeStatus)msg.data[0];
 800149a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800149e:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80014a2:	4a38      	ldr	r2, [pc, #224]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	460a      	mov	r2, r1
 80014aa:	719a      	strb	r2, [r3, #6]
				mNodes[nodeId].timeout_cnt = 0;
 80014ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014b0:	4a34      	ldr	r2, [pc, #208]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	805a      	strh	r2, [r3, #2]
	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MCAN_Update_10ms+0x114>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fe4d 	bl	8002164 <CB_Get>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0d5      	beq.n	800147c <MCAN_Update_10ms+0x8>
			}
		}
	}

	// Check timeout of all nodes
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014d4:	e02e      	b.n	8001534 <MCAN_Update_10ms+0xc0>
	{
		mNodes[i].timeout_cnt += 10;  // 10ms period of execution of this fcn
 80014d6:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	330a      	adds	r3, #10
 80014e2:	b299      	uxth	r1, r3
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	805a      	strh	r2, [r3, #2]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	885a      	ldrh	r2, [r3, #2]
 80014fa:	4922      	ldr	r1, [pc, #136]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	d912      	bls.n	800152e <MCAN_Update_10ms+0xba>
				mNodes[i].canStatus != eNS_NMT_UNKNOWN)
 8001508:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <MCAN_Update_10ms+0x110>)
 800150a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	799b      	ldrb	r3, [r3, #6]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	d00b      	beq.n	800152e <MCAN_Update_10ms+0xba>
		{
			mNodes[i].timeout_cnt = 0;
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MCAN_Update_10ms+0x110>)
 8001518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	805a      	strh	r2, [r3, #2]
			mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MCAN_Update_10ms+0x110>)
 8001524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	719a      	strb	r2, [r3, #6]
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 800152e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001530:	3301      	adds	r3, #1
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	2b07      	cmp	r3, #7
 8001538:	ddcd      	ble.n	80014d6 <MCAN_Update_10ms+0x62>
		}
	}

	// Send heartbeat if it's time
	mMcan.Node.timeout_cnt += 10;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MCAN_Update_10ms+0x114>)
 800153c:	885b      	ldrh	r3, [r3, #2]
 800153e:	330a      	adds	r3, #10
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001544:	805a      	strh	r2, [r3, #2]
	if (mMcan.Node.timeout_cnt >= mMcan.Node.timeout)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001548:	885a      	ldrh	r2, [r3, #2]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MCAN_Update_10ms+0x114>)
 800154c:	889b      	ldrh	r3, [r3, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d313      	bcc.n	800157a <MCAN_Update_10ms+0x106>
	{
		mMcan.Node.timeout_cnt = 0;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001554:	2200      	movs	r2, #0
 8001556:	805a      	strh	r2, [r3, #2]
		mMcan.HbMsg.data[0] = mMcan.Node.canStatus;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MCAN_Update_10ms+0x114>)
 800155a:	799a      	ldrb	r2, [r3, #6]
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MCAN_Update_10ms+0x114>)
 800155e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		Send(mMcan.HbMsg);
 8001562:	4d09      	ldr	r5, [pc, #36]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001564:	466c      	mov	r4, sp
 8001566:	f105 0328 	add.w	r3, r5, #40	; 0x28
 800156a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001570:	f105 0318 	add.w	r3, r5, #24
 8001574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001576:	f000 f871 	bl	800165c <Send>
	}

}
 800157a:	bf00      	nop
 800157c:	3750      	adds	r7, #80	; 0x50
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	bf00      	nop
 8001584:	20000594 	.word	0x20000594
 8001588:	20000558 	.word	0x20000558

0800158c <MCAN_Transmit>:


// function to be called periodically at a rate of transmitting can messages. (for example every 5 ms)
// One CAN message is is sent if TX buffer is not empty
void MCAN_Transmit(void)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
	s_CanTxMsg TxMsg;
	s_CanNode* tmp;
	uint32_t	TxMailbox;

	if  (0 == CB_Probe(mMcan.TxBuf,(uint8_t*)&TxMsg))  // fetch the message from the buffer
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MCAN_Transmit+0x4c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f107 0208 	add.w	r2, r7, #8
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fd88 	bl	80020b2 <CB_Probe>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d113      	bne.n	80015d0 <MCAN_Transmit+0x44>
	{
		if (HAL_OK == HAL_CAN_AddTxMessage(mMcan.CanHw, &TxMsg.header, TxMsg.data, &TxMailbox))  // transmit the message
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MCAN_Transmit+0x4c>)
 80015aa:	6898      	ldr	r0, [r3, #8]
 80015ac:	1d3c      	adds	r4, r7, #4
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	f103 0218 	add.w	r2, r3, #24
 80015b6:	f107 0108 	add.w	r1, r7, #8
 80015ba:	4623      	mov	r3, r4
 80015bc:	f004 f9c3 	bl	8005946 <HAL_CAN_AddTxMessage>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d104      	bne.n	80015d0 <MCAN_Transmit+0x44>
		{
			CB_Remove(mMcan.TxBuf);  // remove the message from the buffer only if transmission was succesfull
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <MCAN_Transmit+0x4c>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fd9e 	bl	800210c <CB_Remove>
		}
	}
}
 80015d0:	bf00      	nop
 80015d2:	372c      	adds	r7, #44	; 0x2c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000558 	.word	0x20000558

080015dc <MCAN_GetRxMessage>:

// Gets a message from receive buffer to be processed by application
// returns 1 if message is available, otherwise return 0
uint8_t MCAN_GetRxMessage( s_CanRxMsg* msg)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (0 == CB_Get(mMcan.Rx1Buf,(uint8_t*)msg))
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MCAN_GetRxMessage+0x28>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fdba 	bl	8002164 <CB_Get>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <MCAN_GetRxMessage+0x1e>
	{
		return 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <MCAN_GetRxMessage+0x20>
	}
	return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000558 	.word	0x20000558

08001608 <MCAN_SendFrame>:
}


// Sends general CAN data message
uint8_t MCAN_SendFrame(uint16_t cobid, uint8_t* data, uint8_t dlc)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b08f      	sub	sp, #60	; 0x3c
 800160c:	af04      	add	r7, sp, #16
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	717b      	strb	r3, [r7, #5]
	s_CanTxMsg msg;
	msg.header.DLC = dlc;
 8001618:	797b      	ldrb	r3, [r7, #5]
 800161a:	61bb      	str	r3, [r7, #24]
	msg.header.StdId = cobid;
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	60bb      	str	r3, [r7, #8]
	msg.header.ExtId = 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
	msg.header.RTR = CAN_RTR_DATA;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
	msg.header.IDE = CAN_ID_STD;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

	memcpy(&msg.data[0], data, dlc);
 800162c:	797a      	ldrb	r2, [r7, #5]
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	3318      	adds	r3, #24
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f007 ffbc 	bl	80095b4 <memcpy>
	return Send(msg);
 800163c:	466c      	mov	r4, sp
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164e:	f000 f805 	bl	800165c <Send>
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	372c      	adds	r7, #44	; 0x2c
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <Send>:

/*************** Private Fcns **************/

// CAN transmit
static uint8_t Send(s_CanTxMsg msg)
{
 800165c:	b084      	sub	sp, #16
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
 8001662:	f107 0c08 	add.w	ip, r7, #8
 8001666:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// instert to Tx buffer
	CB_Put(mMcan.TxBuf,(uint8_t*) &msg);
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <Send+0x2c>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f107 0108 	add.w	r1, r7, #8
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fdb3 	bl	80021de <CB_Put>
}
 8001678:	bf00      	nop
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001682:	b004      	add	sp, #16
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000558 	.word	0x20000558

0800168c <HAL_CAN_RxFifo0MsgPendingCallback>:


// interrupt handlers - callbacks
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &tmp.header, tmp.data);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	331c      	adds	r3, #28
 800169a:	f107 020c 	add.w	r2, r7, #12
 800169e:	2100      	movs	r1, #0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f004 fa2b 	bl	8005afc <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx0Buf,(uint8_t*) &tmp);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f107 020c 	add.w	r2, r7, #12
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd8f 	bl	80021de <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 80016c0:	bf00      	nop
 80016c2:	3730      	adds	r7, #48	; 0x30
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000558 	.word	0x20000558

080016cc <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &tmp.header, tmp.data);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	331c      	adds	r3, #28
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	2101      	movs	r1, #1
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f004 fa0b 	bl	8005afc <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx1Buf,(uint8_t*) &tmp);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fd6f 	bl	80021de <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000558 	.word	0x20000558

0800170c <Set_Filter_Id_Mask>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
void Set_Filter_Id_Mask (CAN_HandleTypeDef *hcan, uint8_t fifo,  uint8_t bank, uint16_t id_1_from, uint16_t id_1_to, uint16_t id_2_from, uint16_t id_2_to)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	460b      	mov	r3, r1
 8001720:	70bb      	strb	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	803b      	strh	r3, [r7, #0]
	CAN_FilterTypeDef			 filterInitStructure;

	filterInitStructure.SlaveStartFilterBank  = 14;
 8001726:	230e      	movs	r3, #14
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c


	filterInitStructure.FilterBank									= bank;
 800172a:	78bb      	ldrb	r3, [r7, #2]
 800172c:	61fb      	str	r3, [r7, #28]


	filterInitStructure.FilterMode									=	CAN_FILTERMODE_IDMASK;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
	filterInitStructure.FilterScale									=	CAN_FILTERSCALE_16BIT;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
	filterInitStructure.FilterFIFOAssignment				=	fifo;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	61bb      	str	r3, [r7, #24]

	filterInitStructure.FilterIdHigh								=	id_2_from << 5;
 800173a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	60bb      	str	r3, [r7, #8]
	filterInitStructure.FilterIdLow 								=	id_1_from << 5;
 8001740:	883b      	ldrh	r3, [r7, #0]
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	60fb      	str	r3, [r7, #12]
	filterInitStructure.FilterMaskIdHigh						= Filter_Calc_Mask_Code(id_2_from,id_2_to);
 8001746:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800174a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f816 	bl	8001780 <Filter_Calc_Mask_Code>
 8001754:	4603      	mov	r3, r0
 8001756:	613b      	str	r3, [r7, #16]
	filterInitStructure.FilterMaskIdLow 						= Filter_Calc_Mask_Code(id_1_from,id_1_to);
 8001758:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f80e 	bl	8001780 <Filter_Calc_Mask_Code>
 8001764:	4603      	mov	r3, r0
 8001766:	617b      	str	r3, [r7, #20]

	filterInitStructure.FilterActivation						=	ENABLE;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan,&filterInitStructure);
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f003 ffd9 	bl	800572a <HAL_CAN_ConfigFilter>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <Filter_Calc_Mask_Code>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
uint16_t Filter_Calc_Mask_Code (uint16_t from,uint16_t to)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	4613      	mov	r3, r2
 800178e:	80bb      	strh	r3, [r7, #4]
	uint16_t	help			 	= 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	81fb      	strh	r3, [r7, #14]
	uint8_t		shift_cnt		= 0x00;
 8001794:	2300      	movs	r3, #0
 8001796:	737b      	strb	r3, [r7, #13]
	uint8_t			first			= FALSE;
 8001798:	2300      	movs	r3, #0
 800179a:	733b      	strb	r3, [r7, #12]

	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 800179c:	2300      	movs	r3, #0
 800179e:	737b      	strb	r3, [r7, #13]
 80017a0:	e022      	b.n	80017e8 <Filter_Calc_Mask_Code+0x68>
	{
		if(((from & 0x8000) == (to & 0x8000)) && (!first))
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	4053      	eors	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db09      	blt.n	80017c4 <Filter_Calc_Mask_Code+0x44>
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <Filter_Calc_Mask_Code+0x44>
		{
			from = from << 1;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	e00e      	b.n	80017e2 <Filter_Calc_Mask_Code+0x62>
		}
		else
		{
			help = help << 1;
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	81fb      	strh	r3, [r7, #14]
			first = TRUE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	733b      	strb	r3, [r7, #12]
			help |= 0x01;
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	81fb      	strh	r3, [r7, #14]

			from = from << 1;
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 80017dc:	88bb      	ldrh	r3, [r7, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	80bb      	strh	r3, [r7, #4]
	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	3301      	adds	r3, #1
 80017e6:	737b      	strb	r3, [r7, #13]
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d9d9      	bls.n	80017a2 <Filter_Calc_Mask_Code+0x22>
		}
	}
	help = (~help) << 5;
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	81fb      	strh	r3, [r7, #14]
	return help;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <RTC_GetTime>:

/* USER CODE END 0 */


sDateTime RTC_GetTime()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  sDateTime dt;
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <RTC_GetTime+0x6c>)
 800181a:	f006 fcad 	bl	8008178 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	4619      	mov	r1, r3
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <RTC_GetTime+0x6c>)
 8001828:	f006 fd89 	bl	800833e <HAL_RTC_GetDate>

  dt.Year = 2000 + sdatestructureget.Year;
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	b29b      	uxth	r3, r3
 8001830:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001834:	b29b      	uxth	r3, r3
 8001836:	84fb      	strh	r3, [r7, #38]	; 0x26
  dt.Month = sdatestructureget.Month;
 8001838:	7f7b      	ldrb	r3, [r7, #29]
 800183a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dt.Day = sdatestructureget.Date;
 800183e:	7fbb      	ldrb	r3, [r7, #30]
 8001840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  dt.Hour = stimestructureget.Hours;
 8001844:	7a3b      	ldrb	r3, [r7, #8]
 8001846:	f887 3020 	strb.w	r3, [r7, #32]
  dt.Minute = stimestructureget.Minutes;
 800184a:	7a7b      	ldrb	r3, [r7, #9]
 800184c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dt.Second = stimestructureget.Seconds;
 8001850:	7abb      	ldrb	r3, [r7, #10]
 8001852:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dt.WeekDay = sdatestructureget.WeekDay;
 8001856:	7f3b      	ldrb	r3, [r7, #28]
 8001858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return dt;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	cb03      	ldmia	r3!, {r0, r1}
 8001866:	6010      	str	r0, [r2, #0]
 8001868:	6051      	str	r1, [r2, #4]
}
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000c20 	.word	0x20000c20

08001878 <RTC_SetTime>:

void RTC_SetTime(sDateTime dt)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	463b      	mov	r3, r7
 8001880:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Configure RTC Calendar */
   RTC_DateTypeDef sdatestructure;
   RTC_TimeTypeDef stimestructure;

   /*##-1- Configure the Date #################################################*/
   sdatestructure.Year = dt.Year - 2000;
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	3330      	adds	r3, #48	; 0x30
 800188a:	b2db      	uxtb	r3, r3
 800188c:	77fb      	strb	r3, [r7, #31]
   sdatestructure.Month = dt.Month;
 800188e:	793b      	ldrb	r3, [r7, #4]
 8001890:	777b      	strb	r3, [r7, #29]
   sdatestructure.Date = dt.Day;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	77bb      	strb	r3, [r7, #30]
   sdatestructure.WeekDay = dt.WeekDay;
 8001896:	797b      	ldrb	r3, [r7, #5]
 8001898:	773b      	strb	r3, [r7, #28]

   if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <RTC_SetTime+0x6c>)
 80018a4:	f006 fcc4 	bl	8008230 <HAL_RTC_SetDate>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-2- Configure the Time #################################################*/
   stimestructure.Hours = dt.Hour;
 80018a8:	783b      	ldrb	r3, [r7, #0]
 80018aa:	723b      	strb	r3, [r7, #8]
   stimestructure.Minutes = dt.Minute;
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	727b      	strb	r3, [r7, #9]
   stimestructure.Seconds = dt.Second;
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	72bb      	strb	r3, [r7, #10]
   stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 80018b4:	2300      	movs	r3, #0
 80018b6:	72fb      	strb	r3, [r7, #11]
   stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
   stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]

   if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <RTC_SetTime+0x6c>)
 80018ca:	f006 fbb8 	bl	800803e <HAL_RTC_SetTime>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-3- Writes a data in a RTC Backup data Register1 #######################*/
   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80018ce:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80018d2:	2101      	movs	r1, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <RTC_SetTime+0x6c>)
 80018d6:	f006 fe51 	bl	800857c <HAL_RTCEx_BKUPWrite>
	
	// LOG_InsertGeneralMessage("Real Time Clock changed !");
 }
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000c20 	.word	0x20000c20

080018e8 <RTC_SetUnixTime>:

 
 void RTC_SetUnixTime(uint32_t unixtime)
 {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	 struct tm * tm_now;
	 time_t unixnow = unixtime;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	2000      	movs	r0, #0
 80018f4:	460a      	mov	r2, r1
 80018f6:	4603      	mov	r3, r0
 80018f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 tm_now = localtime(&unixnow);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fd35 	bl	8009370 <localtime>
 8001906:	61f8      	str	r0, [r7, #28]
	 sDateTime time;
	 time.Second = tm_now->tm_sec;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	72bb      	strb	r3, [r7, #10]
	 time.Minute = tm_now->tm_min;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	727b      	strb	r3, [r7, #9]
	 time.Hour = tm_now->tm_hour;    
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	723b      	strb	r3, [r7, #8]
	 time.Day = tm_now->tm_mday;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	72fb      	strb	r3, [r7, #11]
	 time.Month = tm_now->tm_mon +1;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	733b      	strb	r3, [r7, #12]
	 time.Year = tm_now->tm_year + 1900;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800193e:	b29b      	uxth	r3, r3
 8001940:	81fb      	strh	r3, [r7, #14]
	 RTC_SetTime(time);
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	e893 0003 	ldmia.w	r3, {r0, r1}
 800194a:	f7ff ff95 	bl	8001878 <RTC_SetTime>
 }
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <UI_Init>:
void UI_Struct_Initialisation (sUI init_struct, sUI *target);



void UI_Init (sUIHwInit* hw)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
	sUI init_struct;
	
	init_struct.Status			= eUI_OFF;
 8001960:	2300      	movs	r3, #0
 8001962:	72bb      	strb	r3, [r7, #10]
	init_struct.Led_Cnt			= 0x00;
 8001964:	2300      	movs	r3, #0
 8001966:	813b      	strh	r3, [r7, #8]
	
	init_struct.Pin					= hw->Led_Life.Pin;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_Life.Port;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_Life.Logic;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7a1b      	ldrb	r3, [r3, #8]
 8001978:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_Life);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <UI_Init+0x58>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001984:	f000 f818 	bl	80019b8 <UI_Struct_Initialisation>
	
	init_struct.Pin					= hw->Led_R.Pin;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_R.Port;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_R.Logic;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7d1b      	ldrb	r3, [r3, #20]
 8001998:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_R);
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <UI_Init+0x5c>)
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a4:	f000 f808 	bl	80019b8 <UI_Struct_Initialisation>
	init_struct.Pin					= hw->Buzzer.Pin;
	init_struct.Port				= hw->Buzzer.Port;
	init_struct.Logic				= hw->Buzzer.Logic;
  UI_Struct_Initialisation (init_struct, &Buzzer);
#endif
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200005d4 	.word	0x200005d4
 80019b4:	200005e4 	.word	0x200005e4

080019b8 <UI_Struct_Initialisation>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
void UI_Struct_Initialisation (sUI init_struct, sUI *target)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	463c      	mov	r4, r7
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	*target = init_struct;
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	461c      	mov	r4, r3
 80019c8:	463b      	mov	r3, r7
 80019ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_Control(target,0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	6a38      	ldr	r0, [r7, #32]
 80019d4:	f000 f844 	bl	8001a60 <UI_Control>
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <UI_Update_10ms>:


// periodicaly scheduled updtae function
void UI_Update_10ms()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	UI_Control(&LED_Life, 	0x00);
 80019e4:	2100      	movs	r1, #0
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <UI_Update_10ms+0x18>)
 80019e8:	f000 f83a 	bl	8001a60 <UI_Control>
	UI_Control(&LED_R, 	0x00);
 80019ec:	2100      	movs	r1, #0
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <UI_Update_10ms+0x1c>)
 80019f0:	f000 f836 	bl	8001a60 <UI_Control>
#ifndef LIMITED_UI
	UI_Control(&LED_G, 	0x00);
	UI_Control(&LED_B, 	0x00);
	UI_Control(&Buzzer, 	0x00);
#endif
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200005d4 	.word	0x200005d4
 80019fc:	200005e4 	.word	0x200005e4

08001a00 <UI_LED_R_SetMode>:


void UI_LED_R_SetMode(eUI_Status status)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	if (LED_R.Status != status)
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <UI_LED_R_SetMode+0x2c>)
 8001a0c:	789b      	ldrb	r3, [r3, #2]
 8001a0e:	79fa      	ldrb	r2, [r7, #7]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d005      	beq.n	8001a20 <UI_LED_R_SetMode+0x20>
	{
		LED_R.Status = status;
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <UI_LED_R_SetMode+0x2c>)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	7093      	strb	r3, [r2, #2]
		LED_R.Led_Cnt = 0;
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <UI_LED_R_SetMode+0x2c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200005e4 	.word	0x200005e4

08001a30 <UI_LED_Life_SetMode>:
		LED_B.Led_Cnt = 0;
	}
}

void UI_LED_Life_SetMode(eUI_Status status)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	if (LED_Life.Status != status)
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <UI_LED_Life_SetMode+0x2c>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d005      	beq.n	8001a50 <UI_LED_Life_SetMode+0x20>
	{
		LED_Life.Status = status;
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <UI_LED_Life_SetMode+0x2c>)
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	7093      	strb	r3, [r2, #2]
		LED_Life.Led_Cnt = 0;
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <UI_LED_Life_SetMode+0x2c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
	}
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	200005d4 	.word	0x200005d4

08001a60 <UI_Control>:
  * @brief  Controlling states of LED 
  * @param  led: Pointer to specific LED
  * @param  led_switch: If isn't this parameter null, the function inverts status of specific LED, but LED has to be in TOGGLE mode!
  */
static void UI_Control (sUI *led,uint8_t led_switch)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]

	switch(led->Status)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	f200 823f 	bhi.w	8001ef4 <UI_Control+0x494>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <UI_Control+0x1c>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001aa1 	.word	0x08001aa1
 8001a80:	08001ad1 	.word	0x08001ad1
 8001a84:	08001b01 	.word	0x08001b01
 8001a88:	08001b79 	.word	0x08001b79
 8001a8c:	08001bf1 	.word	0x08001bf1
 8001a90:	08001c65 	.word	0x08001c65
 8001a94:	08001cdb 	.word	0x08001cdb
 8001a98:	08001d6f 	.word	0x08001d6f
 8001a9c:	08001d53 	.word	0x08001d53
	{
		case eUI_OFF:
			if(led->Logic == eUIL_NEGATIVE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <UI_Control+0x5c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6858      	ldr	r0, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f005 f841 	bl	8006b3c <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
			}
			break;
 8001aba:	e226      	b.n	8001f0a <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6858      	ldr	r0, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f005 f837 	bl	8006b3c <HAL_GPIO_WritePin>
			break;
 8001ace:	e21c      	b.n	8001f0a <UI_Control+0x4aa>
		case eUI_ON:
			if(led->Logic == eUIL_NEGATIVE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7b1b      	ldrb	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <UI_Control+0x8c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6858      	ldr	r0, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f005 f829 	bl	8006b3c <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
			}			
			break;
 8001aea:	e20e      	b.n	8001f0a <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6858      	ldr	r0, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	4619      	mov	r1, r3
 8001afa:	f005 f81f 	bl	8006b3c <HAL_GPIO_WritePin>
			break;
 8001afe:	e204      	b.n	8001f0a <UI_Control+0x4aa>
		case eUI_BLINKING_SLOW:
			if(led->Led_Cnt <= 50)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2b32      	cmp	r3, #50	; 0x32
 8001b06:	d817      	bhi.n	8001b38 <UI_Control+0xd8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7b1b      	ldrb	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <UI_Control+0xc4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f005 f80d 	bl	8006b3c <HAL_GPIO_WritePin>
 8001b22:	e020      	b.n	8001b66 <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6858      	ldr	r0, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	f005 f803 	bl	8006b3c <HAL_GPIO_WritePin>
 8001b36:	e016      	b.n	8001b66 <UI_Control+0x106>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <UI_Control+0xf4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6858      	ldr	r0, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f004 fff5 	bl	8006b3c <HAL_GPIO_WritePin>
 8001b52:	e008      	b.n	8001b66 <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6858      	ldr	r0, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	f004 ffeb 	bl	8006b3c <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 100)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	2b63      	cmp	r3, #99	; 0x63
 8001b6c:	f240 81c4 	bls.w	8001ef8 <UI_Control+0x498>
			{
				led->Led_Cnt = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b76:	e1bf      	b.n	8001ef8 <UI_Control+0x498>
		case eUI_BLINKING_FAST:
			if(led->Led_Cnt <= 10 )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d817      	bhi.n	8001bb0 <UI_Control+0x150>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7b1b      	ldrb	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <UI_Control+0x13c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6858      	ldr	r0, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	f004 ffd1 	bl	8006b3c <HAL_GPIO_WritePin>
 8001b9a:	e020      	b.n	8001bde <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6858      	ldr	r0, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f004 ffc7 	bl	8006b3c <HAL_GPIO_WritePin>
 8001bae:	e016      	b.n	8001bde <UI_Control+0x17e>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <UI_Control+0x16c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6858      	ldr	r0, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f004 ffb9 	bl	8006b3c <HAL_GPIO_WritePin>
 8001bca:	e008      	b.n	8001bde <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f004 ffaf 	bl	8006b3c <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 20)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b13      	cmp	r3, #19
 8001be4:	f240 818a 	bls.w	8001efc <UI_Control+0x49c>
			{
				led->Led_Cnt = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8001bee:	e185      	b.n	8001efc <UI_Control+0x49c>
		case eUI_BLINK_ONCE:
			if(led->Led_Cnt <= 2)  // blink for 20ms
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d817      	bhi.n	8001c28 <UI_Control+0x1c8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b1b      	ldrb	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <UI_Control+0x1b4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6858      	ldr	r0, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f004 ff95 	bl	8006b3c <HAL_GPIO_WritePin>
				}
				
				led->Status = eUI_OFF;   // go to permanent off state
				led->Led_Cnt = 0;
			}		
			break;
 8001c12:	e17a      	b.n	8001f0a <UI_Control+0x4aa>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6858      	ldr	r0, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4619      	mov	r1, r3
 8001c22:	f004 ff8b 	bl	8006b3c <HAL_GPIO_WritePin>
			break;
 8001c26:	e170      	b.n	8001f0a <UI_Control+0x4aa>
				if(led->Logic == eUIL_NEGATIVE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b1b      	ldrb	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <UI_Control+0x1e4>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6858      	ldr	r0, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f004 ff7d 	bl	8006b3c <HAL_GPIO_WritePin>
 8001c42:	e008      	b.n	8001c56 <UI_Control+0x1f6>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6858      	ldr	r0, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	f004 ff73 	bl	8006b3c <HAL_GPIO_WritePin>
				led->Status = eUI_OFF;   // go to permanent off state
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	709a      	strb	r2, [r3, #2]
				led->Led_Cnt = 0;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	801a      	strh	r2, [r3, #0]
			break;
 8001c62:	e152      	b.n	8001f0a <UI_Control+0x4aa>
		 case eUI_BEEP_ONCE:
					if(led->Led_Cnt <= 300)  // beep for 3 sec
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c6c:	d817      	bhi.n	8001c9e <UI_Control+0x23e>
					{
						if(led->Logic == eUIL_NEGATIVE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7b1b      	ldrb	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <UI_Control+0x22a>
						{
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6858      	ldr	r0, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	f004 ff5a 	bl	8006b3c <HAL_GPIO_WritePin>
						}

						led->Status = eUI_OFF;   // go to permanent off state
						led->Led_Cnt = 0;
					}
					break;
 8001c88:	e13f      	b.n	8001f0a <UI_Control+0x4aa>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6858      	ldr	r0, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2201      	movs	r2, #1
 8001c96:	4619      	mov	r1, r3
 8001c98:	f004 ff50 	bl	8006b3c <HAL_GPIO_WritePin>
					break;
 8001c9c:	e135      	b.n	8001f0a <UI_Control+0x4aa>
						if(led->Logic == eUIL_NEGATIVE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b1b      	ldrb	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <UI_Control+0x25a>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6858      	ldr	r0, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f004 ff42 	bl	8006b3c <HAL_GPIO_WritePin>
 8001cb8:	e008      	b.n	8001ccc <UI_Control+0x26c>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6858      	ldr	r0, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f004 ff38 	bl	8006b3c <HAL_GPIO_WritePin>
						led->Status = eUI_OFF;   // go to permanent off state
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	709a      	strb	r2, [r3, #2]
						led->Led_Cnt = 0;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
					break;
 8001cd8:	e117      	b.n	8001f0a <UI_Control+0x4aa>
		case eUI_FLASH:
			if(led->Led_Cnt < 2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d817      	bhi.n	8001d12 <UI_Control+0x2b2>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b1b      	ldrb	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <UI_Control+0x29e>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6858      	ldr	r0, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f004 ff20 	bl	8006b3c <HAL_GPIO_WritePin>
 8001cfc:	e020      	b.n	8001d40 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6858      	ldr	r0, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f004 ff16 	bl	8006b3c <HAL_GPIO_WritePin>
 8001d10:	e016      	b.n	8001d40 <UI_Control+0x2e0>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b1b      	ldrb	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <UI_Control+0x2ce>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6858      	ldr	r0, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2201      	movs	r2, #1
 8001d26:	4619      	mov	r1, r3
 8001d28:	f004 ff08 	bl	8006b3c <HAL_GPIO_WritePin>
 8001d2c:	e008      	b.n	8001d40 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6858      	ldr	r0, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f004 fefe 	bl	8006b3c <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2bc7      	cmp	r3, #199	; 0xc7
 8001d46:	f240 80db 	bls.w	8001f00 <UI_Control+0x4a0>
			{
				led->Led_Cnt = 0;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8001d50:	e0d6      	b.n	8001f00 <UI_Control+0x4a0>
		case eUI_TOGGLE:
			if(led_switch)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80d5 	beq.w	8001f04 <UI_Control+0x4a4>
			{
				HAL_GPIO_TogglePin(led->Port,led->Pin);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f004 ff00 	bl	8006b6c <HAL_GPIO_TogglePin>
			}
			break;
 8001d6c:	e0ca      	b.n	8001f04 <UI_Control+0x4a4>
		case eUI_COMBI_1:
			if(led->Led_Cnt < 10)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d817      	bhi.n	8001da6 <UI_Control+0x346>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <UI_Control+0x332>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6858      	ldr	r0, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f004 fed6 	bl	8006b3c <HAL_GPIO_WritePin>
 8001d90:	e0a8      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6858      	ldr	r0, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f004 fecc 	bl	8006b3c <HAL_GPIO_WritePin>
 8001da4:	e09e      	b.n	8001ee4 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 10)&&(led->Led_Cnt < 50))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d91b      	bls.n	8001de6 <UI_Control+0x386>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b31      	cmp	r3, #49	; 0x31
 8001db4:	d817      	bhi.n	8001de6 <UI_Control+0x386>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <UI_Control+0x372>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6858      	ldr	r0, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f004 feb6 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001dd0:	e088      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6858      	ldr	r0, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	f004 feac 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001de4:	e07e      	b.n	8001ee4 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 50)&&(led->Led_Cnt < 60))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	2b31      	cmp	r3, #49	; 0x31
 8001dec:	d91b      	bls.n	8001e26 <UI_Control+0x3c6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2b3b      	cmp	r3, #59	; 0x3b
 8001df4:	d817      	bhi.n	8001e26 <UI_Control+0x3c6>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7b1b      	ldrb	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <UI_Control+0x3b2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6858      	ldr	r0, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f004 fe96 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e10:	e068      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6858      	ldr	r0, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f004 fe8c 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e24:	e05e      	b.n	8001ee4 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 60)&&(led->Led_Cnt < 100))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001e2c:	d91b      	bls.n	8001e66 <UI_Control+0x406>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b63      	cmp	r3, #99	; 0x63
 8001e34:	d817      	bhi.n	8001e66 <UI_Control+0x406>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b1b      	ldrb	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <UI_Control+0x3f2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6858      	ldr	r0, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f004 fe76 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e50:	e048      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6858      	ldr	r0, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f004 fe6c 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e64:	e03e      	b.n	8001ee4 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 100)&&(led->Led_Cnt < 150))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b63      	cmp	r3, #99	; 0x63
 8001e6c:	d91b      	bls.n	8001ea6 <UI_Control+0x446>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	2b95      	cmp	r3, #149	; 0x95
 8001e74:	d817      	bhi.n	8001ea6 <UI_Control+0x446>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7b1b      	ldrb	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <UI_Control+0x432>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6858      	ldr	r0, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f004 fe56 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e90:	e028      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6858      	ldr	r0, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f004 fe4c 	bl	8006b3c <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001ea4:	e01e      	b.n	8001ee4 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 150)&&(led->Led_Cnt < 200))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	2b95      	cmp	r3, #149	; 0x95
 8001eac:	d91a      	bls.n	8001ee4 <UI_Control+0x484>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	2bc7      	cmp	r3, #199	; 0xc7
 8001eb4:	d816      	bhi.n	8001ee4 <UI_Control+0x484>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7b1b      	ldrb	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <UI_Control+0x472>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6858      	ldr	r0, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f004 fe36 	bl	8006b3c <HAL_GPIO_WritePin>
 8001ed0:	e008      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6858      	ldr	r0, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f004 fe2c 	bl	8006b3c <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2bc7      	cmp	r3, #199	; 0xc7
 8001eea:	d90d      	bls.n	8001f08 <UI_Control+0x4a8>
			{
				led->Led_Cnt = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
			}			
			
			break;
 8001ef2:	e009      	b.n	8001f08 <UI_Control+0x4a8>
		default:
			break;
 8001ef4:	bf00      	nop
 8001ef6:	e008      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001ef8:	bf00      	nop
 8001efa:	e006      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001efc:	bf00      	nop
 8001efe:	e004      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001f00:	bf00      	nop
 8001f02:	e002      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001f04:	bf00      	nop
 8001f06:	e000      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001f08:	bf00      	nop
	}
	
	if(led->Led_Cnt < 0xFFFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d005      	beq.n	8001f22 <UI_Control+0x4c2>
	{
		led->Led_Cnt++;		
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	801a      	strh	r2, [r3, #0]
	}	
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop

08001f2c <VAR_Init>:

int16_t mDummyVar = 0x8000;


void VAR_Init(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	e013      	b.n	8001f60 <VAR_Init+0x34>
	{
		Vars[i].valid = 0;
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <VAR_Init+0x48>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Vars[i].local = 0;
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <VAR_Init+0x48>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
		Vars[i].value = 0;
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <VAR_Init+0x48>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	2200      	movs	r2, #0
 8001f58:	805a      	strh	r2, [r3, #2]
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2bfe      	cmp	r3, #254	; 0xfe
 8001f64:	dde8      	ble.n	8001f38 <VAR_Init+0xc>
	}
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	200005f4 	.word	0x200005f4

08001f78 <VAR_GetVariable>:

int16_t VAR_GetVariable(uint16_t varId, uint16_t* invalid)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	80fb      	strh	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2bfe      	cmp	r3, #254	; 0xfe
 8001f88:	d816      	bhi.n	8001fb8 <VAR_GetVariable+0x40>
	{
		if(Vars[varId].valid == 0)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <VAR_GetVariable+0x64>)
 8001f8e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <VAR_GetVariable+0x32>
		{
			if (invalid != NULL) *invalid |= INVALID_FLAG;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <VAR_GetVariable+0x32>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
		}
		return Vars[varId].value;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <VAR_GetVariable+0x64>)
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fb6:	e00a      	b.n	8001fce <VAR_GetVariable+0x56>
	}
	else
	{
		if (invalid != NULL) *invalid |= INVALID_FLAG;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <VAR_GetVariable+0x54>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	801a      	strh	r2, [r3, #0]
		return 0;
 8001fcc:	2300      	movs	r3, #0
	}
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200005f4 	.word	0x200005f4

08001fe0 <VAR_SetVariable>:
		return &(Vars[varId].value);
	}
}

void VAR_SetVariable(uint8_t varId, int16_t value, uint8_t valid)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	460b      	mov	r3, r1
 8001fec:	80bb      	strh	r3, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71bb      	strb	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2bff      	cmp	r3, #255	; 0xff
 8001ff6:	d00a      	beq.n	800200e <VAR_SetVariable+0x2e>
	{
		Vars[varId].valid = valid;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <VAR_SetVariable+0x3c>)
 8001ffc:	79ba      	ldrb	r2, [r7, #6]
 8001ffe:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		Vars[varId].value = value;
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <VAR_SetVariable+0x3c>)
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	805a      	strh	r2, [r3, #2]
	}
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200005f4 	.word	0x200005f4

08002020 <CB_Create>:
 // s_CanTxMsg Msg;

	

CB_handle CB_Create(uint8_t elementsize, uint16_t length)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	80bb      	strh	r3, [r7, #4]
	CB_handle cb = malloc(sizeof(s_CB)); 
 8002030:	2010      	movs	r0, #16
 8002032:	f007 faaf 	bl	8009594 <malloc>
 8002036:	4603      	mov	r3, r0
 8002038:	60fb      	str	r3, [r7, #12]
	cb->buff = malloc (length * elementsize);  // TBD : check pointer
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f007 faa6 	bl	8009594 <malloc>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
	cb->length = length;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	88ba      	ldrh	r2, [r7, #4]
 8002054:	80da      	strh	r2, [r3, #6]
	cb->head = 0;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	811a      	strh	r2, [r3, #8]
	cb->tail = 0;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	815a      	strh	r2, [r3, #10]
	cb->full = 0;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	731a      	strb	r2, [r3, #12]
	cb->sizeOfElement = elementsize;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	711a      	strb	r2, [r3, #4]
	
	
	return cb;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <CB_IsEmpty>:
	return noi;
	
}

uint8_t CB_IsEmpty(CB_handle cb)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <CB_IsEmpty+0x2c>
	{
		return (!cb->full && (cb->head == cb->tail));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7b1b      	ldrb	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <CB_IsEmpty+0x26>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	891a      	ldrh	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	895b      	ldrh	r3, [r3, #10]
 8002096:	429a      	cmp	r2, r3
 8002098:	d101      	bne.n	800209e <CB_IsEmpty+0x26>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <CB_IsEmpty+0x28>
 800209e:	2300      	movs	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e000      	b.n	80020a6 <CB_IsEmpty+0x2e>
	}
	return 1; 
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <CB_Probe>:

// Gets the item from the buffer, but do not remove it from the buffer
// To remove the intem, call CB_Probe() + CB_Remove(), or use CB_Get() to get and remove in one step 

uint8_t CB_Probe(CB_handle cb, uint8_t * item)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01f      	beq.n	8002102 <CB_Probe+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
	{

		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffd6 	bl	8002078 <CB_IsEmpty>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d113      	bne.n	80020fa <CB_Probe+0x48>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	8952      	ldrh	r2, [r2, #10]
 80020da:	4611      	mov	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	7912      	ldrb	r2, [r2, #4]
 80020e0:	fb01 f202 	mul.w	r2, r1, r2
 80020e4:	1899      	adds	r1, r3, r2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	f007 fa61 	bl	80095b4 <memcpy>
  __ASM volatile ("cpsie i" : : : "memory");
 80020f2:	b662      	cpsie	i
}
 80020f4:	bf00      	nop
				//cb->tail = (cb->tail + 1) % cb->length;
				//cb->full = 0;
				__enable_irq();
				return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e004      	b.n	8002104 <CB_Probe+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 80020fa:	b662      	cpsie	i
}
 80020fc:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <CB_Probe+0x52>
			}
		}

	// TBD assert
	return 1;
 8002102:	2301      	movs	r3, #1

}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <CB_Remove>:


// Removes the item from the buffer, use together with CB_Probe()
uint8_t CB_Remove(CB_handle cb)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01f      	beq.n	800215a <CB_Remove+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 800211a:	b672      	cpsid	i
}
 800211c:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffaa 	bl	8002078 <CB_IsEmpty>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d113      	bne.n	8002152 <CB_Remove+0x46>
			{
				cb->tail = (cb->tail + 1) % cb->length;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	895b      	ldrh	r3, [r3, #10]
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	88d2      	ldrh	r2, [r2, #6]
 8002134:	fb93 f1f2 	sdiv	r1, r3, r2
 8002138:	fb01 f202 	mul.w	r2, r1, r2
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800214a:	b662      	cpsie	i
}
 800214c:	bf00      	nop
				__enable_irq();
				return 0;
 800214e:	2300      	movs	r3, #0
 8002150:	e004      	b.n	800215c <CB_Remove+0x50>
  __ASM volatile ("cpsie i" : : : "memory");
 8002152:	b662      	cpsie	i
}
 8002154:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <CB_Remove+0x50>
			}
		}

	// TBD assert
	return 1;
 800215a:	2301      	movs	r3, #1

}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <CB_Get>:


uint8_t CB_Get(CB_handle cb, uint8_t * item)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02f      	beq.n	80021d4 <CB_Get+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
}
 8002176:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff7d 	bl	8002078 <CB_IsEmpty>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d123      	bne.n	80021cc <CB_Get+0x68>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	8952      	ldrh	r2, [r2, #10]
 800218c:	4611      	mov	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	7912      	ldrb	r2, [r2, #4]
 8002192:	fb01 f202 	mul.w	r2, r1, r2
 8002196:	1899      	adds	r1, r3, r2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	461a      	mov	r2, r3
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f007 fa08 	bl	80095b4 <memcpy>
				cb->tail = (cb->tail + 1) % cb->length;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	895b      	ldrh	r3, [r3, #10]
 80021a8:	3301      	adds	r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	88d2      	ldrh	r2, [r2, #6]
 80021ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80021b2:	fb01 f202 	mul.w	r2, r1, r2
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c4:	b662      	cpsie	i
}
 80021c6:	bf00      	nop
				__enable_irq();
				return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e004      	b.n	80021d6 <CB_Get+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 80021cc:	b662      	cpsie	i
}
 80021ce:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <CB_Get+0x72>
			}
		}

	// TBD assert
	return 1;
 80021d4:	2301      	movs	r3, #1

}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <CB_Put>:


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	
	if (cb != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d03b      	beq.n	8002266 <CB_Put+0x88>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	8912      	ldrh	r2, [r2, #8]
 80021f6:	4611      	mov	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	7912      	ldrb	r2, [r2, #4]
 80021fc:	fb01 f202 	mul.w	r2, r1, r2
 8002200:	1898      	adds	r0, r3, r2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	f007 f9d3 	bl	80095b4 <memcpy>
		if(cb->full)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7b1b      	ldrb	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <CB_Put+0x52>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	895b      	ldrh	r3, [r3, #10]
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	88d2      	ldrh	r2, [r2, #6]
 8002220:	fb93 f1f2 	sdiv	r1, r3, r2
 8002224:	fb01 f202 	mul.w	r2, r1, r2
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	b29a      	uxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	815a      	strh	r2, [r3, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	891b      	ldrh	r3, [r3, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	88d2      	ldrh	r2, [r2, #6]
 800223a:	fb93 f1f2 	sdiv	r1, r3, r2
 800223e:	fb01 f202 	mul.w	r2, r1, r2
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	811a      	strh	r2, [r3, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	891a      	ldrh	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	895b      	ldrh	r3, [r3, #10]
 8002252:	429a      	cmp	r2, r3
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	731a      	strb	r2, [r3, #12]

		return 0;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <CB_Put+0x8a>
	}
	else
	{
		return 1;
 8002266:	2301      	movs	r3, #1
	}
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <WDG_Init>:
#include "main.h"
#include "watchdog.h"


void WDG_Init(uint32_t period_ms)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	__HAL_DBGMCU_FREEZE_IWDG();  // stop the watchdog in debug mode
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <WDG_Init+0x44>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <WDG_Init+0x44>)
 800227e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002282:	6093      	str	r3, [r2, #8]
	if (period_ms > 32000)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800228a:	d902      	bls.n	8002292 <WDG_Init+0x22>
	{
		period_ms = 32000;
 800228c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002290:	607b      	str	r3, [r7, #4]
	}
	hiwdg.Instance = IWDG;
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <WDG_Init+0x48>)
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <WDG_Init+0x4c>)
 8002296:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <WDG_Init+0x48>)
 800229a:	2206      	movs	r2, #6
 800229c:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = period_ms/8;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <WDG_Init+0x48>)
 80022a4:	6093      	str	r3, [r2, #8]
	HAL_IWDG_Init(&hiwdg);
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <WDG_Init+0x48>)
 80022a8:	f004 fc92 	bl	8006bd0 <HAL_IWDG_Init>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	e0042000 	.word	0xe0042000
 80022b8:	20000c10 	.word	0x20000c10
 80022bc:	40003000 	.word	0x40003000

080022c0 <WDG_Refresh>:

void WDG_Refresh()
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <WDG_Refresh+0x10>)
 80022c6:	f004 fcd2 	bl	8006c6e <HAL_IWDG_Refresh>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000c10 	.word	0x20000c10

080022d4 <APP_Init>:
static void ProcessMessage(s_CanRxMsg* msg);


// public methods
void APP_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af00      	add	r7, sp, #0

	sUIHwInit uihw;

	Scheduler_Init();
 80022da:	f000 ff9d 	bl	8003218 <Scheduler_Init>

	VAR_Init();
 80022de:	f7ff fe25 	bl	8001f2c <VAR_Init>
	MCAN_Init(&hcan1, THIS_NODE);
 80022e2:	2106      	movs	r1, #6
 80022e4:	4818      	ldr	r0, [pc, #96]	; (8002348 <APP_Init+0x74>)
 80022e6:	f7ff f807 	bl	80012f8 <MCAN_Init>
    COM_Init(THIS_NODE);
 80022ea:	2006      	movs	r0, #6
 80022ec:	f7fe fd74 	bl	8000dd8 <COM_Init>
  	WDG_Init(3000);
 80022f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80022f4:	f7ff ffbc 	bl	8002270 <WDG_Init>
  	ELM_Init(NUM_OF_ELEMTERS);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe fe43 	bl	8000f84 <ELM_Init>
  	ADC_Init(&hadc1, &hdma_adc1, 1);
 80022fe:	2201      	movs	r2, #1
 8002300:	4912      	ldr	r1, [pc, #72]	; (800234c <APP_Init+0x78>)
 8002302:	4813      	ldr	r0, [pc, #76]	; (8002350 <APP_Init+0x7c>)
 8002304:	f7fe fcf4 	bl	8000cf0 <ADC_Init>



	/*Assign pins for onboard UI  */
	uihw.Led_Life.Pin = LED_Life_Pin;
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	60bb      	str	r3, [r7, #8]
	uihw.Led_Life.Port = LED_Life_GPIO_Port;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <APP_Init+0x80>)
 8002310:	607b      	str	r3, [r7, #4]
	uihw.Led_Life.Logic = eUIL_POSITIVE;
 8002312:	2301      	movs	r3, #1
 8002314:	733b      	strb	r3, [r7, #12]

	uihw.Led_R.Pin = LED_Error_Pin;
 8002316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231a:	617b      	str	r3, [r7, #20]
	uihw.Led_R.Port = LED_Error_GPIO_Port;
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <APP_Init+0x80>)
 800231e:	613b      	str	r3, [r7, #16]
	uihw.Led_R.Logic = eUIL_NEGATIVE;
 8002320:	2300      	movs	r3, #0
 8002322:	763b      	strb	r3, [r7, #24]
	uihw.Buzzer.Pin = LED_Error_Pin;
	uihw.Buzzer.Port = LED_Error_GPIO_Port;
	uihw.Buzzer.Logic = eUIL_NEGATIVE;*/


	UI_Init(&uihw);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb16 	bl	8001958 <UI_Init>
	UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 800232c:	2002      	movs	r0, #2
 800232e:	f7ff fb7f 	bl	8001a30 <UI_LED_Life_SetMode>
	/* Configure CAN streamed variables */


	/*configure elmeters*/

	ELM_AddMeter(ELM_EVSE, ELM1_Pin, VAR_CONS_EVSE_WH);
 8002332:	2282      	movs	r2, #130	; 0x82
 8002334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fe45 	bl	8000fc8 <ELM_AddMeter>

}
 800233e:	bf00      	nop
 8002340:	3740      	adds	r7, #64	; 0x40
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000be8 	.word	0x20000be8
 800234c:	20000ba0 	.word	0x20000ba0
 8002350:	20000b3c 	.word	0x20000b3c
 8002354:	48000400 	.word	0x48000400

08002358 <APP_Start>:

void APP_Start(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0

	UI_LED_R_SetMode(eUI_OFF);
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fb4e 	bl	8001a00 <UI_LED_R_SetMode>

	MCAN_Start();
 8002364:	f7ff f86c 	bl	8001440 <MCAN_Start>

	LCD_Init();
 8002368:	f000 fae1 	bl	800292e <LCD_Init>
	LCD_Show_String("  UHA-EVSE 1.0  ", 0);
 800236c:	2100      	movs	r1, #0
 800236e:	480c      	ldr	r0, [pc, #48]	; (80023a0 <APP_Start+0x48>)
 8002370:	f000 fc70 	bl	8002c54 <LCD_Insert_New_Text>
	LCD_Show_String("****************", 1);
 8002374:	2101      	movs	r1, #1
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <APP_Start+0x4c>)
 8002378:	f000 fc6c 	bl	8002c54 <LCD_Insert_New_Text>

	EVSE_Init();
 800237c:	f000 f944 	bl	8002608 <EVSE_Init>

	while (1)   // endless loop
	{
		Scheduler_Check_Flag();
 8002380:	f000 ffc4 	bl	800330c <Scheduler_Check_Flag>

		// Process received COM messages

		s_CanRxMsg rmsg;
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002384:	e003      	b.n	800238e <APP_Start+0x36>
		{
				ProcessMessage(&rmsg);
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f8c1 	bl	8002510 <ProcessMessage>
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fd31 	bl	8000df8 <COM_GetRxMessage>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d0f4      	beq.n	8002386 <APP_Start+0x2e>
	{
 800239c:	e7f0      	b.n	8002380 <APP_Start+0x28>
 800239e:	bf00      	nop
 80023a0:	0800b9bc 	.word	0x0800b9bc
 80023a4:	0800b9d0 	.word	0x0800b9d0

080023a8 <APP_Update_1s>:
	}

}

void APP_Update_1s(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
	// check midnight
	char row[16];
	static uint8_t dayNumber = 0;
	uint8_t newDayNumber = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	77fb      	strb	r3, [r7, #31]
	newDayNumber = RTC_GetTime().Day;
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fa26 	bl	8001808 <RTC_GetTime>
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	77fb      	strb	r3, [r7, #31]
	if (dayNumber != newDayNumber)
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <APP_Update_1s+0x140>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	7ffa      	ldrb	r2, [r7, #31]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d002      	beq.n	80023d0 <APP_Update_1s+0x28>
	{
		dayNumber = newDayNumber;
 80023ca:	4a47      	ldr	r2, [pc, #284]	; (80024e8 <APP_Update_1s+0x140>)
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	7013      	strb	r3, [r2, #0]
		// TBD
	}



	switch(EVSE_GetStatus())
 80023d0:	f000 fa1a 	bl	8002808 <EVSE_GetStatus>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	f200 8082 	bhi.w	80024e0 <APP_Update_1s+0x138>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <APP_Update_1s+0x3c>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023fd 	.word	0x080023fd
 80023e8:	0800240f 	.word	0x0800240f
 80023ec:	08002435 	.word	0x08002435
 80023f0:	0800245b 	.word	0x0800245b
 80023f4:	08002495 	.word	0x08002495
 80023f8:	080024bb 	.word	0x080024bb
	{
	case evsInit:
		LCD_Show_String("  UHA-EVSE 1.0  ", 0);
 80023fc:	2100      	movs	r1, #0
 80023fe:	483b      	ldr	r0, [pc, #236]	; (80024ec <APP_Update_1s+0x144>)
 8002400:	f000 fc28 	bl	8002c54 <LCD_Insert_New_Text>
		LCD_Show_String("****************", 1);
 8002404:	2101      	movs	r1, #1
 8002406:	483a      	ldr	r0, [pc, #232]	; (80024f0 <APP_Update_1s+0x148>)
 8002408:	f000 fc24 	bl	8002c54 <LCD_Insert_New_Text>
		break;
 800240c:	e068      	b.n	80024e0 <APP_Update_1s+0x138>
	case evsNoCarDetected:
		LCD_Show_String("No Vehicle	     ", 0);
 800240e:	2100      	movs	r1, #0
 8002410:	4838      	ldr	r0, [pc, #224]	; (80024f4 <APP_Update_1s+0x14c>)
 8002412:	f000 fc1f 	bl	8002c54 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 8002416:	f000 fa1d 	bl	8002854 <EVSE_GetCurrentLimit>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	4935      	ldr	r1, [pc, #212]	; (80024f8 <APP_Update_1s+0x150>)
 8002422:	4618      	mov	r0, r3
 8002424:	f007 f9cc 	bl	80097c0 <siprintf>
		LCD_Show_String(row, 1);
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2101      	movs	r1, #1
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fc11 	bl	8002c54 <LCD_Insert_New_Text>
		break;
 8002432:	e055      	b.n	80024e0 <APP_Update_1s+0x138>
	case evsCarFull:
		LCD_Show_String("Vehicle charged ", 0);
 8002434:	2100      	movs	r1, #0
 8002436:	4831      	ldr	r0, [pc, #196]	; (80024fc <APP_Update_1s+0x154>)
 8002438:	f000 fc0c 	bl	8002c54 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 800243c:	f000 fa0a 	bl	8002854 <EVSE_GetCurrentLimit>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	492c      	ldr	r1, [pc, #176]	; (80024f8 <APP_Update_1s+0x150>)
 8002448:	4618      	mov	r0, r3
 800244a:	f007 f9b9 	bl	80097c0 <siprintf>
		LCD_Show_String(row, 1);
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	2101      	movs	r1, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fbfe 	bl	8002c54 <LCD_Insert_New_Text>
		break;
 8002458:	e042      	b.n	80024e0 <APP_Update_1s+0x138>
	case evsCharging:
		sprintf(row,"Charging: %dW",EVSE_GetCurrentLimit());
 800245a:	f000 f9fb 	bl	8002854 <EVSE_GetCurrentLimit>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4926      	ldr	r1, [pc, #152]	; (8002500 <APP_Update_1s+0x158>)
 8002466:	4618      	mov	r0, r3
 8002468:	f007 f9aa 	bl	80097c0 <siprintf>
		LCD_Show_String(row, 0);
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fbef 	bl	8002c54 <LCD_Insert_New_Text>
		sprintf(row,"Consumed: %dWh ",EVSE_GetThisCons());
 8002476:	f000 f9f9 	bl	800286c <EVSE_GetThisCons>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4920      	ldr	r1, [pc, #128]	; (8002504 <APP_Update_1s+0x15c>)
 8002482:	4618      	mov	r0, r3
 8002484:	f007 f99c 	bl	80097c0 <siprintf>
		LCD_Show_String(row, 1);
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fbe1 	bl	8002c54 <LCD_Insert_New_Text>
		break;
 8002492:	e025      	b.n	80024e0 <APP_Update_1s+0x138>
	case evsNoFreePower:
		LCD_Show_String("No free power", 0);
 8002494:	2100      	movs	r1, #0
 8002496:	481c      	ldr	r0, [pc, #112]	; (8002508 <APP_Update_1s+0x160>)
 8002498:	f000 fbdc 	bl	8002c54 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 800249c:	f000 f9da 	bl	8002854 <EVSE_GetCurrentLimit>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	4914      	ldr	r1, [pc, #80]	; (80024f8 <APP_Update_1s+0x150>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f007 f989 	bl	80097c0 <siprintf>
		LCD_Show_String(row, 1);
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fbce 	bl	8002c54 <LCD_Insert_New_Text>
		break;
 80024b8:	e012      	b.n	80024e0 <APP_Update_1s+0x138>
	case evsError:
		LCD_Show_String("EVSE ERROR! ", 0);
 80024ba:	2100      	movs	r1, #0
 80024bc:	4813      	ldr	r0, [pc, #76]	; (800250c <APP_Update_1s+0x164>)
 80024be:	f000 fbc9 	bl	8002c54 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 80024c2:	f000 f9c7 	bl	8002854 <EVSE_GetCurrentLimit>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	490a      	ldr	r1, [pc, #40]	; (80024f8 <APP_Update_1s+0x150>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 f976 	bl	80097c0 <siprintf>
		LCD_Show_String(row, 1);
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fbbb 	bl	8002c54 <LCD_Insert_New_Text>
		break;
 80024de:	bf00      	nop
	}



}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200009f0 	.word	0x200009f0
 80024ec:	0800b9bc 	.word	0x0800b9bc
 80024f0:	0800b9d0 	.word	0x0800b9d0
 80024f4:	0800b9e4 	.word	0x0800b9e4
 80024f8:	0800b9f8 	.word	0x0800b9f8
 80024fc:	0800ba04 	.word	0x0800ba04
 8002500:	0800ba18 	.word	0x0800ba18
 8002504:	0800ba28 	.word	0x0800ba28
 8002508:	0800ba38 	.word	0x0800ba38
 800250c:	0800ba48 	.word	0x0800ba48

08002510 <ProcessMessage>:


/*Private methods*/

static void ProcessMessage(s_CanRxMsg* msg)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	uint16_t cmd = msg->header.StdId & 0xFF0;  // maskout nodeid
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002522:	82fb      	strh	r3, [r7, #22]
//	uint8_t producer = msg->header.StdId & 0x00F;  // maskout cmd
	int16_t par1,par2,par3; //,par4;
	uint32_t unixtime = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
	par1 = (msg->data[0] << 8) | msg->data[1];
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7f1b      	ldrb	r3, [r3, #28]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b21a      	sxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7f5b      	ldrb	r3, [r3, #29]
 8002534:	b21b      	sxth	r3, r3
 8002536:	4313      	orrs	r3, r2
 8002538:	81fb      	strh	r3, [r7, #14]
	par2 = (msg->data[2] << 8) | msg->data[3];
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7f9b      	ldrb	r3, [r3, #30]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	b21a      	sxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7fdb      	ldrb	r3, [r3, #31]
 8002546:	b21b      	sxth	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	81bb      	strh	r3, [r7, #12]
	par3 = (msg->data[4] << 8) | msg->data[5];
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	b21a      	sxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	817b      	strh	r3, [r7, #10]
	// par4 = (msg->data[6] << 8) | msg->data[7];

	switch (cmd)
 8002562:	8afb      	ldrh	r3, [r7, #22]
 8002564:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 8002568:	d019      	beq.n	800259e <ProcessMessage+0x8e>
 800256a:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 800256e:	dc39      	bgt.n	80025e4 <ProcessMessage+0xd4>
 8002570:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8002574:	d032      	beq.n	80025dc <ProcessMessage+0xcc>
 8002576:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800257a:	dc33      	bgt.n	80025e4 <ProcessMessage+0xd4>
 800257c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002580:	d02e      	beq.n	80025e0 <ProcessMessage+0xd0>
 8002582:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002586:	d000      	beq.n	800258a <ProcessMessage+0x7a>
			unixtime |= msg->data[2] << 8;
			unixtime |= msg->data[3];
			RTC_SetUnixTime(unixtime);
			break;
	}
	return;
 8002588:	e02c      	b.n	80025e4 <ProcessMessage+0xd4>
			VAR_SetVariable(par1, par2, par3);  // tbd check valid flag
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	897a      	ldrh	r2, [r7, #10]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd22 	bl	8001fe0 <VAR_SetVariable>
			break;
 800259c:	e021      	b.n	80025e2 <ProcessMessage+0xd2>
			unixtime |= msg->data[0] << 24;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	461a      	mov	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[1] << 16;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7f5b      	ldrb	r3, [r3, #29]
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	461a      	mov	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[2] << 8;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7f9b      	ldrb	r3, [r3, #30]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	461a      	mov	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[3];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7fdb      	ldrb	r3, [r3, #31]
 80025cc:	461a      	mov	r2, r3
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
			RTC_SetUnixTime(unixtime);
 80025d4:	6938      	ldr	r0, [r7, #16]
 80025d6:	f7ff f987 	bl	80018e8 <RTC_SetUnixTime>
			break;
 80025da:	e002      	b.n	80025e2 <ProcessMessage+0xd2>
			break;
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <ProcessMessage+0xd2>
			break;
 80025e0:	bf00      	nop
	return;
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
}
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
	ELM_ExtiCallback(GPIO_Pin);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fe23 	bl	8001244 <ELM_ExtiCallback>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <EVSE_Init>:


static TIM_OC_InitTypeDef sConfigOC;

void EVSE_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	mState = evsInit;
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <EVSE_Init+0x60>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
	mLimitCurrent_A = 10;
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <EVSE_Init+0x64>)
 8002614:	220a      	movs	r2, #10
 8002616:	801a      	strh	r2, [r3, #0]
	mActualCurrent_A = 0;
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <EVSE_Init+0x68>)
 800261a:	2200      	movs	r2, #0
 800261c:	801a      	strh	r2, [r3, #0]

	// prepare structure for configuring OC channels
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <EVSE_Init+0x6c>)
 8002620:	2260      	movs	r2, #96	; 0x60
 8002622:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <EVSE_Init+0x6c>)
 8002626:	2200      	movs	r2, #0
 8002628:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <EVSE_Init+0x6c>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <EVSE_Init+0x6c>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <EVSE_Init+0x6c>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <EVSE_Init+0x6c>)
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <EVSE_Init+0x6c>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]



	ADC_StartConversion();
 8002648:	f7fe fb7e 	bl	8000d48 <ADC_StartConversion>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800264c:	2100      	movs	r1, #0
 800264e:	480a      	ldr	r0, [pc, #40]	; (8002678 <EVSE_Init+0x70>)
 8002650:	f006 f804 	bl	800865c <HAL_TIM_PWM_Start>

	EVSE_SetCurrentLimit(mLimitCurrent_A);  // 10Amp default
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <EVSE_Init+0x64>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f8e1 	bl	8002820 <EVSE_SetCurrentLimit>
	mRelayState = 0;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <EVSE_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200009fa 	.word	0x200009fa
 800266c:	200009f2 	.word	0x200009f2
 8002670:	200009f6 	.word	0x200009f6
 8002674:	200009fc 	.word	0x200009fc
 8002678:	20000c44 	.word	0x20000c44
 800267c:	200009fb 	.word	0x200009fb

08002680 <EVSE_Update_100ms>:

void EVSE_Update_100ms(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
	uint16_t adc_raw;
	double adcpin_mV;
	double pilotVoltage_mV;
	// detect car on control pilot pin

	adc_raw = ADC_GetValue(0);
 8002686:	2000      	movs	r0, #0
 8002688:	f7fe fb76 	bl	8000d78 <ADC_GetValue>
 800268c:	4603      	mov	r3, r0
 800268e:	82fb      	strh	r3, [r7, #22]
	adcpin_mV = (ADC_VREF_MV/4096.0 * adc_raw);  // convert to milivolts
 8002690:	8afb      	ldrh	r3, [r7, #22]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe f880 	bl	8000798 <__aeabi_i2d>
 8002698:	a355      	add	r3, pc, #340	; (adr r3, 80027f0 <EVSE_Update_100ms+0x170>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd fdff 	bl	80002a0 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	pilotVoltage_mV = adcpin_mV * 6.05;  // voltage divider 12k + 56k
 80026aa:	a353      	add	r3, pc, #332	; (adr r3, 80027f8 <EVSE_Update_100ms+0x178>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b4:	f7fd fdf4 	bl	80002a0 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	e9c7 2300 	strd	r2, r3, [r7]
	ADC_StartConversion();
 80026c0:	f7fe fb42 	bl	8000d48 <ADC_StartConversion>

	if(pilotVoltage_mV > EVSE_CPV_NOCAR_MV)
 80026c4:	a34e      	add	r3, pc, #312	; (adr r3, 8002800 <EVSE_Update_100ms+0x180>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ce:	f7fe f94b 	bl	8000968 <__aeabi_dcmpgt>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <EVSE_Update_100ms+0x66>
	{
		mState = evsNoCarDetected;
 80026d8:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <EVSE_Update_100ms+0x158>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
		mRelayState = 0;
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <EVSE_Update_100ms+0x15c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e04c      	b.n	8002780 <EVSE_Update_100ms+0x100>
	}
	else if (pilotVoltage_mV > EVSE_CPV_CAR_DETECT_MV)
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <EVSE_Update_100ms+0x160>)
 80026ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026f0:	f7fe f93a 	bl	8000968 <__aeabi_dcmpgt>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d006      	beq.n	8002708 <EVSE_Update_100ms+0x88>
	{
		mState = evsCarFull;
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <EVSE_Update_100ms+0x158>)
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
		mRelayState = 0;
 8002700:	4b36      	ldr	r3, [pc, #216]	; (80027dc <EVSE_Update_100ms+0x15c>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e03b      	b.n	8002780 <EVSE_Update_100ms+0x100>
	}
	else if (pilotVoltage_mV > EVSE_CPV_CAR_READY_MV)
 8002708:	a331      	add	r3, pc, #196	; (adr r3, 80027d0 <EVSE_Update_100ms+0x150>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002712:	f7fe f929 	bl	8000968 <__aeabi_dcmpgt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <EVSE_Update_100ms+0xbe>
	{
		mState = evsCharging;
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <EVSE_Update_100ms+0x158>)
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
		if (mRelayState == 0)
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <EVSE_Update_100ms+0x15c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d12a      	bne.n	8002780 <EVSE_Update_100ms+0x100>
		{
			mRelayState = 1;
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <EVSE_Update_100ms+0x15c>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
			mThisCharge_Wh = 0;
 8002730:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <EVSE_Update_100ms+0x164>)
 8002732:	2200      	movs	r2, #0
 8002734:	801a      	strh	r2, [r3, #0]
			ELM_ResetConsumption(ELM_EVSE);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fd66 	bl	8001208 <ELM_ResetConsumption>
 800273c:	e020      	b.n	8002780 <EVSE_Update_100ms+0x100>
		}

	}
	else if (pilotVoltage_mV > EVSE_CPV_CAR_VENT_MV)
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <EVSE_Update_100ms+0x168>)
 8002744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002748:	f7fe f90e 	bl	8000968 <__aeabi_dcmpgt>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <EVSE_Update_100ms+0xf4>
	{
		mState = evsCharging;
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <EVSE_Update_100ms+0x158>)
 8002754:	2203      	movs	r2, #3
 8002756:	701a      	strb	r2, [r3, #0]
		if (mRelayState == 0)
 8002758:	4b20      	ldr	r3, [pc, #128]	; (80027dc <EVSE_Update_100ms+0x15c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10f      	bne.n	8002780 <EVSE_Update_100ms+0x100>
		{
			mRelayState = 1;
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <EVSE_Update_100ms+0x15c>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
			mThisCharge_Wh = 0;
 8002766:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <EVSE_Update_100ms+0x164>)
 8002768:	2200      	movs	r2, #0
 800276a:	801a      	strh	r2, [r3, #0]
			ELM_ResetConsumption(ELM_EVSE);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe fd4b 	bl	8001208 <ELM_ResetConsumption>
 8002772:	e005      	b.n	8002780 <EVSE_Update_100ms+0x100>
		}
	}
	else
	{
		mState = evsError;
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <EVSE_Update_100ms+0x158>)
 8002776:	2205      	movs	r2, #5
 8002778:	701a      	strb	r2, [r3, #0]
		mRelayState = 0;
 800277a:	4b18      	ldr	r3, [pc, #96]	; (80027dc <EVSE_Update_100ms+0x15c>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
	}

	// control relay

	if (mRelayState)
 8002780:	4b16      	ldr	r3, [pc, #88]	; (80027dc <EVSE_Update_100ms+0x15c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <EVSE_Update_100ms+0x118>
	{
		HAL_GPIO_WritePin(AC_RELAY_GPIO_Port, AC_RELAY_Pin, GPIO_PIN_SET);
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002792:	f004 f9d3 	bl	8006b3c <HAL_GPIO_WritePin>
 8002796:	e006      	b.n	80027a6 <EVSE_Update_100ms+0x126>
	}
	else
	{
		HAL_GPIO_WritePin(AC_RELAY_GPIO_Port, AC_RELAY_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800279e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a2:	f004 f9cb 	bl	8006b3c <HAL_GPIO_WritePin>
	}

	// control the PWM output

	// measure actual charging current using standard elmeter
	mThisCharge_Wh = ELM_GetConsumptionWh(ELM_EVSE);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fcee 	bl	8001188 <ELM_GetConsumptionWh>
 80027ac:	4603      	mov	r3, r0
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <EVSE_Update_100ms+0x164>)
 80027b2:	801a      	strh	r2, [r3, #0]
	mActualPower_W = ELM_GetPowerW(ELM_EVSE);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe fd07 	bl	80011c8 <ELM_GetPowerW>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <EVSE_Update_100ms+0x16c>)
 80027c0:	801a      	strh	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40b38800 	.word	0x40b38800
 80027d8:	200009fa 	.word	0x200009fa
 80027dc:	200009fb 	.word	0x200009fb
 80027e0:	40bf4000 	.word	0x40bf4000
 80027e4:	200009f4 	.word	0x200009f4
 80027e8:	409f4000 	.word	0x409f4000
 80027ec:	200009f8 	.word	0x200009f8
 80027f0:	00000000 	.word	0x00000000
 80027f4:	3fe9e200 	.word	0x3fe9e200
 80027f8:	33333333 	.word	0x33333333
 80027fc:	40183333 	.word	0x40183333
 8002800:	00000000 	.word	0x00000000
 8002804:	40c38800 	.word	0x40c38800

08002808 <EVSE_GetStatus>:
{
	return mActualCurrent_A;
}

eEvseState EVSE_GetStatus(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
	return mState;
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <EVSE_GetStatus+0x14>)
 800280e:	781b      	ldrb	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	200009fa 	.word	0x200009fa

08002820 <EVSE_SetCurrentLimit>:

void EVSE_SetCurrentLimit(uint16_t chargingCurrent)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	80fb      	strh	r3, [r7, #6]
	if (chargingCurrent <= EVSE_MAX_CURRENT)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	2b10      	cmp	r3, #16
 800282e:	d803      	bhi.n	8002838 <EVSE_SetCurrentLimit+0x18>
	{
		mLimitCurrent_A = chargingCurrent;
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <EVSE_SetCurrentLimit+0x30>)
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	8013      	strh	r3, [r2, #0]
 8002836:	e002      	b.n	800283e <EVSE_SetCurrentLimit+0x1e>
	}
	else
	{
		mLimitCurrent_A = EVSE_MAX_CURRENT;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <EVSE_SetCurrentLimit+0x30>)
 800283a:	2210      	movs	r2, #16
 800283c:	801a      	strh	r2, [r3, #0]
	}

	SetCurrent(mLimitCurrent_A);
 800283e:	4b04      	ldr	r3, [pc, #16]	; (8002850 <EVSE_SetCurrentLimit+0x30>)
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f81e 	bl	8002884 <SetCurrent>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200009f2 	.word	0x200009f2

08002854 <EVSE_GetCurrentLimit>:
{
	return mActualPower_W;
}

uint16_t EVSE_GetCurrentLimit(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	return mLimitCurrent_A;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <EVSE_GetCurrentLimit+0x14>)
 800285a:	881b      	ldrh	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	200009f2 	.word	0x200009f2

0800286c <EVSE_GetThisCons>:

uint16_t EVSE_GetThisCons(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
	return mThisCharge_Wh;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <EVSE_GetThisCons+0x14>)
 8002872:	881b      	ldrh	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	200009f4 	.word	0x200009f4

08002884 <SetCurrent>:


static void SetCurrent(uint16_t amps)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
	// safety range check
	if (amps < 6)
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d801      	bhi.n	8002898 <SetCurrent+0x14>
	{
		amps = 6;
 8002894:	2306      	movs	r3, #6
 8002896:	80fb      	strh	r3, [r7, #6]
	}
	if (amps > EVSE_MAX_CURRENT)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b10      	cmp	r3, #16
 800289c:	d901      	bls.n	80028a2 <SetCurrent+0x1e>
	{
		amps = EVSE_MAX_CURRENT;
 800289e:	2310      	movs	r3, #16
 80028a0:	80fb      	strh	r3, [r7, #6]
	}
	// calculate pulse lengt in us
	uint16_t pulse = (amps * 100) / 6;
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2264      	movs	r2, #100	; 0x64
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	4a0f      	ldr	r2, [pc, #60]	; (80028e8 <SetCurrent+0x64>)
 80028ac:	fb82 1203 	smull	r1, r2, r2, r3
 80028b0:	17db      	asrs	r3, r3, #31
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	81fb      	strh	r3, [r7, #14]

	sConfigOC.Pulse = pulse;
 80028b6:	89fb      	ldrh	r3, [r7, #14]
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <SetCurrent+0x68>)
 80028ba:	6053      	str	r3, [r2, #4]

	HAL_TIM_PWM_Stop(&htim1, EVSE_PWM_TIM_CHANNEL); // we have to stop here
 80028bc:	2104      	movs	r1, #4
 80028be:	480c      	ldr	r0, [pc, #48]	; (80028f0 <SetCurrent+0x6c>)
 80028c0:	f005 ffaa 	bl	8008818 <HAL_TIM_PWM_Stop>

	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, EVSE_PWM_TIM_CHANNEL) != HAL_OK)  // because this fcn will stop it in register CCER - CCxE
 80028c4:	2204      	movs	r2, #4
 80028c6:	4909      	ldr	r1, [pc, #36]	; (80028ec <SetCurrent+0x68>)
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <SetCurrent+0x6c>)
 80028ca:	f006 f82d 	bl	8008928 <HAL_TIM_PWM_ConfigChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <SetCurrent+0x54>
	{
		Error_Handler();
 80028d4:	f000 fc9a 	bl	800320c <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim1, EVSE_PWM_TIM_CHANNEL);  // and this fcn is then not able to start  (HAL HELL ! )
 80028d8:	2104      	movs	r1, #4
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <SetCurrent+0x6c>)
 80028dc:	f005 febe 	bl	800865c <HAL_TIM_PWM_Start>


}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2aaaaaab 	.word	0x2aaaaaab
 80028ec:	200009fc 	.word	0x200009fc
 80028f0:	20000c44 	.word	0x20000c44

080028f4 <WriteDataToBus>:
void LCD_SendCmd(uint8_t cmd);
void LCD_SendData(uint8_t data);
void LCD_Send_Text(uint8_t *data);

void WriteDataToBus(uint8_t cmd)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
	uint32_t bssr = 0x00000000;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
	bssr |= cmd;  // setting bits
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
	bssr |= (((~cmd)<<16) & 0x00FF0000); // resetting bits
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	43db      	mvns	r3, r3
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

	D0_GPIO_Port->BSRR = bssr;
 800291a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6193      	str	r3, [r2, #24]

}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LCD_Init>:



void LCD_Init (void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002932:	2032      	movs	r0, #50	; 0x32
 8002934:	f001 f902 	bl	8003b3c <HAL_Delay>
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002938:	2038      	movs	r0, #56	; 0x38
 800293a:	f000 f83f 	bl	80029bc <LCD_SendCmd>
	HAL_Delay(10);
 800293e:	200a      	movs	r0, #10
 8002940:	f001 f8fc 	bl	8003b3c <HAL_Delay>
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002944:	2038      	movs	r0, #56	; 0x38
 8002946:	f000 f839 	bl	80029bc <LCD_SendCmd>
	HAL_Delay(200);
 800294a:	20c8      	movs	r0, #200	; 0xc8
 800294c:	f001 f8f6 	bl	8003b3c <HAL_Delay>
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002950:	2038      	movs	r0, #56	; 0x38
 8002952:	f000 f833 	bl	80029bc <LCD_SendCmd>
	
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002956:	2038      	movs	r0, #56	; 0x38
 8002958:	f000 f830 	bl	80029bc <LCD_SendCmd>
		
	//Configurace - LED DISPLAY OFF
	LCD_SendCmd(LED_IC_DISPLAY_ON_OFF | LED_IC_DIS_OFF);	
 800295c:	2008      	movs	r0, #8
 800295e:	f000 f82d 	bl	80029bc <LCD_SendCmd>
	
	//Configurace - LED DISPLAY CLEAR
	LCD_SendCmd(LED_IC_CLEAR_DISPLAY);		
 8002962:	2001      	movs	r0, #1
 8002964:	f000 f82a 	bl	80029bc <LCD_SendCmd>
	
	//Configurace - LED DISPLAY CLEAR
	LCD_SendCmd(LED_IC_CURSOR | LED_IC_CURSOR_INCREMENT_ON | LED_IC_CURSOR_SHIFT_OFF);	
 8002968:	2006      	movs	r0, #6
 800296a:	f000 f827 	bl	80029bc <LCD_SendCmd>
	
	LCD_SendCmd(LED_IC_DISPLAY_ON_OFF | LED_IC_DIS_ON | LED_IC_DIS_CURSOR_OFF);
 800296e:	200c      	movs	r0, #12
 8002970:	f000 f824 	bl	80029bc <LCD_SendCmd>
	
}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}

08002978 <LCD_Set_Position>:

void LCD_Set_Position (uint8_t row, uint8_t column)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	460a      	mov	r2, r1
 8002982:	71fb      	strb	r3, [r7, #7]
 8002984:	4613      	mov	r3, r2
 8002986:	71bb      	strb	r3, [r7, #6]
	if(row == 0x00)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d107      	bne.n	800299e <LCD_Set_Position+0x26>
	{
		LCD_SendCmd(LED_SET_POSSITION | LED_SP_1ROW + column);
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f810 	bl	80029bc <LCD_SendCmd>
	}
	else
	{
		LCD_SendCmd(LED_SET_POSSITION | LED_SP_2ROW + column);
	}
}
 800299c:	e00a      	b.n	80029b4 <LCD_Set_Position+0x3c>
		LCD_SendCmd(LED_SET_POSSITION | LED_SP_2ROW + column);
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	3340      	adds	r3, #64	; 0x40
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	b25b      	sxtb	r3, r3
 80029a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029aa:	b25b      	sxtb	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f804 	bl	80029bc <LCD_SendCmd>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <LCD_SendCmd>:

void LCD_SendCmd(uint8_t cmd)
{		
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
	RS_Disable;		
 80029c6:	2200      	movs	r2, #0
 80029c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029cc:	480f      	ldr	r0, [pc, #60]	; (8002a0c <LCD_SendCmd+0x50>)
 80029ce:	f004 f8b5 	bl	8006b3c <HAL_GPIO_WritePin>
	RW_Disable;	
 80029d2:	2200      	movs	r2, #0
 80029d4:	2102      	movs	r1, #2
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <LCD_SendCmd+0x50>)
 80029d8:	f004 f8b0 	bl	8006b3c <HAL_GPIO_WritePin>
	E_Enable;
 80029dc:	2201      	movs	r2, #1
 80029de:	2104      	movs	r1, #4
 80029e0:	480a      	ldr	r0, [pc, #40]	; (8002a0c <LCD_SendCmd+0x50>)
 80029e2:	f004 f8ab 	bl	8006b3c <HAL_GPIO_WritePin>
	WriteDataToBus(cmd);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff83 	bl	80028f4 <WriteDataToBus>
	//LL_GPIO_WriteOutputPort(D0_GPIO_Port, cmd & 0xFF);
	HAL_Delay(1);	
 80029ee:	2001      	movs	r0, #1
 80029f0:	f001 f8a4 	bl	8003b3c <HAL_Delay>
	E_Disable;	
 80029f4:	2200      	movs	r2, #0
 80029f6:	2104      	movs	r1, #4
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <LCD_SendCmd+0x50>)
 80029fa:	f004 f89f 	bl	8006b3c <HAL_GPIO_WritePin>
	HAL_Delay(1);	
 80029fe:	2001      	movs	r0, #1
 8002a00:	f001 f89c 	bl	8003b3c <HAL_Delay>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	48000400 	.word	0x48000400

08002a10 <LCD_SendData>:

void LCD_SendData(uint8_t data)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
	RS_Enable;	
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a20:	480e      	ldr	r0, [pc, #56]	; (8002a5c <LCD_SendData+0x4c>)
 8002a22:	f004 f88b 	bl	8006b3c <HAL_GPIO_WritePin>
	RW_Disable;
 8002a26:	2200      	movs	r2, #0
 8002a28:	2102      	movs	r1, #2
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <LCD_SendData+0x4c>)
 8002a2c:	f004 f886 	bl	8006b3c <HAL_GPIO_WritePin>
	E_Enable;
 8002a30:	2201      	movs	r2, #1
 8002a32:	2104      	movs	r1, #4
 8002a34:	4809      	ldr	r0, [pc, #36]	; (8002a5c <LCD_SendData+0x4c>)
 8002a36:	f004 f881 	bl	8006b3c <HAL_GPIO_WritePin>
	WriteDataToBus(data);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff59 	bl	80028f4 <WriteDataToBus>
	//LL_GPIO_WriteOutputPort(D0_GPIO_Port, data & 0xFF);
	E_Disable;
 8002a42:	2200      	movs	r2, #0
 8002a44:	2104      	movs	r1, #4
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <LCD_SendData+0x4c>)
 8002a48:	f004 f878 	bl	8006b3c <HAL_GPIO_WritePin>
	HAL_Delay(1);	
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f001 f875 	bl	8003b3c <HAL_Delay>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	48000400 	.word	0x48000400

08002a60 <LCD_Send_Text>:

void LCD_Send_Text(uint8_t *data)
{	
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0;i<0x10;i++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e00a      	b.n	8002a84 <LCD_Send_Text+0x24>
	{	
		LCD_SendData(*data);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ffcc 	bl	8002a10 <LCD_SendData>
		data++;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	607b      	str	r3, [r7, #4]
	for(i=0;i<0x10;i++)
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d9f1      	bls.n	8002a6e <LCD_Send_Text+0xe>
	}
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <LCD_Refresf_Display>:

void LCD_Refresf_Display(void)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
	uint8_t	length;
	int16_t	help_diff = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	80fb      	strh	r3, [r7, #6]
	memset(Led_First_Row,0x20,0x10);
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	4866      	ldr	r0, [pc, #408]	; (8002c3c <LCD_Refresf_Display+0x1a8>)
 8002aa4:	f006 fd94 	bl	80095d0 <memset>
	memset(Led_Second_Row,0x20,0x10);
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	2120      	movs	r1, #32
 8002aac:	4864      	ldr	r0, [pc, #400]	; (8002c40 <LCD_Refresf_Display+0x1ac>)
 8002aae:	f006 fd8f 	bl	80095d0 <memset>
	
	length = strlen((char*)Led_First_Row_Mem);
 8002ab2:	4864      	ldr	r0, [pc, #400]	; (8002c44 <LCD_Refresf_Display+0x1b0>)
 8002ab4:	f7fd fb8c 	bl	80001d0 <strlen>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	717b      	strb	r3, [r7, #5]
	if(length > 0x10)
 8002abc:	797b      	ldrb	r3, [r7, #5]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d949      	bls.n	8002b56 <LCD_Refresf_Display+0xc2>
	{
		if(length > Led_First_Row_MemOffset + 0x10)
 8002ac2:	797a      	ldrb	r2, [r7, #5]
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	3310      	adds	r3, #16
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dd0c      	ble.n	8002ae8 <LCD_Refresf_Display+0x54>
		{			
			memcpy(Led_First_Row, &Led_First_Row_Mem[Led_First_Row_MemOffset], 0x10);
 8002ace:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <LCD_Refresf_Display+0x1b0>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <LCD_Refresf_Display+0x1a8>)
 8002ada:	4614      	mov	r4, r2
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae6:	e02f      	b.n	8002b48 <LCD_Refresf_Display+0xb4>
		}
		else
		{
			help_diff = length - Led_First_Row_MemOffset;			
 8002ae8:	797b      	ldrb	r3, [r7, #5]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	80fb      	strh	r3, [r7, #6]
			if(help_diff >= 0)
 8002af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0a      	blt.n	8002b16 <LCD_Refresf_Display+0x82>
			{
				memcpy(Led_First_Row, &Led_First_Row_Mem[Led_First_Row_MemOffset], help_diff);
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <LCD_Refresf_Display+0x1b0>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	484a      	ldr	r0, [pc, #296]	; (8002c3c <LCD_Refresf_Display+0x1a8>)
 8002b12:	f006 fd4f 	bl	80095b4 <memcpy>
			}
			
			if(help_diff <13)
 8002b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	dc14      	bgt.n	8002b48 <LCD_Refresf_Display+0xb4>
			{
				memcpy(&Led_First_Row[help_diff+4], Led_First_Row_Mem, 0x10 - help_diff - 4);
 8002b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4a45      	ldr	r2, [pc, #276]	; (8002c3c <LCD_Refresf_Display+0x1a8>)
 8002b26:	1898      	adds	r0, r3, r2
 8002b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2c:	f1c3 030c 	rsb	r3, r3, #12
 8002b30:	461a      	mov	r2, r3
 8002b32:	4944      	ldr	r1, [pc, #272]	; (8002c44 <LCD_Refresf_Display+0x1b0>)
 8002b34:	f006 fd3e 	bl	80095b4 <memcpy>
				if(help_diff == -4)
 8002b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3c:	f113 0f04 	cmn.w	r3, #4
 8002b40:	d102      	bne.n	8002b48 <LCD_Refresf_Display+0xb4>
				{
					Led_First_Row_MemOffset = 0;
 8002b42:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
				}
			}
		}		
		Led_First_Row_MemOffset++;
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <LCD_Refresf_Display+0x1b4>)
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e005      	b.n	8002b62 <LCD_Refresf_Display+0xce>
	}
	else
	{
		memcpy(Led_First_Row,Led_First_Row_Mem, length);
 8002b56:	797b      	ldrb	r3, [r7, #5]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	493a      	ldr	r1, [pc, #232]	; (8002c44 <LCD_Refresf_Display+0x1b0>)
 8002b5c:	4837      	ldr	r0, [pc, #220]	; (8002c3c <LCD_Refresf_Display+0x1a8>)
 8002b5e:	f006 fd29 	bl	80095b4 <memcpy>
	}	
	LCD_Set_Position(0,0);
 8002b62:	2100      	movs	r1, #0
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff ff07 	bl	8002978 <LCD_Set_Position>
	LCD_Send_Text(Led_First_Row);
 8002b6a:	4834      	ldr	r0, [pc, #208]	; (8002c3c <LCD_Refresf_Display+0x1a8>)
 8002b6c:	f7ff ff78 	bl	8002a60 <LCD_Send_Text>
	
	length = strlen((char*)Led_Second_Row_Mem);
 8002b70:	4836      	ldr	r0, [pc, #216]	; (8002c4c <LCD_Refresf_Display+0x1b8>)
 8002b72:	f7fd fb2d 	bl	80001d0 <strlen>
 8002b76:	4603      	mov	r3, r0
 8002b78:	717b      	strb	r3, [r7, #5]
	if(strlen((char*)Led_Second_Row_Mem) > 0x10)
 8002b7a:	4834      	ldr	r0, [pc, #208]	; (8002c4c <LCD_Refresf_Display+0x1b8>)
 8002b7c:	f7fd fb28 	bl	80001d0 <strlen>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d949      	bls.n	8002c1a <LCD_Refresf_Display+0x186>
	{
		if(length > Led_Second_Row_MemOffset + 0x10)
 8002b86:	797a      	ldrb	r2, [r7, #5]
 8002b88:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	dd0c      	ble.n	8002bac <LCD_Refresf_Display+0x118>
		{			
			memcpy(Led_Second_Row, &Led_Second_Row_Mem[Led_Second_Row_MemOffset], 0x10);
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <LCD_Refresf_Display+0x1b8>)
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a28      	ldr	r2, [pc, #160]	; (8002c40 <LCD_Refresf_Display+0x1ac>)
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002baa:	e02f      	b.n	8002c0c <LCD_Refresf_Display+0x178>
		}
		else
		{
			help_diff = length - Led_Second_Row_MemOffset;			
 8002bac:	797b      	ldrb	r3, [r7, #5]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	80fb      	strh	r3, [r7, #6]
			if(help_diff >= 0)
 8002bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <LCD_Refresf_Display+0x146>
			{
				memcpy(Led_Second_Row, &Led_Second_Row_Mem[Led_Second_Row_MemOffset], help_diff);
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <LCD_Refresf_Display+0x1b8>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	481a      	ldr	r0, [pc, #104]	; (8002c40 <LCD_Refresf_Display+0x1ac>)
 8002bd6:	f006 fced 	bl	80095b4 <memcpy>
			}
			
			if(help_diff <13)
 8002bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	dc14      	bgt.n	8002c0c <LCD_Refresf_Display+0x178>
			{
				memcpy(&Led_Second_Row[help_diff+4], Led_Second_Row_Mem, 0x10 - help_diff - 4);
 8002be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <LCD_Refresf_Display+0x1ac>)
 8002bea:	1898      	adds	r0, r3, r2
 8002bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf0:	f1c3 030c 	rsb	r3, r3, #12
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4915      	ldr	r1, [pc, #84]	; (8002c4c <LCD_Refresf_Display+0x1b8>)
 8002bf8:	f006 fcdc 	bl	80095b4 <memcpy>
				if(help_diff == -4)
 8002bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c00:	f113 0f04 	cmn.w	r3, #4
 8002c04:	d102      	bne.n	8002c0c <LCD_Refresf_Display+0x178>
				{
					Led_Second_Row_MemOffset = 0;
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
				}
			}
		}		
		Led_Second_Row_MemOffset++;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <LCD_Refresf_Display+0x1bc>)
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e005      	b.n	8002c26 <LCD_Refresf_Display+0x192>
	}
	else
	{
		memcpy(Led_Second_Row,Led_Second_Row_Mem,length);
 8002c1a:	797b      	ldrb	r3, [r7, #5]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	490b      	ldr	r1, [pc, #44]	; (8002c4c <LCD_Refresf_Display+0x1b8>)
 8002c20:	4807      	ldr	r0, [pc, #28]	; (8002c40 <LCD_Refresf_Display+0x1ac>)
 8002c22:	f006 fcc7 	bl	80095b4 <memcpy>
	}	
	LCD_Set_Position(1,0);
 8002c26:	2100      	movs	r1, #0
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f7ff fea5 	bl	8002978 <LCD_Set_Position>
	LCD_Send_Text(Led_Second_Row);
 8002c2e:	4804      	ldr	r0, [pc, #16]	; (8002c40 <LCD_Refresf_Display+0x1ac>)
 8002c30:	f7ff ff16 	bl	8002a60 <LCD_Send_Text>
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	20000b1c 	.word	0x20000b1c
 8002c40:	20000b2c 	.word	0x20000b2c
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000a18 	.word	0x20000a18
 8002c4c:	20000a1c 	.word	0x20000a1c
 8002c50:	20000b1b 	.word	0x20000b1b

08002c54 <LCD_Insert_New_Text>:

void LCD_Insert_New_Text(uint8_t *data, uint8_t row)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
	uint8_t* p_data; 
	uint16_t data_length;
	
	if(row == 0)
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <LCD_Insert_New_Text+0x1e>
	{
		p_data = Led_First_Row_Mem;
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <LCD_Insert_New_Text+0x5c>)
 8002c68:	60fb      	str	r3, [r7, #12]
		Led_First_Row_MemOffset = 0;
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <LCD_Insert_New_Text+0x60>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e004      	b.n	8002c7c <LCD_Insert_New_Text+0x28>
	}
	else
	{
		p_data = Led_Second_Row_Mem;
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <LCD_Insert_New_Text+0x64>)
 8002c74:	60fb      	str	r3, [r7, #12]
		Led_Second_Row_MemOffset = 0;
 8002c76:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <LCD_Insert_New_Text+0x68>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
	}

	data_length = strlen((char*)data);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fd faa7 	bl	80001d0 <strlen>
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
	if(data_length > 0xFF)
 8002c86:	897b      	ldrh	r3, [r7, #10]
 8002c88:	2bff      	cmp	r3, #255	; 0xff
 8002c8a:	d901      	bls.n	8002c90 <LCD_Insert_New_Text+0x3c>
	{
		data_length = 0xFE;
 8002c8c:	23fe      	movs	r3, #254	; 0xfe
 8002c8e:	817b      	strh	r3, [r7, #10]
	}
	memset(p_data, 0x00, 0xFF);	
 8002c90:	22ff      	movs	r2, #255	; 0xff
 8002c92:	2100      	movs	r1, #0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f006 fc9b 	bl	80095d0 <memset>
	memcpy(p_data,data,data_length);
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f006 fc87 	bl	80095b4 <memcpy>
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000a18 	.word	0x20000a18
 8002cb8:	20000a1c 	.word	0x20000a1c
 8002cbc:	20000b1b 	.word	0x20000b1b

08002cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cc4:	f000 fec5 	bl	8003a52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc8:	f000 f813 	bl	8002cf2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ccc:	f000 fa08 	bl	80030e0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002cd0:	f000 f8c8 	bl	8002e64 <MX_CAN1_Init>
  MX_DMA_Init();
 8002cd4:	f000 f9e6 	bl	80030a4 <MX_DMA_Init>
  MX_TIM1_Init();
 8002cd8:	f000 f942 	bl	8002f60 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002cdc:	f000 f85c 	bl	8002d98 <MX_ADC1_Init>
  MX_IWDG_Init();
 8002ce0:	f000 f8f6 	bl	8002ed0 <MX_IWDG_Init>
  MX_RTC_Init();
 8002ce4:	f000 f912 	bl	8002f0c <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  APP_Init();
 8002ce8:	f7ff faf4 	bl	80022d4 <APP_Init>
  APP_Start();
 8002cec:	f7ff fb34 	bl	8002358 <APP_Start>

  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <main+0x30>

08002cf2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b096      	sub	sp, #88	; 0x58
 8002cf6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2244      	movs	r2, #68	; 0x44
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f006 fc65 	bl	80095d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d18:	f003 ffc8 	bl	8006cac <HAL_PWREx_ControlVoltageScaling>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002d22:	f000 fa73 	bl	800320c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d26:	2309      	movs	r3, #9
 8002d28:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d30:	2301      	movs	r3, #1
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d34:	2302      	movs	r3, #2
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002d40:	2319      	movs	r3, #25
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d44:	2307      	movs	r3, #7
 8002d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 ffff 	bl	8006d58 <HAL_RCC_OscConfig>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002d60:	f000 fa54 	bl	800320c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d64:	230f      	movs	r3, #15
 8002d66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d7c:	463b      	mov	r3, r7
 8002d7e:	2103      	movs	r1, #3
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 fc09 	bl	8007598 <HAL_RCC_ClockConfig>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d8c:	f000 fa3e 	bl	800320c <Error_Handler>
  }
}
 8002d90:	bf00      	nop
 8002d92:	3758      	adds	r7, #88	; 0x58
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d9e:	463b      	mov	r3, r7
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
 8002dac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <MX_ADC1_Init+0xc4>)
 8002db2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002db4:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dce:	2204      	movs	r2, #4
 8002dd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e12:	4811      	ldr	r0, [pc, #68]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002e14:	f001 f8de 	bl	8003fd4 <HAL_ADC_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002e1e:	f000 f9f5 	bl	800320c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <MX_ADC1_Init+0xc8>)
 8002e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e26:	2306      	movs	r3, #6
 8002e28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e2e:	237f      	movs	r3, #127	; 0x7f
 8002e30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e32:	2304      	movs	r3, #4
 8002e34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4806      	ldr	r0, [pc, #24]	; (8002e58 <MX_ADC1_Init+0xc0>)
 8002e40:	f001 fcc8 	bl	80047d4 <HAL_ADC_ConfigChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8002e4a:	f000 f9df 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000b3c 	.word	0x20000b3c
 8002e5c:	50040000 	.word	0x50040000
 8002e60:	3ef08000 	.word	0x3ef08000

08002e64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <MX_CAN1_Init+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e70:	2205      	movs	r2, #5
 8002e72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e8a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002e8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002eb4:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <MX_CAN1_Init+0x64>)
 8002eb6:	f002 fb3d 	bl	8005534 <HAL_CAN_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002ec0:	f000 f9a4 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000be8 	.word	0x20000be8
 8002ecc:	40006400 	.word	0x40006400

08002ed0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <MX_IWDG_Init+0x34>)
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <MX_IWDG_Init+0x38>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <MX_IWDG_Init+0x34>)
 8002edc:	2206      	movs	r2, #6
 8002ede:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <MX_IWDG_Init+0x34>)
 8002ee2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002ee6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 375;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <MX_IWDG_Init+0x34>)
 8002eea:	f240 1277 	movw	r2, #375	; 0x177
 8002eee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <MX_IWDG_Init+0x34>)
 8002ef2:	f003 fe6d 	bl	8006bd0 <HAL_IWDG_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8002efc:	f000 f986 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000c10 	.word	0x20000c10
 8002f08:	40003000 	.word	0x40003000

08002f0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <MX_RTC_Init+0x50>)
 8002f14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f1e:	227c      	movs	r2, #124	; 0x7c
 8002f20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1999;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f24:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002f28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_RTC_Init+0x4c>)
 8002f44:	f005 f800 	bl	8007f48 <HAL_RTC_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002f4e:	f000 f95d 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000c20 	.word	0x20000c20
 8002f5c:	40002800 	.word	0x40002800

08002f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b096      	sub	sp, #88	; 0x58
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
 8002f80:	611a      	str	r2, [r3, #16]
 8002f82:	615a      	str	r2, [r3, #20]
 8002f84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	222c      	movs	r2, #44	; 0x2c
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f006 fb1f 	bl	80095d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f92:	4b42      	ldr	r3, [pc, #264]	; (800309c <MX_TIM1_Init+0x13c>)
 8002f94:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <MX_TIM1_Init+0x140>)
 8002f96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8002f98:	4b40      	ldr	r3, [pc, #256]	; (800309c <MX_TIM1_Init+0x13c>)
 8002f9a:	2231      	movs	r2, #49	; 0x31
 8002f9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002faa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fac:	4b3b      	ldr	r3, [pc, #236]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fbe:	4837      	ldr	r0, [pc, #220]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fc0:	f005 faf5 	bl	80085ae <HAL_TIM_PWM_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002fca:	f000 f91f 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8002fce:	2340      	movs	r3, #64	; 0x40
 8002fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8002fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	482e      	ldr	r0, [pc, #184]	; (800309c <MX_TIM1_Init+0x13c>)
 8002fe4:	f006 f8bc 	bl	8009160 <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002fee:	f000 f90d 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff2:	2360      	movs	r3, #96	; 0x60
 8002ff4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8002ff6:	2332      	movs	r3, #50	; 0x32
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ffe:	2300      	movs	r3, #0
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800300c:	2300      	movs	r3, #0
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	4619      	mov	r1, r3
 8003018:	4820      	ldr	r0, [pc, #128]	; (800309c <MX_TIM1_Init+0x13c>)
 800301a:	f005 fc85 	bl	8008928 <HAL_TIM_PWM_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003024:	f000 f8f2 	bl	800320c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003034:	2204      	movs	r2, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4818      	ldr	r0, [pc, #96]	; (800309c <MX_TIM1_Init+0x13c>)
 800303a:	f005 fc75 	bl	8008928 <HAL_TIM_PWM_ConfigChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8003044:	f000 f8e2 	bl	800320c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800305c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003060:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800306a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	4619      	mov	r1, r3
 800307c:	4807      	ldr	r0, [pc, #28]	; (800309c <MX_TIM1_Init+0x13c>)
 800307e:	f006 f8d5 	bl	800922c <HAL_TIMEx_ConfigBreakDeadTime>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003088:	f000 f8c0 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <MX_TIM1_Init+0x13c>)
 800308e:	f000 fb41 	bl	8003714 <HAL_TIM_MspPostInit>

}
 8003092:	bf00      	nop
 8003094:	3758      	adds	r7, #88	; 0x58
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000c44 	.word	0x20000c44
 80030a0:	40012c00 	.word	0x40012c00

080030a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <MX_DMA_Init+0x38>)
 80030ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <MX_DMA_Init+0x38>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6493      	str	r3, [r2, #72]	; 0x48
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <MX_DMA_Init+0x38>)
 80030b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	200b      	movs	r0, #11
 80030c8:	f003 f951 	bl	800636e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80030cc:	200b      	movs	r0, #11
 80030ce:	f003 f96a 	bl	80063a6 <HAL_NVIC_EnableIRQ>

}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000

080030e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <MX_GPIO_Init+0x120>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	4a41      	ldr	r2, [pc, #260]	; (8003200 <MX_GPIO_Init+0x120>)
 80030fc:	f043 0304 	orr.w	r3, r3, #4
 8003100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003102:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <MX_GPIO_Init+0x120>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800310e:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <MX_GPIO_Init+0x120>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	4a3b      	ldr	r2, [pc, #236]	; (8003200 <MX_GPIO_Init+0x120>)
 8003114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <MX_GPIO_Init+0x120>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <MX_GPIO_Init+0x120>)
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	4a35      	ldr	r2, [pc, #212]	; (8003200 <MX_GPIO_Init+0x120>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <MX_GPIO_Init+0x120>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800313e:	4b30      	ldr	r3, [pc, #192]	; (8003200 <MX_GPIO_Init+0x120>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	4a2f      	ldr	r2, [pc, #188]	; (8003200 <MX_GPIO_Init+0x120>)
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <MX_GPIO_Init+0x120>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8003156:	2200      	movs	r2, #0
 8003158:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800315c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003160:	f003 fcec 	bl	8006b3c <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |AC_RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_W_Pin|E_Pin|LED_Life_Pin|LED_Error_Pin
 8003164:	2200      	movs	r2, #0
 8003166:	f24f 0106 	movw	r1, #61446	; 0xf006
 800316a:	4826      	ldr	r0, [pc, #152]	; (8003204 <MX_GPIO_Init+0x124>)
 800316c:	f003 fce6 	bl	8006b3c <HAL_GPIO_WritePin>
                          |RS_Pin|LED_Status_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_ENTER_Pin BTN_UP_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = BTN_ENTER_Pin|BTN_UP_Pin|BTN_DOWN_Pin;
 8003170:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	4820      	ldr	r0, [pc, #128]	; (8003208 <MX_GPIO_Init+0x128>)
 8003186:	f003 fb5f 	bl	8006848 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           AC_RELAY_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800318a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800318e:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |AC_RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003190:	2301      	movs	r3, #1
 8003192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a6:	f003 fb4f 	bl	8006848 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_W_Pin E_Pin LED_Life_Pin LED_Error_Pin
                           RS_Pin LED_Status_Pin */
  GPIO_InitStruct.Pin = R_W_Pin|E_Pin|LED_Life_Pin|LED_Error_Pin
 80031aa:	f24f 0306 	movw	r3, #61446	; 0xf006
 80031ae:	617b      	str	r3, [r7, #20]
                          |RS_Pin|LED_Status_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	4810      	ldr	r0, [pc, #64]	; (8003204 <MX_GPIO_Init+0x124>)
 80031c4:	f003 fb40 	bl	8006848 <HAL_GPIO_Init>

  /*Configure GPIO pin : ELM1_Pin */
  GPIO_InitStruct.Pin = ELM1_Pin;
 80031c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ELM1_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e2:	f003 fb31 	bl	8006848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2104      	movs	r1, #4
 80031ea:	2017      	movs	r0, #23
 80031ec:	f003 f8bf 	bl	800636e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031f0:	2017      	movs	r0, #23
 80031f2:	f003 f8d8 	bl	80063a6 <HAL_NVIC_EnableIRQ>

}
 80031f6:	bf00      	nop
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	48000400 	.word	0x48000400
 8003208:	48000800 	.word	0x48000800

0800320c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003210:	b672      	cpsid	i
}
 8003212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003214:	e7fe      	b.n	8003214 <Error_Handler+0x8>
	...

08003218 <Scheduler_Init>:
**********************************************************************	
	* @brief	Initialisation timimg struct
***********************************************************************
*/
void Scheduler_Init (void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
		Timer_1ms.timer_limit = 1;
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <Scheduler_Init+0x44>)
 800321e:	2201      	movs	r2, #1
 8003220:	809a      	strh	r2, [r3, #4]
		Timer_5ms.timer_limit = 5;
 8003222:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <Scheduler_Init+0x48>)
 8003224:	2205      	movs	r2, #5
 8003226:	809a      	strh	r2, [r3, #4]
		Timer_10ms.timer_limit = 10;
 8003228:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <Scheduler_Init+0x4c>)
 800322a:	220a      	movs	r2, #10
 800322c:	809a      	strh	r2, [r3, #4]
		Timer_50ms.timer_limit = 50;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <Scheduler_Init+0x50>)
 8003230:	2232      	movs	r2, #50	; 0x32
 8003232:	809a      	strh	r2, [r3, #4]
		Timer_100ms.timer_limit = 100;
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <Scheduler_Init+0x54>)
 8003236:	2264      	movs	r2, #100	; 0x64
 8003238:	809a      	strh	r2, [r3, #4]
		Timer_250ms.timer_limit = 250;
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <Scheduler_Init+0x58>)
 800323c:	22fa      	movs	r2, #250	; 0xfa
 800323e:	809a      	strh	r2, [r3, #4]
		Timer_500ms.timer_limit = 500;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <Scheduler_Init+0x5c>)
 8003242:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003246:	809a      	strh	r2, [r3, #4]
		Timer_1s.timer_limit = 1000;
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <Scheduler_Init+0x60>)
 800324a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800324e:	809a      	strh	r2, [r3, #4]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000c90 	.word	0x20000c90
 8003260:	20000c98 	.word	0x20000c98
 8003264:	20000ca0 	.word	0x20000ca0
 8003268:	20000ca8 	.word	0x20000ca8
 800326c:	20000cb0 	.word	0x20000cb0
 8003270:	20000cb8 	.word	0x20000cb8
 8003274:	20000cc0 	.word	0x20000cc0
 8003278:	20000cc8 	.word	0x20000cc8

0800327c <Scheduler_Update_1ms>:
**********************************************************************	
	* @brief	Timer control. Calling of all defined timers
***********************************************************************
*/
void Scheduler_Update_1ms (void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	Timer_Increment(&Timer_1ms);
 8003280:	480c      	ldr	r0, [pc, #48]	; (80032b4 <Scheduler_Update_1ms+0x38>)
 8003282:	f000 f827 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_5ms);
 8003286:	480c      	ldr	r0, [pc, #48]	; (80032b8 <Scheduler_Update_1ms+0x3c>)
 8003288:	f000 f824 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_10ms);
 800328c:	480b      	ldr	r0, [pc, #44]	; (80032bc <Scheduler_Update_1ms+0x40>)
 800328e:	f000 f821 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_50ms);
 8003292:	480b      	ldr	r0, [pc, #44]	; (80032c0 <Scheduler_Update_1ms+0x44>)
 8003294:	f000 f81e 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_100ms);
 8003298:	480a      	ldr	r0, [pc, #40]	; (80032c4 <Scheduler_Update_1ms+0x48>)
 800329a:	f000 f81b 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_250ms);
 800329e:	480a      	ldr	r0, [pc, #40]	; (80032c8 <Scheduler_Update_1ms+0x4c>)
 80032a0:	f000 f818 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_500ms);
 80032a4:	4809      	ldr	r0, [pc, #36]	; (80032cc <Scheduler_Update_1ms+0x50>)
 80032a6:	f000 f815 	bl	80032d4 <Timer_Increment>
	Timer_Increment(&Timer_1s);
 80032aa:	4809      	ldr	r0, [pc, #36]	; (80032d0 <Scheduler_Update_1ms+0x54>)
 80032ac:	f000 f812 	bl	80032d4 <Timer_Increment>
	
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000c90 	.word	0x20000c90
 80032b8:	20000c98 	.word	0x20000c98
 80032bc:	20000ca0 	.word	0x20000ca0
 80032c0:	20000ca8 	.word	0x20000ca8
 80032c4:	20000cb0 	.word	0x20000cb0
 80032c8:	20000cb8 	.word	0x20000cb8
 80032cc:	20000cc0 	.word	0x20000cc0
 80032d0:	20000cc8 	.word	0x20000cc8

080032d4 <Timer_Increment>:
	* @brief	Incrementing of all counters and setting flags , where is condition met!
	* @param	timer: Pointer to specific timer	
***********************************************************************
*/
inline static void Timer_Increment (sTimer *timer)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	timer->timer_cnt++;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	885b      	ldrh	r3, [r3, #2]
 80032e0:	3301      	adds	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	805a      	strh	r2, [r3, #2]
	if(timer->timer_cnt >= timer->timer_limit)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	885a      	ldrh	r2, [r3, #2]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	889b      	ldrh	r3, [r3, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d305      	bcc.n	8003300 <Timer_Increment+0x2c>
	{
		timer->flag = eFLAG_REACHED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
		timer->timer_cnt = 0;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	805a      	strh	r2, [r3, #2]
	}
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <Scheduler_Check_Flag>:
	* @brief Checking flags in structures and call specific tasks	
***********************************************************************
*/

void Scheduler_Check_Flag(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
	if(Timer_1ms.flag)
 8003310:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <Scheduler_Check_Flag+0x98>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <Scheduler_Check_Flag+0x16>
	{
		Timer_Task_1ms();
 8003318:	f000 f854 	bl	80033c4 <Timer_Task_1ms>
		Timer_1ms.flag = eFLAG_NOT_YET;
 800331c:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <Scheduler_Check_Flag+0x98>)
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_5ms.flag)
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <Scheduler_Check_Flag+0x9c>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <Scheduler_Check_Flag+0x28>
	{
		Timer_Task_5ms();
 800332a:	f000 f852 	bl	80033d2 <Timer_Task_5ms>
		Timer_5ms.flag = eFLAG_NOT_YET;
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <Scheduler_Check_Flag+0x9c>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_10ms.flag)
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <Scheduler_Check_Flag+0xa0>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <Scheduler_Check_Flag+0x3a>
	{
		Timer_Task_10ms();
 800333c:	f000 f84f 	bl	80033de <Timer_Task_10ms>
		Timer_10ms.flag = eFLAG_NOT_YET;
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <Scheduler_Check_Flag+0xa0>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_50ms.flag)
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <Scheduler_Check_Flag+0xa4>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d004      	beq.n	8003358 <Scheduler_Check_Flag+0x4c>
	{
		Timer_Task_50ms();
 800334e:	f000 f850 	bl	80033f2 <Timer_Task_50ms>
		Timer_50ms.flag = eFLAG_NOT_YET;
 8003352:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <Scheduler_Check_Flag+0xa4>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_100ms.flag)
 8003358:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <Scheduler_Check_Flag+0xa8>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <Scheduler_Check_Flag+0x5e>
	{
		Timer_Task_100ms();
 8003360:	f000 f84e 	bl	8003400 <Timer_Task_100ms>
		Timer_100ms.flag = eFLAG_NOT_YET;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <Scheduler_Check_Flag+0xa8>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_250ms.flag)
 800336a:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <Scheduler_Check_Flag+0xac>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <Scheduler_Check_Flag+0x70>
	{
		Timer_Task_250ms();
 8003372:	f000 f84b 	bl	800340c <Timer_Task_250ms>
		Timer_250ms.flag = eFLAG_NOT_YET;
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <Scheduler_Check_Flag+0xac>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_500ms.flag)
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <Scheduler_Check_Flag+0xb0>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <Scheduler_Check_Flag+0x82>
	{
		Timer_Task_500ms();
 8003384:	f000 f849 	bl	800341a <Timer_Task_500ms>
		Timer_500ms.flag = eFLAG_NOT_YET;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <Scheduler_Check_Flag+0xb0>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_1s.flag)
 800338e:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <Scheduler_Check_Flag+0xb4>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d004      	beq.n	80033a0 <Scheduler_Check_Flag+0x94>
	{
		Timer_Task_1s();
 8003396:	f000 f846 	bl	8003426 <Timer_Task_1s>
		Timer_1s.flag = eFLAG_NOT_YET;
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <Scheduler_Check_Flag+0xb4>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
	}	
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000c90 	.word	0x20000c90
 80033a8:	20000c98 	.word	0x20000c98
 80033ac:	20000ca0 	.word	0x20000ca0
 80033b0:	20000ca8 	.word	0x20000ca8
 80033b4:	20000cb0 	.word	0x20000cb0
 80033b8:	20000cb8 	.word	0x20000cb8
 80033bc:	20000cc0 	.word	0x20000cc0
 80033c0:	20000cc8 	.word	0x20000cc8

080033c4 <Timer_Task_1ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1ms(void)
{	
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	//DI_Read_All();
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <Timer_Task_5ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_5ms(void)
{	
 80033d2:	b580      	push	{r7, lr}
 80033d4:	af00      	add	r7, sp, #0
	MCAN_Transmit();
 80033d6:	f7fe f8d9 	bl	800158c <MCAN_Transmit>
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}

080033de <Timer_Task_10ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_10ms(void)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	af00      	add	r7, sp, #0
	MCAN_Update_10ms();
 80033e2:	f7fe f847 	bl	8001474 <MCAN_Update_10ms>
	COM_Update_10ms();
 80033e6:	f7fd fd13 	bl	8000e10 <COM_Update_10ms>
	UI_Update_10ms();
 80033ea:	f7fe faf9 	bl	80019e0 <UI_Update_10ms>
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <Timer_Task_50ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_50ms(void)
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0
	//LC_Update_50ms();
}
 80033f6:	bf00      	nop
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <Timer_Task_100ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_100ms(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	EVSE_Update_100ms();
 8003404:	f7ff f93c 	bl	8002680 <EVSE_Update_100ms>
	//ADC_StartConversion();
}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}

0800340c <Timer_Task_250ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_250ms(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <Timer_Task_500ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_500ms(void)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	af00      	add	r7, sp, #0
	LCD_Refresf_Display();
 800341e:	f7ff fb39 	bl	8002a94 <LCD_Refresf_Display>
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}

08003426 <Timer_Task_1s>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1s(void)
{	
 8003426:	b580      	push	{r7, lr}
 8003428:	af00      	add	r7, sp, #0
	WDG_Refresh();
 800342a:	f7fe ff49 	bl	80022c0 <WDG_Refresh>
	APP_Update_1s();
 800342e:	f7fe ffbb 	bl	80023a8 <APP_Update_1s>
	ELM_Update_1s();
 8003432:	f7fd fe1d 	bl	8001070 <ELM_Update_1s>

}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_MspInit+0x44>)
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <HAL_MspInit+0x44>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6613      	str	r3, [r2, #96]	; 0x60
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_MspInit+0x44>)
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <HAL_MspInit+0x44>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	4a08      	ldr	r2, [pc, #32]	; (8003480 <HAL_MspInit+0x44>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003464:	6593      	str	r3, [r2, #88]	; 0x58
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_MspInit+0x44>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000

08003484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0a0      	sub	sp, #128	; 0x80
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	225c      	movs	r2, #92	; 0x5c
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f006 f893 	bl	80095d0 <memset>
  if(hadc->Instance==ADC1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3e      	ldr	r2, [pc, #248]	; (80035a8 <HAL_ADC_MspInit+0x124>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d175      	bne.n	80035a0 <HAL_ADC_MspInit+0x11c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80034ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034be:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80034c0:	2303      	movs	r3, #3
 80034c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 80034c8:	231a      	movs	r3, #26
 80034ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80034cc:	2307      	movs	r3, #7
 80034ce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80034d0:	2302      	movs	r3, #2
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80034d4:	2302      	movs	r3, #2
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80034d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 fa26 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80034ee:	f7ff fe8d 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80034f2:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_ADC_MspInit+0x128>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	4a2d      	ldr	r2, [pc, #180]	; (80035ac <HAL_ADC_MspInit+0x128>)
 80034f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_ADC_MspInit+0x128>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	4b28      	ldr	r3, [pc, #160]	; (80035ac <HAL_ADC_MspInit+0x128>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	4a27      	ldr	r2, [pc, #156]	; (80035ac <HAL_ADC_MspInit+0x128>)
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003516:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_ADC_MspInit+0x128>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = PILOT_ADC_IN_Pin;
 8003522:	2301      	movs	r3, #1
 8003524:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003526:	230b      	movs	r3, #11
 8003528:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(PILOT_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800352e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003532:	4619      	mov	r1, r3
 8003534:	481e      	ldr	r0, [pc, #120]	; (80035b0 <HAL_ADC_MspInit+0x12c>)
 8003536:	f003 f987 	bl	8006848 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 800353c:	4a1e      	ldr	r2, [pc, #120]	; (80035b8 <HAL_ADC_MspInit+0x134>)
 800353e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003540:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003542:	2200      	movs	r2, #0
 8003544:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003546:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003552:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003558:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 800355a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800355e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003566:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003574:	480f      	ldr	r0, [pc, #60]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003576:	f002 ff31 	bl	80063dc <HAL_DMA_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8003580:	f7ff fe44 	bl	800320c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 8003588:	64da      	str	r2, [r3, #76]	; 0x4c
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_ADC_MspInit+0x130>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	2012      	movs	r0, #18
 8003596:	f002 feea 	bl	800636e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800359a:	2012      	movs	r0, #18
 800359c:	f002 ff03 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035a0:	bf00      	nop
 80035a2:	3780      	adds	r7, #128	; 0x80
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	50040000 	.word	0x50040000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	48000400 	.word	0x48000400
 80035b4:	20000ba0 	.word	0x20000ba0
 80035b8:	40020008 	.word	0x40020008

080035bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a24      	ldr	r2, [pc, #144]	; (800366c <HAL_CAN_MspInit+0xb0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d141      	bne.n	8003662 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_CAN_MspInit+0xb4>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4a23      	ldr	r2, [pc, #140]	; (8003670 <HAL_CAN_MspInit+0xb4>)
 80035e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035e8:	6593      	str	r3, [r2, #88]	; 0x58
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_CAN_MspInit+0xb4>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_CAN_MspInit+0xb4>)
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_CAN_MspInit+0xb4>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <HAL_CAN_MspInit+0xb4>)
 8003604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800360e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361c:	2303      	movs	r3, #3
 800361e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003620:	2309      	movs	r3, #9
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4619      	mov	r1, r3
 800362a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362e:	f003 f90b 	bl	8006848 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	2013      	movs	r0, #19
 8003638:	f002 fe99 	bl	800636e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800363c:	2013      	movs	r0, #19
 800363e:	f002 feb2 	bl	80063a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	2100      	movs	r1, #0
 8003646:	2014      	movs	r0, #20
 8003648:	f002 fe91 	bl	800636e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800364c:	2014      	movs	r0, #20
 800364e:	f002 feaa 	bl	80063a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003652:	2200      	movs	r2, #0
 8003654:	2100      	movs	r1, #0
 8003656:	2015      	movs	r0, #21
 8003658:	f002 fe89 	bl	800636e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800365c:	2015      	movs	r0, #21
 800365e:	f002 fea2 	bl	80063a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003662:	bf00      	nop
 8003664:	3728      	adds	r7, #40	; 0x28
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40006400 	.word	0x40006400
 8003670:	40021000 	.word	0x40021000

08003674 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b09a      	sub	sp, #104	; 0x68
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	225c      	movs	r2, #92	; 0x5c
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f005 ffa3 	bl	80095d0 <memset>
  if(hrtc->Instance==RTC)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a0f      	ldr	r2, [pc, #60]	; (80036cc <HAL_RTC_MspInit+0x58>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d117      	bne.n	80036c4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003698:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800369a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800369e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	4618      	mov	r0, r3
 80036a6:	f004 f945 	bl	8007934 <HAL_RCCEx_PeriphCLKConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80036b0:	f7ff fdac 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RTC_MspInit+0x5c>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	4a05      	ldr	r2, [pc, #20]	; (80036d0 <HAL_RTC_MspInit+0x5c>)
 80036bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036c4:	bf00      	nop
 80036c6:	3768      	adds	r7, #104	; 0x68
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40002800 	.word	0x40002800
 80036d0:	40021000 	.word	0x40021000

080036d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_TIM_PWM_MspInit+0x38>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10b      	bne.n	80036fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_TIM_PWM_MspInit+0x3c>)
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_TIM_PWM_MspInit+0x3c>)
 80036ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036f0:	6613      	str	r3, [r2, #96]	; 0x60
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_TIM_PWM_MspInit+0x3c>)
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIM_MspPostInit+0x68>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d11d      	bne.n	8003772 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_TIM_MspPostInit+0x6c>)
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_TIM_MspPostInit+0x6c>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_TIM_MspPostInit+0x6c>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800374e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003752:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003754:	2302      	movs	r3, #2
 8003756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	4619      	mov	r1, r3
 800376a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800376e:	f003 f86b 	bl	8006848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003772:	bf00      	nop
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40021000 	.word	0x40021000

08003784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003788:	e7fe      	b.n	8003788 <NMI_Handler+0x4>

0800378a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800378e:	e7fe      	b.n	800378e <HardFault_Handler+0x4>

08003790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003794:	e7fe      	b.n	8003794 <MemManage_Handler+0x4>

08003796 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379a:	e7fe      	b.n	800379a <BusFault_Handler+0x4>

0800379c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a0:	e7fe      	b.n	80037a0 <UsageFault_Handler+0x4>

080037a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037be:	b480      	push	{r7}
 80037c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037d0:	f000 f994 	bl	8003afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Scheduler_Update_1ms();
 80037d4:	f7ff fd52 	bl	800327c <Scheduler_Update_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}

080037dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <DMA1_Channel1_IRQHandler+0x10>)
 80037e2:	f002 ff51 	bl	8006688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000ba0 	.word	0x20000ba0

080037f0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <ADC1_IRQHandler+0x10>)
 80037f6:	f000 fe1a 	bl	800442e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000b3c 	.word	0x20000b3c

08003804 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <CAN1_TX_IRQHandler+0x10>)
 800380a:	f002 faaf 	bl	8005d6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000be8 	.word	0x20000be8

08003818 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800381c:	4802      	ldr	r0, [pc, #8]	; (8003828 <CAN1_RX0_IRQHandler+0x10>)
 800381e:	f002 faa5 	bl	8005d6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000be8 	.word	0x20000be8

0800382c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003830:	4802      	ldr	r0, [pc, #8]	; (800383c <CAN1_RX1_IRQHandler+0x10>)
 8003832:	f002 fa9b 	bl	8005d6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000be8 	.word	0x20000be8

08003840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ELM1_Pin);
 8003844:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003848:	f003 f9aa 	bl	8006ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	bd80      	pop	{r7, pc}

08003850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	return 1;
 8003854:	2301      	movs	r3, #1
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_kill>:

int _kill(int pid, int sig)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800386a:	f005 fd57 	bl	800931c <__errno>
 800386e:	4603      	mov	r3, r0
 8003870:	2216      	movs	r2, #22
 8003872:	601a      	str	r2, [r3, #0]
	return -1;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <_exit>:

void _exit (int status)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003888:	f04f 31ff 	mov.w	r1, #4294967295
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ffe7 	bl	8003860 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003892:	e7fe      	b.n	8003892 <_exit+0x12>

08003894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e00a      	b.n	80038bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038a6:	f3af 8000 	nop.w
 80038aa:	4601      	mov	r1, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	60ba      	str	r2, [r7, #8]
 80038b2:	b2ca      	uxtb	r2, r1
 80038b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	3301      	adds	r3, #1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	dbf0      	blt.n	80038a6 <_read+0x12>
	}

return len;
 80038c4:	687b      	ldr	r3, [r7, #4]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e009      	b.n	80038f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	60ba      	str	r2, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3301      	adds	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	dbf1      	blt.n	80038e0 <_write+0x12>
	}
	return len;
 80038fc:	687b      	ldr	r3, [r7, #4]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_close>:

int _close(int file)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
	return -1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800392e:	605a      	str	r2, [r3, #4]
	return 0;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <_isatty>:

int _isatty(int file)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
	return 1;
 8003946:	2301      	movs	r3, #1
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
	return 0;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003978:	4a14      	ldr	r2, [pc, #80]	; (80039cc <_sbrk+0x5c>)
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <_sbrk+0x60>)
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <_sbrk+0x64>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <_sbrk+0x64>)
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <_sbrk+0x68>)
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <_sbrk+0x64>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	429a      	cmp	r2, r3
 800399e:	d207      	bcs.n	80039b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a0:	f005 fcbc 	bl	800931c <__errno>
 80039a4:	4603      	mov	r3, r0
 80039a6:	220c      	movs	r2, #12
 80039a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	e009      	b.n	80039c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <_sbrk+0x64>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <_sbrk+0x64>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	4a05      	ldr	r2, [pc, #20]	; (80039d4 <_sbrk+0x64>)
 80039c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20010000 	.word	0x20010000
 80039d0:	00000400 	.word	0x00000400
 80039d4:	20000cd4 	.word	0x20000cd4
 80039d8:	20000d18 	.word	0x20000d18

080039dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <SystemInit+0x20>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e6:	4a05      	ldr	r2, [pc, #20]	; (80039fc <SystemInit+0x20>)
 80039e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a04:	f7ff ffea 	bl	80039dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a0a:	490d      	ldr	r1, [pc, #52]	; (8003a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <LoopForever+0xe>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a10:	e002      	b.n	8003a18 <LoopCopyDataInit>

08003a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a16:	3304      	adds	r3, #4

08003a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a1c:	d3f9      	bcc.n	8003a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a20:	4c0a      	ldr	r4, [pc, #40]	; (8003a4c <LoopForever+0x16>)
  movs r3, #0
 8003a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a24:	e001      	b.n	8003a2a <LoopFillZerobss>

08003a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a28:	3204      	adds	r2, #4

08003a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a2c:	d3fb      	bcc.n	8003a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a2e:	f005 fc7b 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a32:	f7ff f945 	bl	8002cc0 <main>

08003a36 <LoopForever>:

LoopForever:
    b LoopForever
 8003a36:	e7fe      	b.n	8003a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a40:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003a44:	0800bdb4 	.word	0x0800bdb4
  ldr r2, =_sbss
 8003a48:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003a4c:	20000d14 	.word	0x20000d14

08003a50 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a50:	e7fe      	b.n	8003a50 <CAN1_SCE_IRQHandler>

08003a52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a5c:	2003      	movs	r0, #3
 8003a5e:	f002 fc7b 	bl	8006358 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a62:	2000      	movs	r0, #0
 8003a64:	f000 f80e 	bl	8003a84 <HAL_InitTick>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	71fb      	strb	r3, [r7, #7]
 8003a72:	e001      	b.n	8003a78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a74:	f7ff fce2 	bl	800343c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a78:	79fb      	ldrb	r3, [r7, #7]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a90:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <HAL_InitTick+0x6c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d023      	beq.n	8003ae0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a98:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <HAL_InitTick+0x70>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_InitTick+0x6c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f002 fc87 	bl	80063c2 <HAL_SYSTICK_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	d809      	bhi.n	8003ad4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	f002 fc51 	bl	800636e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003acc:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_InitTick+0x74>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e007      	b.n	8003ae4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
 8003ad8:	e004      	b.n	8003ae4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	e001      	b.n	8003ae4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000010c 	.word	0x2000010c
 8003af4:	20000104 	.word	0x20000104
 8003af8:	20000108 	.word	0x20000108

08003afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_IncTick+0x20>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_IncTick+0x24>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_IncTick+0x24>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	2000010c 	.word	0x2000010c
 8003b20:	20000cd8 	.word	0x20000cd8

08003b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return uwTick;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_GetTick+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000cd8 	.word	0x20000cd8

08003b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff ffee 	bl	8003b24 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d005      	beq.n	8003b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_Delay+0x44>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b62:	bf00      	nop
 8003b64:	f7ff ffde 	bl	8003b24 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8f7      	bhi.n	8003b64 <HAL_Delay+0x28>
  {
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2000010c 	.word	0x2000010c

08003b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3360      	adds	r3, #96	; 0x60
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <LL_ADC_SetOffset+0x44>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	03fff000 	.word	0x03fff000

08003c34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3360      	adds	r3, #96	; 0x60
 8003c42:	461a      	mov	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3360      	adds	r3, #96	; 0x60
 8003c70:	461a      	mov	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3330      	adds	r3, #48	; 0x30
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	4413      	add	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	211f      	movs	r1, #31
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	401a      	ands	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	f003 011f 	and.w	r1, r3, #31
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	431a      	orrs	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b087      	sub	sp, #28
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	0e5b      	lsrs	r3, r3, #25
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	4413      	add	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0d1b      	lsrs	r3, r3, #20
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2107      	movs	r1, #7
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	401a      	ands	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	0d1b      	lsrs	r3, r3, #20
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da8:	43db      	mvns	r3, r3
 8003daa:	401a      	ands	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0318 	and.w	r3, r3, #24
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003db4:	40d9      	lsrs	r1, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	400b      	ands	r3, r1
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	0007ffff 	.word	0x0007ffff

08003dd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6093      	str	r3, [r2, #8]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d101      	bne.n	8003e16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e88:	f043 0201 	orr.w	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003eb0:	f043 0202 	orr.w	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <LL_ADC_IsEnabled+0x18>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_ADC_IsEnabled+0x1a>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d101      	bne.n	8003f02 <LL_ADC_IsDisableOngoing+0x18>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <LL_ADC_IsDisableOngoing+0x1a>
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f4c:	f043 0210 	orr.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d101      	bne.n	8003f78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e12c      	b.n	8004248 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff fa41 	bl	8003484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff fef1 	bl	8003dfc <LL_ADC_IsDeepPowerDownEnabled>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fed7 	bl	8003dd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff0c 	bl	8003e4c <LL_ADC_IsInternalRegulatorEnabled>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d115      	bne.n	8004066 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fef0 	bl	8003e24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004044:	4b82      	ldr	r3, [pc, #520]	; (8004250 <HAL_ADC_Init+0x27c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	4a82      	ldr	r2, [pc, #520]	; (8004254 <HAL_ADC_Init+0x280>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004058:	e002      	b.n	8004060 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3b01      	subs	r3, #1
 800405e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f9      	bne.n	800405a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff feee 	bl	8003e4c <LL_ADC_IsInternalRegulatorEnabled>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10d      	bne.n	8004092 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f043 0210 	orr.w	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff62 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 800409c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 80c5 	bne.w	8004236 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 80c1 	bne.w	8004236 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040bc:	f043 0202 	orr.w	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fefb 	bl	8003ec4 <LL_ADC_IsEnabled>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d4:	4860      	ldr	r0, [pc, #384]	; (8004258 <HAL_ADC_Init+0x284>)
 80040d6:	f7ff fef5 	bl	8003ec4 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4619      	mov	r1, r3
 80040e6:	485d      	ldr	r0, [pc, #372]	; (800425c <HAL_ADC_Init+0x288>)
 80040e8:	f7ff fd4c 	bl	8003b84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7e5b      	ldrb	r3, [r3, #25]
 80040f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80040fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004102:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800410a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800410c:	4313      	orrs	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d106      	bne.n	8004128 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	3b01      	subs	r3, #1
 8004120:	045b      	lsls	r3, r3, #17
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	4b45      	ldr	r3, [pc, #276]	; (8004260 <HAL_ADC_Init+0x28c>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	69b9      	ldr	r1, [r7, #24]
 8004154:	430b      	orrs	r3, r1
 8004156:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff feff 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 8004162:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff20 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 800416e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d13d      	bne.n	80041f2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d13a      	bne.n	80041f2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004180:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004188:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004198:	f023 0302 	bic.w	r3, r3, #2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	430b      	orrs	r3, r1
 80041a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d118      	bne.n	80041e2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041ba:	f023 0304 	bic.w	r3, r3, #4
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041c6:	4311      	orrs	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041d2:	430a      	orrs	r2, r1
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	611a      	str	r2, [r3, #16]
 80041e0:	e007      	b.n	80041f2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10c      	bne.n	8004214 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f023 010f 	bic.w	r1, r3, #15
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	1e5a      	subs	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
 8004212:	e007      	b.n	8004224 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 020f 	bic.w	r2, r2, #15
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	f023 0303 	bic.w	r3, r3, #3
 800422c:	f043 0201 	orr.w	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
 8004234:	e007      	b.n	8004246 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0210 	orr.w	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004246:	7ffb      	ldrb	r3, [r7, #31]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000104 	.word	0x20000104
 8004254:	053e2d63 	.word	0x053e2d63
 8004258:	50040000 	.word	0x50040000
 800425c:	50040300 	.word	0x50040300
 8004260:	fff0c007 	.word	0xfff0c007

08004264 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fe73 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d167      	bne.n	8004350 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_ADC_Start_DMA+0x2a>
 800428a:	2302      	movs	r3, #2
 800428c:	e063      	b.n	8004356 <HAL_ADC_Start_DMA+0xf2>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 ff38 	bl	800510c <ADC_Enable>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d14f      	bne.n	8004346 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d006      	beq.n	80042d4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f023 0206 	bic.w	r2, r3, #6
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58
 80042d2:	e002      	b.n	80042da <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4a20      	ldr	r2, [pc, #128]	; (8004360 <HAL_ADC_Start_DMA+0xfc>)
 80042e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <HAL_ADC_Start_DMA+0x100>)
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_ADC_Start_DMA+0x104>)
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	221c      	movs	r2, #28
 80042f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0210 	orr.w	r2, r2, #16
 8004310:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3340      	adds	r3, #64	; 0x40
 800432c:	4619      	mov	r1, r3
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f002 f90b 	bl	800654c <HAL_DMA_Start_IT>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fde6 	bl	8003f10 <LL_ADC_REG_StartConversion>
 8004344:	e006      	b.n	8004354 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800434e:	e001      	b.n	8004354 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004350:	2302      	movs	r3, #2
 8004352:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800528f 	.word	0x0800528f
 8004364:	08005367 	.word	0x08005367
 8004368:	08005383 	.word	0x08005383

0800436c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_ADC_Stop_DMA+0x16>
 800437e:	2302      	movs	r3, #2
 8004380:	e051      	b.n	8004426 <HAL_ADC_Stop_DMA+0xba>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800438a:	2103      	movs	r1, #3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fe01 	bl	8004f94 <ADC_ConversionStop>
 8004392:	4603      	mov	r3, r0
 8004394:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d13f      	bne.n	800441c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d10f      	bne.n	80043da <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 f924 	bl	800660c <HAL_DMA_Abort>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0210 	bic.w	r2, r2, #16
 80043e8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 feed 	bl	80051d0 <ADC_Disable>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]
 80043fa:	e002      	b.n	8004402 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fee7 	bl	80051d0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004424:	7bfb      	ldrb	r3, [r7, #15]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b088      	sub	sp, #32
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <HAL_ADC_IRQHandler+0x56>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d012      	beq.n	8004484 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b00      	cmp	r3, #0
 8004468:	d105      	bne.n	8004476 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f001 f852 	bl	8005520 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2202      	movs	r2, #2
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <HAL_ADC_IRQHandler+0x6a>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d05e      	beq.n	8004560 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d059      	beq.n	8004560 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fbe4 	bl	8003c96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d03e      	beq.n	8004552 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d135      	bne.n	8004552 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d12e      	bne.n	8004552 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fd31 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d11a      	bne.n	800453a <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 020c 	bic.w	r2, r2, #12
 8004512:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d112      	bne.n	8004552 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
 8004538:	e00b      	b.n	8004552 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fc30 	bl	8000db8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	220c      	movs	r2, #12
 800455e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_ADC_IRQHandler+0x146>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d109      	bne.n	8004588 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d072      	beq.n	8004664 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d06d      	beq.n	8004664 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fbb5 	bl	8003d14 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80045aa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fb70 	bl	8003c96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045b6:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d047      	beq.n	8004656 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <HAL_ADC_IRQHandler+0x1b2>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d03f      	beq.n	8004656 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d13a      	bne.n	8004656 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d133      	bne.n	8004656 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d12e      	bne.n	8004656 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fcd6 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11a      	bne.n	800463e <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004616:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d112      	bne.n	8004656 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
 800463c:	e00b      	b.n	8004656 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f043 0210 	orr.w	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 ff3a 	bl	80054d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2260      	movs	r2, #96	; 0x60
 8004662:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d011      	beq.n	8004692 <HAL_ADC_IRQHandler+0x264>
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00c      	beq.n	8004692 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f890 	bl	80047aa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2280      	movs	r2, #128	; 0x80
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d012      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x294>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 ff20 	bl	80054f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d012      	beq.n	80046f2 <HAL_ADC_IRQHandler+0x2c4>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 ff12 	bl	800550c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02a      	beq.n	8004752 <HAL_ADC_IRQHandler+0x324>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d025      	beq.n	8004752 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800470e:	2301      	movs	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e008      	b.n	8004726 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8004722:	2301      	movs	r3, #1
 8004724:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d10e      	bne.n	800474a <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f043 0202 	orr.w	r2, r3, #2
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f83a 	bl	80047be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2210      	movs	r2, #16
 8004750:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d018      	beq.n	800478e <HAL_ADC_IRQHandler+0x360>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	2b00      	cmp	r3, #0
 8004764:	d013      	beq.n	800478e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004776:	f043 0208 	orr.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004786:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 feab 	bl	80054e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800478e:	bf00      	nop
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b0b6      	sub	sp, #216	; 0xd8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_ConfigChannel+0x22>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e3b9      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x796>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fbac 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	f040 839e 	bne.w	8004f4c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d824      	bhi.n	8004862 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	3b02      	subs	r3, #2
 800481e:	2b03      	cmp	r3, #3
 8004820:	d81b      	bhi.n	800485a <HAL_ADC_ConfigChannel+0x86>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <HAL_ADC_ConfigChannel+0x54>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004839 	.word	0x08004839
 800482c:	08004841 	.word	0x08004841
 8004830:	08004849 	.word	0x08004849
 8004834:	08004851 	.word	0x08004851
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	220c      	movs	r2, #12
 800483c:	605a      	str	r2, [r3, #4]
          break;
 800483e:	e011      	b.n	8004864 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2212      	movs	r2, #18
 8004844:	605a      	str	r2, [r3, #4]
          break;
 8004846:	e00d      	b.n	8004864 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2218      	movs	r2, #24
 800484c:	605a      	str	r2, [r3, #4]
          break;
 800484e:	e009      	b.n	8004864 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004856:	605a      	str	r2, [r3, #4]
          break;
 8004858:	e004      	b.n	8004864 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2206      	movs	r2, #6
 800485e:	605a      	str	r2, [r3, #4]
          break;
 8004860:	e000      	b.n	8004864 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004862:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	f7ff fa23 	bl	8003cbc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fb70 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 8004880:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fb90 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 800488e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004892:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 81a6 	bne.w	8004be8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800489c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 81a1 	bne.w	8004be8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7ff fa41 	bl	8003d3a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	08db      	lsrs	r3, r3, #3
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d00a      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ea:	f7ff f97f 	bl	8003bec <LL_ADC_SetOffset>
 80048ee:	e17b      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff f99c 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_ADC_ConfigChannel+0x148>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff f991 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	0e9b      	lsrs	r3, r3, #26
 8004916:	f003 021f 	and.w	r2, r3, #31
 800491a:	e01e      	b.n	800495a <HAL_ADC_ConfigChannel+0x186>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff f986 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004928:	4603      	mov	r3, r0
 800492a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800493a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800493e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800494a:	2320      	movs	r3, #32
 800494c:	e004      	b.n	8004958 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800494e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x19e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	0e9b      	lsrs	r3, r3, #26
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	e018      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x1d0>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800498a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800498e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004996:	2320      	movs	r3, #32
 8004998:	e004      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800499a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d106      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2100      	movs	r1, #0
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff f955 	bl	8003c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2101      	movs	r1, #1
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff f939 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x20e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2101      	movs	r1, #1
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f92e 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80049d8:	4603      	mov	r3, r0
 80049da:	0e9b      	lsrs	r3, r3, #26
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	e01e      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x24c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f923 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049f8:	fa93 f3a3 	rbit	r3, r3
 80049fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004a10:	2320      	movs	r3, #32
 8004a12:	e004      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004a14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x264>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0e9b      	lsrs	r3, r3, #26
 8004a32:	f003 031f 	and.w	r3, r3, #31
 8004a36:	e018      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x296>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	e004      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a64:	fab3 f383 	clz	r3, r3
 8004a68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d106      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2101      	movs	r1, #1
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff f8f2 	bl	8003c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff f8d6 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10a      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x2d4>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2102      	movs	r1, #2
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff f8cb 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	f003 021f 	and.w	r2, r3, #31
 8004aa6:	e01e      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x312>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2102      	movs	r1, #2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f8c0 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004abe:	fa93 f3a3 	rbit	r3, r3
 8004ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	e004      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004ada:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d105      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x32a>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	0e9b      	lsrs	r3, r3, #26
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	e016      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x358>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004b10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	e004      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d106      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2102      	movs	r1, #2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff f891 	bl	8003c60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2103      	movs	r1, #3
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff f875 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x396>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2103      	movs	r1, #3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff f86a 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004b60:	4603      	mov	r3, r0
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	f003 021f 	and.w	r2, r3, #31
 8004b68:	e017      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x3c6>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2103      	movs	r1, #3
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff f85f 	bl	8003c34 <LL_ADC_GetOffsetChannel>
 8004b76:	4603      	mov	r3, r0
 8004b78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b84:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e003      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x3de>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	0e9b      	lsrs	r3, r3, #26
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	e011      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x402>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bba:	fa93 f3a3 	rbit	r3, r3
 8004bbe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004bca:	2320      	movs	r3, #32
 8004bcc:	e003      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd0:	fab3 f383 	clz	r3, r3
 8004bd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d106      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2200      	movs	r2, #0
 8004be0:	2103      	movs	r1, #3
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff f83c 	bl	8003c60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff f969 	bl	8003ec4 <LL_ADC_IsEnabled>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 813f 	bne.w	8004e78 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f7ff f8c2 	bl	8003d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a8e      	ldr	r2, [pc, #568]	; (8004e4c <HAL_ADC_ConfigChannel+0x678>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f040 8130 	bne.w	8004e78 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10b      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x46c>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	0e9b      	lsrs	r3, r3, #26
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	2b09      	cmp	r3, #9
 8004c36:	bf94      	ite	ls
 8004c38:	2301      	movls	r3, #1
 8004c3a:	2300      	movhi	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e019      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x4a0>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c48:	fa93 f3a3 	rbit	r3, r3
 8004c4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	e003      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3301      	adds	r3, #1
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2b09      	cmp	r3, #9
 8004c6c:	bf94      	ite	ls
 8004c6e:	2301      	movls	r3, #1
 8004c70:	2300      	movhi	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d079      	beq.n	8004d6c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x4c0>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	069b      	lsls	r3, r3, #26
 8004c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c92:	e015      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x4ec>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004cac:	2320      	movs	r3, #32
 8004cae:	e003      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	069b      	lsls	r3, r3, #26
 8004cbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x50c>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	e017      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x53c>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	e003      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cfe:	fab3 f383 	clz	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	ea42 0103 	orr.w	r1, r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x562>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e9b      	lsrs	r3, r3, #26
 8004d26:	3301      	adds	r3, #1
 8004d28:	f003 021f 	and.w	r2, r3, #31
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	051b      	lsls	r3, r3, #20
 8004d34:	e018      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x594>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004d4e:	2320      	movs	r3, #32
 8004d50:	e003      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	e080      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x5b4>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	0e9b      	lsrs	r3, r3, #26
 8004d7e:	3301      	adds	r3, #1
 8004d80:	069b      	lsls	r3, r3, #26
 8004d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d86:	e015      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5e0>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	fa93 f3a3 	rbit	r3, r3
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004da0:	2320      	movs	r3, #32
 8004da2:	e003      	b.n	8004dac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	3301      	adds	r3, #1
 8004dae:	069b      	lsls	r3, r3, #26
 8004db0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d109      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x600>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	0e9b      	lsrs	r3, r3, #26
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	e017      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x630>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	fa93 f3a3 	rbit	r3, r3
 8004de0:	61fb      	str	r3, [r7, #28]
  return result;
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004dec:	2320      	movs	r3, #32
 8004dee:	e003      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	2101      	movs	r1, #1
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	ea42 0103 	orr.w	r1, r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10d      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x65c>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	0e9b      	lsrs	r3, r3, #26
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f003 021f 	and.w	r2, r3, #31
 8004e20:	4613      	mov	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4413      	add	r3, r2
 8004e26:	3b1e      	subs	r3, #30
 8004e28:	051b      	lsls	r3, r3, #20
 8004e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	e01d      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x698>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	fa93 f3a3 	rbit	r3, r3
 8004e3c:	613b      	str	r3, [r7, #16]
  return result;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	e005      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x684>
 8004e4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f003 021f 	and.w	r2, r3, #31
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	3b1e      	subs	r3, #30
 8004e66:	051b      	lsls	r3, r3, #20
 8004e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	6892      	ldr	r2, [r2, #8]
 8004e72:	4619      	mov	r1, r3
 8004e74:	f7fe ff61 	bl	8003d3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <HAL_ADC_ConfigChannel+0x7a0>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d06c      	beq.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e84:	483c      	ldr	r0, [pc, #240]	; (8004f78 <HAL_ADC_ConfigChannel+0x7a4>)
 8004e86:	f7fe fea3 	bl	8003bd0 <LL_ADC_GetCommonPathInternalCh>
 8004e8a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <HAL_ADC_ConfigChannel+0x7a8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d127      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d121      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a35      	ldr	r2, [pc, #212]	; (8004f80 <HAL_ADC_ConfigChannel+0x7ac>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d157      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	482f      	ldr	r0, [pc, #188]	; (8004f78 <HAL_ADC_ConfigChannel+0x7a4>)
 8004eba:	f7fe fe76 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ebe:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_ADC_ConfigChannel+0x7b0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	099b      	lsrs	r3, r3, #6
 8004ec4:	4a30      	ldr	r2, [pc, #192]	; (8004f88 <HAL_ADC_ConfigChannel+0x7b4>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ed8:	e002      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f9      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ee6:	e03a      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a27      	ldr	r2, [pc, #156]	; (8004f8c <HAL_ADC_ConfigChannel+0x7b8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d113      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x746>
 8004ef2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10d      	bne.n	8004f1a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1f      	ldr	r2, [pc, #124]	; (8004f80 <HAL_ADC_ConfigChannel+0x7ac>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d12a      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f10:	4619      	mov	r1, r3
 8004f12:	4819      	ldr	r0, [pc, #100]	; (8004f78 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f14:	f7fe fe49 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f18:	e021      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_ADC_ConfigChannel+0x7bc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d11c      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d116      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <HAL_ADC_ConfigChannel+0x7ac>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d111      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f42:	4619      	mov	r1, r3
 8004f44:	480c      	ldr	r0, [pc, #48]	; (8004f78 <HAL_ADC_ConfigChannel+0x7a4>)
 8004f46:	f7fe fe30 	bl	8003baa <LL_ADC_SetCommonPathInternalCh>
 8004f4a:	e008      	b.n	8004f5e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	37d8      	adds	r7, #216	; 0xd8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	80080000 	.word	0x80080000
 8004f78:	50040300 	.word	0x50040300
 8004f7c:	c7520000 	.word	0xc7520000
 8004f80:	50040000 	.word	0x50040000
 8004f84:	20000104 	.word	0x20000104
 8004f88:	053e2d63 	.word	0x053e2d63
 8004f8c:	cb840000 	.word	0xcb840000
 8004f90:	80000001 	.word	0x80000001

08004f94 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe ffd8 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 8004fb0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe fff9 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 8004fbc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8098 	beq.w	80050fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02a      	beq.n	8005030 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7e5b      	ldrb	r3, [r3, #25]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d126      	bne.n	8005030 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	7e1b      	ldrb	r3, [r3, #24]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d122      	bne.n	8005030 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004fee:	e014      	b.n	800501a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	4a45      	ldr	r2, [pc, #276]	; (8005108 <ADC_ConversionStop+0x174>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d90d      	bls.n	8005014 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	f043 0210 	orr.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f043 0201 	orr.w	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e074      	b.n	80050fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	3301      	adds	r3, #1
 8005018:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d1e3      	bne.n	8004ff0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2240      	movs	r2, #64	; 0x40
 800502e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d014      	beq.n	8005060 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe ff90 	bl	8003f60 <LL_ADC_REG_IsConversionOngoing>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe ff4d 	bl	8003eea <LL_ADC_IsDisableOngoing>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe ff6c 	bl	8003f38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d014      	beq.n	8005090 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe ff9f 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe ff35 	bl	8003eea <LL_ADC_IsDisableOngoing>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe ff7b 	bl	8003f86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d005      	beq.n	80050a2 <ADC_ConversionStop+0x10e>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d105      	bne.n	80050a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800509c:	230c      	movs	r3, #12
 800509e:	617b      	str	r3, [r7, #20]
        break;
 80050a0:	e005      	b.n	80050ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80050a2:	2308      	movs	r3, #8
 80050a4:	617b      	str	r3, [r7, #20]
        break;
 80050a6:	e002      	b.n	80050ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80050a8:	2304      	movs	r3, #4
 80050aa:	617b      	str	r3, [r7, #20]
        break;
 80050ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80050ae:	f7fe fd39 	bl	8003b24 <HAL_GetTick>
 80050b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80050b4:	e01b      	b.n	80050ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80050b6:	f7fe fd35 	bl	8003b24 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d914      	bls.n	80050ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00d      	beq.n	80050ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f043 0210 	orr.w	r2, r3, #16
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	f043 0201 	orr.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e007      	b.n	80050fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1dc      	bne.n	80050b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	a33fffff 	.word	0xa33fffff

0800510c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fed3 	bl	8003ec4 <LL_ADC_IsEnabled>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d14d      	bne.n	80051c0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	4b28      	ldr	r3, [pc, #160]	; (80051cc <ADC_Enable+0xc0>)
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00d      	beq.n	800514e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	f043 0210 	orr.w	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005142:	f043 0201 	orr.w	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e039      	b.n	80051c2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fe8e 	bl	8003e74 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005158:	f7fe fce4 	bl	8003b24 <HAL_GetTick>
 800515c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800515e:	e028      	b.n	80051b2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f7fe fead 	bl	8003ec4 <LL_ADC_IsEnabled>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fe7d 	bl	8003e74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800517a:	f7fe fcd3 	bl	8003b24 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d914      	bls.n	80051b2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d00d      	beq.n	80051b2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519a:	f043 0210 	orr.w	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	f043 0201 	orr.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e007      	b.n	80051c2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d1cf      	bne.n	8005160 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	8000003f 	.word	0x8000003f

080051d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fe84 	bl	8003eea <LL_ADC_IsDisableOngoing>
 80051e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fe fe6b 	bl	8003ec4 <LL_ADC_IsEnabled>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d047      	beq.n	8005284 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d144      	bne.n	8005284 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 030d 	and.w	r3, r3, #13
 8005204:	2b01      	cmp	r3, #1
 8005206:	d10c      	bne.n	8005222 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fe45 	bl	8003e9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2203      	movs	r2, #3
 8005218:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800521a:	f7fe fc83 	bl	8003b24 <HAL_GetTick>
 800521e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005220:	e029      	b.n	8005276 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	f043 0210 	orr.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e023      	b.n	8005286 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800523e:	f7fe fc71 	bl	8003b24 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d914      	bls.n	8005276 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f043 0210 	orr.w	r2, r3, #16
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	f043 0201 	orr.w	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e007      	b.n	8005286 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1dc      	bne.n	800523e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d14b      	bne.n	8005340 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d021      	beq.n	8005306 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fce5 	bl	8003c96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d032      	beq.n	8005338 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d12b      	bne.n	8005338 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d11f      	bne.n	8005338 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
 8005304:	e018      	b.n	8005338 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d111      	bne.n	8005338 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	f043 0201 	orr.w	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7fb fd3d 	bl	8000db8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800533e:	e00e      	b.n	800535e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff fa36 	bl	80047be <HAL_ADC_ErrorCallback>
}
 8005352:	e004      	b.n	800535e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff fa0e 	bl	8004796 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	f043 0204 	orr.w	r2, r3, #4
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff fa08 	bl	80047be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <LL_ADC_StartCalibration>:
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80053c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	609a      	str	r2, [r3, #8]
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053fc:	d101      	bne.n	8005402 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_ADCEx_Calibration_Start+0x1c>
 8005428:	2302      	movs	r3, #2
 800542a:	e04d      	b.n	80054c8 <HAL_ADCEx_Calibration_Start+0xb8>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff fecb 	bl	80051d0 <ADC_Disable>
 800543a:	4603      	mov	r3, r0
 800543c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d136      	bne.n	80054b2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800544c:	f023 0302 	bic.w	r3, r3, #2
 8005450:	f043 0202 	orr.w	r2, r3, #2
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ffa9 	bl	80053b6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005464:	e014      	b.n	8005490 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	3301      	adds	r3, #1
 800546a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005472:	d30d      	bcc.n	8005490 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	f023 0312 	bic.w	r3, r3, #18
 800547c:	f043 0210 	orr.w	r2, r3, #16
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e01b      	b.n	80054c8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff ffa7 	bl	80053e8 <LL_ADC_IsCalibrationOnGoing>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e2      	bne.n	8005466 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	f043 0201 	orr.w	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
 80054b0:	e005      	b.n	80054be <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	f043 0210 	orr.w	r2, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0ed      	b.n	8005722 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fe f832 	bl	80035bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005568:	f7fe fadc 	bl	8003b24 <HAL_GetTick>
 800556c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800556e:	e012      	b.n	8005596 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005570:	f7fe fad8 	bl	8003b24 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b0a      	cmp	r3, #10
 800557c:	d90b      	bls.n	8005596 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2205      	movs	r2, #5
 800558e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0c5      	b.n	8005722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0e5      	beq.n	8005570 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0202 	bic.w	r2, r2, #2
 80055b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055b4:	f7fe fab6 	bl	8003b24 <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80055ba:	e012      	b.n	80055e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80055bc:	f7fe fab2 	bl	8003b24 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b0a      	cmp	r3, #10
 80055c8:	d90b      	bls.n	80055e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2205      	movs	r2, #5
 80055da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e09f      	b.n	8005722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	7e1b      	ldrb	r3, [r3, #24]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d108      	bne.n	800560a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e007      	b.n	800561a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7e5b      	ldrb	r3, [r3, #25]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d108      	bne.n	8005634 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e007      	b.n	8005644 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005642:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7e9b      	ldrb	r3, [r3, #26]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d108      	bne.n	800565e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0220 	orr.w	r2, r2, #32
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e007      	b.n	800566e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f022 0220 	bic.w	r2, r2, #32
 800566c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	7edb      	ldrb	r3, [r3, #27]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d108      	bne.n	8005688 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0210 	bic.w	r2, r2, #16
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e007      	b.n	8005698 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0210 	orr.w	r2, r2, #16
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7f1b      	ldrb	r3, [r3, #28]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d108      	bne.n	80056b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0208 	orr.w	r2, r2, #8
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	e007      	b.n	80056c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0208 	bic.w	r2, r2, #8
 80056c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	7f5b      	ldrb	r3, [r3, #29]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d108      	bne.n	80056dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0204 	orr.w	r2, r2, #4
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	e007      	b.n	80056ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0204 	bic.w	r2, r2, #4
 80056ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	ea42 0103 	orr.w	r1, r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800572a:	b480      	push	{r7}
 800572c:	b087      	sub	sp, #28
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005740:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d003      	beq.n	8005750 <HAL_CAN_ConfigFilter+0x26>
 8005748:	7cfb      	ldrb	r3, [r7, #19]
 800574a:	2b02      	cmp	r3, #2
 800574c:	f040 80aa 	bne.w	80058a4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d123      	bne.n	80057d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	43db      	mvns	r3, r3
 8005794:	401a      	ands	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80057ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	3248      	adds	r2, #72	; 0x48
 80057b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80057c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	3348      	adds	r3, #72	; 0x48
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	440b      	add	r3, r1
 80057d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d122      	bne.n	8005820 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80057fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3248      	adds	r2, #72	; 0x48
 8005800:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005814:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005816:	6979      	ldr	r1, [r7, #20]
 8005818:	3348      	adds	r3, #72	; 0x48
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d109      	bne.n	800583c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800583a:	e007      	b.n	800584c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	431a      	orrs	r2, r3
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	43db      	mvns	r3, r3
 800585e:	401a      	ands	r2, r3
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005866:	e007      	b.n	8005878 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	431a      	orrs	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d107      	bne.n	8005890 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	431a      	orrs	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005896:	f023 0201 	bic.w	r2, r3, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e006      	b.n	80058b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d12e      	bne.n	8005930 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0201 	bic.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ea:	f7fe f91b 	bl	8003b24 <HAL_GetTick>
 80058ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80058f0:	e012      	b.n	8005918 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80058f2:	f7fe f917 	bl	8003b24 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b0a      	cmp	r3, #10
 80058fe:	d90b      	bls.n	8005918 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2205      	movs	r2, #5
 8005910:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e012      	b.n	800593e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e006      	b.n	800593e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005946:	b480      	push	{r7}
 8005948:	b089      	sub	sp, #36	; 0x24
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800595a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005964:	7ffb      	ldrb	r3, [r7, #31]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d003      	beq.n	8005972 <HAL_CAN_AddTxMessage+0x2c>
 800596a:	7ffb      	ldrb	r3, [r7, #31]
 800596c:	2b02      	cmp	r3, #2
 800596e:	f040 80b8 	bne.w	8005ae2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005982:	2b00      	cmp	r3, #0
 8005984:	d105      	bne.n	8005992 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a0 	beq.w	8005ad2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	0e1b      	lsrs	r3, r3, #24
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d907      	bls.n	80059b2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e09e      	b.n	8005af0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80059b2:	2201      	movs	r2, #1
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	409a      	lsls	r2, r3
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10d      	bne.n	80059e0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80059ce:	68f9      	ldr	r1, [r7, #12]
 80059d0:	6809      	ldr	r1, [r1, #0]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3318      	adds	r3, #24
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	440b      	add	r3, r1
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e00f      	b.n	8005a00 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80059ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80059f0:	68f9      	ldr	r1, [r7, #12]
 80059f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80059f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	3318      	adds	r3, #24
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	440b      	add	r3, r1
 80059fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	440b      	add	r3, r1
 8005a10:	3304      	adds	r3, #4
 8005a12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	7d1b      	ldrb	r3, [r3, #20]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d111      	bne.n	8005a40 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3318      	adds	r3, #24
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6811      	ldr	r1, [r2, #0]
 8005a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	3318      	adds	r3, #24
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3307      	adds	r3, #7
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	061a      	lsls	r2, r3, #24
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3306      	adds	r3, #6
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	041b      	lsls	r3, r3, #16
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3305      	adds	r3, #5
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	3204      	adds	r2, #4
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	4610      	mov	r0, r2
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	6811      	ldr	r1, [r2, #0]
 8005a68:	ea43 0200 	orr.w	r2, r3, r0
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	440b      	add	r3, r1
 8005a72:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005a76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3303      	adds	r3, #3
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	061a      	lsls	r2, r3, #24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3302      	adds	r3, #2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	041b      	lsls	r3, r3, #16
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	4313      	orrs	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	4610      	mov	r0, r2
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	ea43 0200 	orr.w	r2, r3, r0
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	440b      	add	r3, r1
 8005aa8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005aac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3318      	adds	r3, #24
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	4413      	add	r3, r2
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	6811      	ldr	r1, [r2, #0]
 8005ac0:	f043 0201 	orr.w	r2, r3, #1
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	440b      	add	r3, r1
 8005acc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e00e      	b.n	8005af0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e006      	b.n	8005af0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3724      	adds	r7, #36	; 0x24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d003      	beq.n	8005b20 <HAL_CAN_GetRxMessage+0x24>
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	f040 80f3 	bne.w	8005d06 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10e      	bne.n	8005b44 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d116      	bne.n	8005b62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e0e7      	b.n	8005d14 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d107      	bne.n	8005b62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e0d8      	b.n	8005d14 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	331b      	adds	r3, #27
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	4413      	add	r3, r2
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0204 	and.w	r2, r3, #4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10c      	bne.n	8005b9a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	331b      	adds	r3, #27
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4413      	add	r3, r2
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	0d5b      	lsrs	r3, r3, #21
 8005b90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e00b      	b.n	8005bb2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	331b      	adds	r3, #27
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	4413      	add	r3, r2
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	331b      	adds	r3, #27
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	4413      	add	r3, r2
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0202 	and.w	r2, r3, #2
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	331b      	adds	r3, #27
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	331b      	adds	r3, #27
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	4413      	add	r3, r2
 8005bec:	3304      	adds	r3, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	331b      	adds	r3, #27
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	4413      	add	r3, r2
 8005c04:	3304      	adds	r3, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	0c1b      	lsrs	r3, r3, #16
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	0a1a      	lsrs	r2, r3, #8
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	0c1a      	lsrs	r2, r3, #16
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	3302      	adds	r3, #2
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	0e1a      	lsrs	r2, r3, #24
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	3303      	adds	r3, #3
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	3304      	adds	r3, #4
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	0a1a      	lsrs	r2, r3, #8
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3305      	adds	r3, #5
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	0c1a      	lsrs	r2, r3, #16
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	3306      	adds	r3, #6
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	0e1a      	lsrs	r2, r3, #24
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	3307      	adds	r3, #7
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0220 	orr.w	r2, r2, #32
 8005cee:	60da      	str	r2, [r3, #12]
 8005cf0:	e007      	b.n	8005d02 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0220 	orr.w	r2, r2, #32
 8005d00:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e006      	b.n	8005d14 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
  }
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d30:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d002      	beq.n	8005d3e <HAL_CAN_ActivateNotification+0x1e>
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d109      	bne.n	8005d52 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6959      	ldr	r1, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e006      	b.n	8005d60 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d07c      	beq.n	8005eac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d023      	beq.n	8005e04 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f983 	bl	80060da <HAL_CAN_TxMailbox0CompleteCallback>
 8005dd4:	e016      	b.n	8005e04 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
 8005de8:	e00c      	b.n	8005e04 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfc:	e002      	b.n	8005e04 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f989 	bl	8006116 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d024      	beq.n	8005e58 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f963 	bl	80060ee <HAL_CAN_TxMailbox1CompleteCallback>
 8005e28:	e016      	b.n	8005e58 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	e00c      	b.n	8005e58 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	e002      	b.n	8005e58 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f969 	bl	800612a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d024      	beq.n	8005eac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f943 	bl	8006102 <HAL_CAN_TxMailbox2CompleteCallback>
 8005e7c:	e016      	b.n	8005eac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e90:	e00c      	b.n	8005eac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	e002      	b.n	8005eac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f949 	bl	800613e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2210      	movs	r2, #16
 8005ece:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d006      	beq.n	8005ef2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f930 	bl	8006152 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb fbbe 	bl	800168c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0310 	and.w	r3, r3, #16
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2210      	movs	r2, #16
 8005f32:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00b      	beq.n	8005f56 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2208      	movs	r2, #8
 8005f4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f908 	bl	8006166 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fb fbac 	bl	80016cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d006      	beq.n	8005f96 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2210      	movs	r2, #16
 8005f8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f8f2 	bl	800617a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d006      	beq.n	8005fb8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2208      	movs	r2, #8
 8005fb0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8eb 	bl	800618e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d07b      	beq.n	80060ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d072      	beq.n	80060b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d008      	beq.n	8006004 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	f043 0302 	orr.w	r3, r3, #2
 8006002:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d008      	beq.n	8006020 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	f043 0304 	orr.w	r3, r3, #4
 800601e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	2b00      	cmp	r3, #0
 8006028:	d043      	beq.n	80060b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006030:	2b00      	cmp	r3, #0
 8006032:	d03e      	beq.n	80060b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800603a:	2b60      	cmp	r3, #96	; 0x60
 800603c:	d02b      	beq.n	8006096 <HAL_CAN_IRQHandler+0x32a>
 800603e:	2b60      	cmp	r3, #96	; 0x60
 8006040:	d82e      	bhi.n	80060a0 <HAL_CAN_IRQHandler+0x334>
 8006042:	2b50      	cmp	r3, #80	; 0x50
 8006044:	d022      	beq.n	800608c <HAL_CAN_IRQHandler+0x320>
 8006046:	2b50      	cmp	r3, #80	; 0x50
 8006048:	d82a      	bhi.n	80060a0 <HAL_CAN_IRQHandler+0x334>
 800604a:	2b40      	cmp	r3, #64	; 0x40
 800604c:	d019      	beq.n	8006082 <HAL_CAN_IRQHandler+0x316>
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d826      	bhi.n	80060a0 <HAL_CAN_IRQHandler+0x334>
 8006052:	2b30      	cmp	r3, #48	; 0x30
 8006054:	d010      	beq.n	8006078 <HAL_CAN_IRQHandler+0x30c>
 8006056:	2b30      	cmp	r3, #48	; 0x30
 8006058:	d822      	bhi.n	80060a0 <HAL_CAN_IRQHandler+0x334>
 800605a:	2b10      	cmp	r3, #16
 800605c:	d002      	beq.n	8006064 <HAL_CAN_IRQHandler+0x2f8>
 800605e:	2b20      	cmp	r3, #32
 8006060:	d005      	beq.n	800606e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006062:	e01d      	b.n	80060a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	f043 0308 	orr.w	r3, r3, #8
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800606c:	e019      	b.n	80060a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	f043 0310 	orr.w	r3, r3, #16
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006076:	e014      	b.n	80060a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	f043 0320 	orr.w	r3, r3, #32
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006080:	e00f      	b.n	80060a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800608a:	e00a      	b.n	80060a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006094:	e005      	b.n	80060a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800609e:	e000      	b.n	80060a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80060a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699a      	ldr	r2, [r3, #24]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80060b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2204      	movs	r2, #4
 80060b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f868 	bl	80061a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80060d2:	bf00      	nop
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <__NVIC_SetPriorityGrouping+0x44>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061d4:	4013      	ands	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ea:	4a04      	ldr	r2, [pc, #16]	; (80061fc <__NVIC_SetPriorityGrouping+0x44>)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	60d3      	str	r3, [r2, #12]
}
 80061f0:	bf00      	nop
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000ed00 	.word	0xe000ed00

08006200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <__NVIC_GetPriorityGrouping+0x18>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	f003 0307 	and.w	r3, r3, #7
}
 800620e:	4618      	mov	r0, r3
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	e000ed00 	.word	0xe000ed00

0800621c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622a:	2b00      	cmp	r3, #0
 800622c:	db0b      	blt.n	8006246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	f003 021f 	and.w	r2, r3, #31
 8006234:	4907      	ldr	r1, [pc, #28]	; (8006254 <__NVIC_EnableIRQ+0x38>)
 8006236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2001      	movs	r0, #1
 800623e:	fa00 f202 	lsl.w	r2, r0, r2
 8006242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	e000e100 	.word	0xe000e100

08006258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006268:	2b00      	cmp	r3, #0
 800626a:	db0a      	blt.n	8006282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	490c      	ldr	r1, [pc, #48]	; (80062a4 <__NVIC_SetPriority+0x4c>)
 8006272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006276:	0112      	lsls	r2, r2, #4
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	440b      	add	r3, r1
 800627c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006280:	e00a      	b.n	8006298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	4908      	ldr	r1, [pc, #32]	; (80062a8 <__NVIC_SetPriority+0x50>)
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	3b04      	subs	r3, #4
 8006290:	0112      	lsls	r2, r2, #4
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	440b      	add	r3, r1
 8006296:	761a      	strb	r2, [r3, #24]
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	e000e100 	.word	0xe000e100
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	; 0x24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f1c3 0307 	rsb	r3, r3, #7
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	bf28      	it	cs
 80062ca:	2304      	movcs	r3, #4
 80062cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d902      	bls.n	80062dc <NVIC_EncodePriority+0x30>
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	3b03      	subs	r3, #3
 80062da:	e000      	b.n	80062de <NVIC_EncodePriority+0x32>
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43da      	mvns	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	401a      	ands	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062f4:	f04f 31ff 	mov.w	r1, #4294967295
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	fa01 f303 	lsl.w	r3, r1, r3
 80062fe:	43d9      	mvns	r1, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006304:	4313      	orrs	r3, r2
         );
}
 8006306:	4618      	mov	r0, r3
 8006308:	3724      	adds	r7, #36	; 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3b01      	subs	r3, #1
 8006320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006324:	d301      	bcc.n	800632a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006326:	2301      	movs	r3, #1
 8006328:	e00f      	b.n	800634a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <SysTick_Config+0x40>)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3b01      	subs	r3, #1
 8006330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006332:	210f      	movs	r1, #15
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	f7ff ff8e 	bl	8006258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800633c:	4b05      	ldr	r3, [pc, #20]	; (8006354 <SysTick_Config+0x40>)
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <SysTick_Config+0x40>)
 8006344:	2207      	movs	r2, #7
 8006346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	e000e010 	.word	0xe000e010

08006358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff ff29 	bl	80061b8 <__NVIC_SetPriorityGrouping>
}
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b086      	sub	sp, #24
 8006372:	af00      	add	r7, sp, #0
 8006374:	4603      	mov	r3, r0
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006380:	f7ff ff3e 	bl	8006200 <__NVIC_GetPriorityGrouping>
 8006384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	6978      	ldr	r0, [r7, #20]
 800638c:	f7ff ff8e 	bl	80062ac <NVIC_EncodePriority>
 8006390:	4602      	mov	r2, r0
 8006392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff ff5d 	bl	8006258 <__NVIC_SetPriority>
}
 800639e:	bf00      	nop
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	4603      	mov	r3, r0
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff31 	bl	800621c <__NVIC_EnableIRQ>
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffa2 	bl	8006314 <SysTick_Config>
 80063d0:	4603      	mov	r3, r0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e098      	b.n	8006520 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	4b4d      	ldr	r3, [pc, #308]	; (800652c <HAL_DMA_Init+0x150>)
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d80f      	bhi.n	800641a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <HAL_DMA_Init+0x154>)
 8006402:	4413      	add	r3, r2
 8006404:	4a4b      	ldr	r2, [pc, #300]	; (8006534 <HAL_DMA_Init+0x158>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	091b      	lsrs	r3, r3, #4
 800640c:	009a      	lsls	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a48      	ldr	r2, [pc, #288]	; (8006538 <HAL_DMA_Init+0x15c>)
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
 8006418:	e00e      	b.n	8006438 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	4b46      	ldr	r3, [pc, #280]	; (800653c <HAL_DMA_Init+0x160>)
 8006422:	4413      	add	r3, r2
 8006424:	4a43      	ldr	r2, [pc, #268]	; (8006534 <HAL_DMA_Init+0x158>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	091b      	lsrs	r3, r3, #4
 800642c:	009a      	lsls	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a42      	ldr	r2, [pc, #264]	; (8006540 <HAL_DMA_Init+0x164>)
 8006436:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800645c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006492:	d039      	beq.n	8006508 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	4a27      	ldr	r2, [pc, #156]	; (8006538 <HAL_DMA_Init+0x15c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d11a      	bne.n	80064d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800649e:	4b29      	ldr	r3, [pc, #164]	; (8006544 <HAL_DMA_Init+0x168>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	f003 031c 	and.w	r3, r3, #28
 80064aa:	210f      	movs	r1, #15
 80064ac:	fa01 f303 	lsl.w	r3, r1, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	4924      	ldr	r1, [pc, #144]	; (8006544 <HAL_DMA_Init+0x168>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80064b8:	4b22      	ldr	r3, [pc, #136]	; (8006544 <HAL_DMA_Init+0x168>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c4:	f003 031c 	and.w	r3, r3, #28
 80064c8:	fa01 f303 	lsl.w	r3, r1, r3
 80064cc:	491d      	ldr	r1, [pc, #116]	; (8006544 <HAL_DMA_Init+0x168>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]
 80064d2:	e019      	b.n	8006508 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80064d4:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <HAL_DMA_Init+0x16c>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064dc:	f003 031c 	and.w	r3, r3, #28
 80064e0:	210f      	movs	r1, #15
 80064e2:	fa01 f303 	lsl.w	r3, r1, r3
 80064e6:	43db      	mvns	r3, r3
 80064e8:	4917      	ldr	r1, [pc, #92]	; (8006548 <HAL_DMA_Init+0x16c>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_DMA_Init+0x16c>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	f003 031c 	and.w	r3, r3, #28
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	4911      	ldr	r1, [pc, #68]	; (8006548 <HAL_DMA_Init+0x16c>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40020407 	.word	0x40020407
 8006530:	bffdfff8 	.word	0xbffdfff8
 8006534:	cccccccd 	.word	0xcccccccd
 8006538:	40020000 	.word	0x40020000
 800653c:	bffdfbf8 	.word	0xbffdfbf8
 8006540:	40020400 	.word	0x40020400
 8006544:	400200a8 	.word	0x400200a8
 8006548:	400204a8 	.word	0x400204a8

0800654c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_DMA_Start_IT+0x20>
 8006568:	2302      	movs	r3, #2
 800656a:	e04b      	b.n	8006604 <HAL_DMA_Start_IT+0xb8>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b01      	cmp	r3, #1
 800657e:	d13a      	bne.n	80065f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f91e 	bl	80067e6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 020e 	orr.w	r2, r2, #14
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e00f      	b.n	80065e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0204 	bic.w	r2, r2, #4
 80065d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 020a 	orr.w	r2, r2, #10
 80065e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e005      	b.n	8006602 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
 8006600:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006602:	7dfb      	ldrb	r3, [r7, #23]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d008      	beq.n	8006636 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2204      	movs	r2, #4
 8006628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e022      	b.n	800667c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 020e 	bic.w	r2, r2, #14
 8006644:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	f003 021c 	and.w	r2, r3, #28
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	2101      	movs	r1, #1
 8006664:	fa01 f202 	lsl.w	r2, r1, r2
 8006668:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a4:	f003 031c 	and.w	r3, r3, #28
 80066a8:	2204      	movs	r2, #4
 80066aa:	409a      	lsls	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4013      	ands	r3, r2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d026      	beq.n	8006702 <HAL_DMA_IRQHandler+0x7a>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d021      	beq.n	8006702 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d107      	bne.n	80066dc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0204 	bic.w	r2, r2, #4
 80066da:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	f003 021c 	and.w	r2, r3, #28
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2104      	movs	r1, #4
 80066ea:	fa01 f202 	lsl.w	r2, r1, r2
 80066ee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d071      	beq.n	80067dc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006700:	e06c      	b.n	80067dc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f003 031c 	and.w	r3, r3, #28
 800670a:	2202      	movs	r2, #2
 800670c:	409a      	lsls	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02e      	beq.n	8006774 <HAL_DMA_IRQHandler+0xec>
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d029      	beq.n	8006774 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 020a 	bic.w	r2, r2, #10
 800673c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	f003 021c 	and.w	r2, r3, #28
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2102      	movs	r1, #2
 8006754:	fa01 f202 	lsl.w	r2, r1, r2
 8006758:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d038      	beq.n	80067dc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006772:	e033      	b.n	80067dc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006778:	f003 031c 	and.w	r3, r3, #28
 800677c:	2208      	movs	r2, #8
 800677e:	409a      	lsls	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d02a      	beq.n	80067de <HAL_DMA_IRQHandler+0x156>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d025      	beq.n	80067de <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 020e 	bic.w	r2, r2, #14
 80067a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	f003 021c 	and.w	r2, r3, #28
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2101      	movs	r1, #1
 80067b0:	fa01 f202 	lsl.w	r2, r1, r2
 80067b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
}
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b085      	sub	sp, #20
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f003 021c 	and.w	r2, r3, #28
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f202 	lsl.w	r2, r1, r2
 8006806:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b10      	cmp	r3, #16
 8006816:	d108      	bne.n	800682a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006828:	e007      	b.n	800683a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	60da      	str	r2, [r3, #12]
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006856:	e154      	b.n	8006b02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	2101      	movs	r1, #1
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	fa01 f303 	lsl.w	r3, r1, r3
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8146 	beq.w	8006afc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f003 0303 	and.w	r3, r3, #3
 8006878:	2b01      	cmp	r3, #1
 800687a:	d005      	beq.n	8006888 <HAL_GPIO_Init+0x40>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d130      	bne.n	80068ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	2203      	movs	r2, #3
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	43db      	mvns	r3, r3
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4013      	ands	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068be:	2201      	movs	r2, #1
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	43db      	mvns	r3, r3
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4013      	ands	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	f003 0201 	and.w	r2, r3, #1
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d017      	beq.n	8006926 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	2203      	movs	r2, #3
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43db      	mvns	r3, r3
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4013      	ands	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d123      	bne.n	800697a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	08da      	lsrs	r2, r3, #3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3208      	adds	r2, #8
 800693a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	220f      	movs	r2, #15
 800694a:	fa02 f303 	lsl.w	r3, r2, r3
 800694e:	43db      	mvns	r3, r3
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4013      	ands	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	08da      	lsrs	r2, r3, #3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3208      	adds	r2, #8
 8006974:	6939      	ldr	r1, [r7, #16]
 8006976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2203      	movs	r2, #3
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4013      	ands	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f003 0203 	and.w	r2, r3, #3
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80a0 	beq.w	8006afc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069bc:	4b58      	ldr	r3, [pc, #352]	; (8006b20 <HAL_GPIO_Init+0x2d8>)
 80069be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c0:	4a57      	ldr	r2, [pc, #348]	; (8006b20 <HAL_GPIO_Init+0x2d8>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	6613      	str	r3, [r2, #96]	; 0x60
 80069c8:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <HAL_GPIO_Init+0x2d8>)
 80069ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80069d4:	4a53      	ldr	r2, [pc, #332]	; (8006b24 <HAL_GPIO_Init+0x2dc>)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	089b      	lsrs	r3, r3, #2
 80069da:	3302      	adds	r3, #2
 80069dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f003 0303 	and.w	r3, r3, #3
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	220f      	movs	r2, #15
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	43db      	mvns	r3, r3
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80069fe:	d019      	beq.n	8006a34 <HAL_GPIO_Init+0x1ec>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a49      	ldr	r2, [pc, #292]	; (8006b28 <HAL_GPIO_Init+0x2e0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <HAL_GPIO_Init+0x1e8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a48      	ldr	r2, [pc, #288]	; (8006b2c <HAL_GPIO_Init+0x2e4>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00d      	beq.n	8006a2c <HAL_GPIO_Init+0x1e4>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a47      	ldr	r2, [pc, #284]	; (8006b30 <HAL_GPIO_Init+0x2e8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d007      	beq.n	8006a28 <HAL_GPIO_Init+0x1e0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a46      	ldr	r2, [pc, #280]	; (8006b34 <HAL_GPIO_Init+0x2ec>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d101      	bne.n	8006a24 <HAL_GPIO_Init+0x1dc>
 8006a20:	2304      	movs	r3, #4
 8006a22:	e008      	b.n	8006a36 <HAL_GPIO_Init+0x1ee>
 8006a24:	2307      	movs	r3, #7
 8006a26:	e006      	b.n	8006a36 <HAL_GPIO_Init+0x1ee>
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e004      	b.n	8006a36 <HAL_GPIO_Init+0x1ee>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e002      	b.n	8006a36 <HAL_GPIO_Init+0x1ee>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <HAL_GPIO_Init+0x1ee>
 8006a34:	2300      	movs	r3, #0
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	f002 0203 	and.w	r2, r2, #3
 8006a3c:	0092      	lsls	r2, r2, #2
 8006a3e:	4093      	lsls	r3, r2
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006a46:	4937      	ldr	r1, [pc, #220]	; (8006b24 <HAL_GPIO_Init+0x2dc>)
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	089b      	lsrs	r3, r3, #2
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a54:	4b38      	ldr	r3, [pc, #224]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	43db      	mvns	r3, r3
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4013      	ands	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a78:	4a2f      	ldr	r2, [pc, #188]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a7e:	4b2e      	ldr	r3, [pc, #184]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	43db      	mvns	r3, r3
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006aa2:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006aa8:	4b23      	ldr	r3, [pc, #140]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006acc:	4a1a      	ldr	r2, [pc, #104]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006ad2:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	43db      	mvns	r3, r3
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006af6:	4a10      	ldr	r2, [pc, #64]	; (8006b38 <HAL_GPIO_Init+0x2f0>)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3301      	adds	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f47f aea3 	bne.w	8006858 <HAL_GPIO_Init+0x10>
  }
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40010000 	.word	0x40010000
 8006b28:	48000400 	.word	0x48000400
 8006b2c:	48000800 	.word	0x48000800
 8006b30:	48000c00 	.word	0x48000c00
 8006b34:	48001000 	.word	0x48001000
 8006b38:	40010400 	.word	0x40010400

08006b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	807b      	strh	r3, [r7, #2]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b4c:	787b      	ldrb	r3, [r7, #1]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b52:	887a      	ldrh	r2, [r7, #2]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b58:	e002      	b.n	8006b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b5a:	887a      	ldrh	r2, [r7, #2]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	4013      	ands	r3, r2
 8006b84:	041a      	lsls	r2, r3, #16
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	43d9      	mvns	r1, r3
 8006b8a:	887b      	ldrh	r3, [r7, #2]
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	619a      	str	r2, [r3, #24]
}
 8006b94:	bf00      	nop
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006baa:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d006      	beq.n	8006bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bb6:	4a05      	ldr	r2, [pc, #20]	; (8006bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bb8:	88fb      	ldrh	r3, [r7, #6]
 8006bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fb fd14 	bl	80025ec <HAL_GPIO_EXTI_Callback>
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40010400 	.word	0x40010400

08006bd0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e041      	b.n	8006c66 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006bea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f245 5255 	movw	r2, #21845	; 0x5555
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6852      	ldr	r2, [r2, #4]
 8006bfe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6892      	ldr	r2, [r2, #8]
 8006c08:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006c0a:	f7fc ff8b 	bl	8003b24 <HAL_GetTick>
 8006c0e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c10:	e00f      	b.n	8006c32 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006c12:	f7fc ff87 	bl	8003b24 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b31      	cmp	r3, #49	; 0x31
 8006c1e:	d908      	bls.n	8006c32 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e019      	b.n	8006c66 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e8      	bne.n	8006c12 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691a      	ldr	r2, [r3, #16]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d005      	beq.n	8006c5a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68d2      	ldr	r2, [r2, #12]
 8006c56:	611a      	str	r2, [r3, #16]
 8006c58:	e004      	b.n	8006c64 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
	...

08006c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40007000 	.word	0x40007000

08006cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cba:	d130      	bne.n	8006d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cbc:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc8:	d038      	beq.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cca:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cda:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2232      	movs	r2, #50	; 0x32
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	0c9b      	lsrs	r3, r3, #18
 8006cec:	3301      	adds	r3, #1
 8006cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cf0:	e002      	b.n	8006cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d04:	d102      	bne.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f2      	bne.n	8006cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d18:	d110      	bne.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e00f      	b.n	8006d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d1e:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2a:	d007      	beq.n	8006d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d2c:	4b07      	ldr	r3, [pc, #28]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d34:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40007000 	.word	0x40007000
 8006d50:	20000104 	.word	0x20000104
 8006d54:	431bde83 	.word	0x431bde83

08006d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f000 bc10 	b.w	800758c <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d6c:	4b96      	ldr	r3, [pc, #600]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 030c 	and.w	r3, r3, #12
 8006d74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d76:	4b94      	ldr	r3, [pc, #592]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0303 	and.w	r3, r3, #3
 8006d7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80e4 	beq.w	8006f56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_RCC_OscConfig+0x4c>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	2b0c      	cmp	r3, #12
 8006d98:	f040 808b 	bne.w	8006eb2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	f040 8087 	bne.w	8006eb2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006da4:	4b88      	ldr	r3, [pc, #544]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_RCC_OscConfig+0x64>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e3e7      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1a      	ldr	r2, [r3, #32]
 8006dc0:	4b81      	ldr	r3, [pc, #516]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x7e>
 8006dcc:	4b7e      	ldr	r3, [pc, #504]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd4:	e005      	b.n	8006de2 <HAL_RCC_OscConfig+0x8a>
 8006dd6:	4b7c      	ldr	r3, [pc, #496]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d223      	bcs.n	8006e2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fd42 	bl	8007874 <RCC_SetFlashLatencyFromMSIRange>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e3c8      	b.n	800758c <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dfa:	4b73      	ldr	r3, [pc, #460]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a72      	ldr	r2, [pc, #456]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e00:	f043 0308 	orr.w	r3, r3, #8
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	4b70      	ldr	r3, [pc, #448]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	496d      	ldr	r1, [pc, #436]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e18:	4b6b      	ldr	r3, [pc, #428]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	4968      	ldr	r1, [pc, #416]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	604b      	str	r3, [r1, #4]
 8006e2c:	e025      	b.n	8006e7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e2e:	4b66      	ldr	r3, [pc, #408]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a65      	ldr	r2, [pc, #404]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e34:	f043 0308 	orr.w	r3, r3, #8
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	4960      	ldr	r1, [pc, #384]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e4c:	4b5e      	ldr	r3, [pc, #376]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	495b      	ldr	r1, [pc, #364]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fd02 	bl	8007874 <RCC_SetFlashLatencyFromMSIRange>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e388      	b.n	800758c <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e7a:	f000 fc6f 	bl	800775c <HAL_RCC_GetSysClockFreq>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b51      	ldr	r3, [pc, #324]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	4950      	ldr	r1, [pc, #320]	; (8006fcc <HAL_RCC_OscConfig+0x274>)
 8006e8c:	5ccb      	ldrb	r3, [r1, r3]
 8006e8e:	f003 031f 	and.w	r3, r3, #31
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	4a4e      	ldr	r2, [pc, #312]	; (8006fd0 <HAL_RCC_OscConfig+0x278>)
 8006e98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e9a:	4b4e      	ldr	r3, [pc, #312]	; (8006fd4 <HAL_RCC_OscConfig+0x27c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fc fdf0 	bl	8003a84 <HAL_InitTick>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d052      	beq.n	8006f54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	e36c      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d032      	beq.n	8006f20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006eba:	4b43      	ldr	r3, [pc, #268]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a42      	ldr	r2, [pc, #264]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ec0:	f043 0301 	orr.w	r3, r3, #1
 8006ec4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ec6:	f7fc fe2d 	bl	8003b24 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ecc:	e008      	b.n	8006ee0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ece:	f7fc fe29 	bl	8003b24 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e355      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ee0:	4b39      	ldr	r3, [pc, #228]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0f0      	beq.n	8006ece <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	f043 0308 	orr.w	r3, r3, #8
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	4930      	ldr	r1, [pc, #192]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f0a:	4b2f      	ldr	r3, [pc, #188]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	492b      	ldr	r1, [pc, #172]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	604b      	str	r3, [r1, #4]
 8006f1e:	e01a      	b.n	8006f56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f20:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a28      	ldr	r2, [pc, #160]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f26:	f023 0301 	bic.w	r3, r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f2c:	f7fc fdfa 	bl	8003b24 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f34:	f7fc fdf6 	bl	8003b24 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e322      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006f46:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f0      	bne.n	8006f34 <HAL_RCC_OscConfig+0x1dc>
 8006f52:	e000      	b.n	8006f56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d073      	beq.n	800704a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d005      	beq.n	8006f74 <HAL_RCC_OscConfig+0x21c>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	2b0c      	cmp	r3, #12
 8006f6c:	d10e      	bne.n	8006f8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d10b      	bne.n	8006f8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d063      	beq.n	8007048 <HAL_RCC_OscConfig+0x2f0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d15f      	bne.n	8007048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e2ff      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x24c>
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a0b      	ldr	r2, [pc, #44]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e025      	b.n	8006ff0 <HAL_RCC_OscConfig+0x298>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fac:	d114      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x280>
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a05      	ldr	r2, [pc, #20]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a02      	ldr	r2, [pc, #8]	; (8006fc8 <HAL_RCC_OscConfig+0x270>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e013      	b.n	8006ff0 <HAL_RCC_OscConfig+0x298>
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	0800ba64 	.word	0x0800ba64
 8006fd0:	20000104 	.word	0x20000104
 8006fd4:	20000108 	.word	0x20000108
 8006fd8:	4ba0      	ldr	r3, [pc, #640]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a9f      	ldr	r2, [pc, #636]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	4b9d      	ldr	r3, [pc, #628]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a9c      	ldr	r2, [pc, #624]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8006fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d013      	beq.n	8007020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fc fd94 	bl	8003b24 <HAL_GetTick>
 8006ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007000:	f7fc fd90 	bl	8003b24 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b64      	cmp	r3, #100	; 0x64
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e2bc      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007012:	4b92      	ldr	r3, [pc, #584]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCC_OscConfig+0x2a8>
 800701e:	e014      	b.n	800704a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fc fd80 	bl	8003b24 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007028:	f7fc fd7c 	bl	8003b24 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b64      	cmp	r3, #100	; 0x64
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e2a8      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800703a:	4b88      	ldr	r3, [pc, #544]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0x2d0>
 8007046:	e000      	b.n	800704a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d060      	beq.n	8007118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d005      	beq.n	8007068 <HAL_RCC_OscConfig+0x310>
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d119      	bne.n	8007096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d116      	bne.n	8007096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007068:	4b7c      	ldr	r3, [pc, #496]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <HAL_RCC_OscConfig+0x328>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e285      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007080:	4b76      	ldr	r3, [pc, #472]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	061b      	lsls	r3, r3, #24
 800708e:	4973      	ldr	r1, [pc, #460]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007090:	4313      	orrs	r3, r2
 8007092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007094:	e040      	b.n	8007118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d023      	beq.n	80070e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800709e:	4b6f      	ldr	r3, [pc, #444]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a6e      	ldr	r2, [pc, #440]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070aa:	f7fc fd3b 	bl	8003b24 <HAL_GetTick>
 80070ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070b0:	e008      	b.n	80070c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b2:	f7fc fd37 	bl	8003b24 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d901      	bls.n	80070c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e263      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c4:	4b65      	ldr	r3, [pc, #404]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0f0      	beq.n	80070b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d0:	4b62      	ldr	r3, [pc, #392]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	061b      	lsls	r3, r3, #24
 80070de:	495f      	ldr	r1, [pc, #380]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	604b      	str	r3, [r1, #4]
 80070e4:	e018      	b.n	8007118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e6:	4b5d      	ldr	r3, [pc, #372]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a5c      	ldr	r2, [pc, #368]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80070ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fc fd17 	bl	8003b24 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fc fd13 	bl	8003b24 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e23f      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800710c:	4b53      	ldr	r3, [pc, #332]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f0      	bne.n	80070fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d03c      	beq.n	800719e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01c      	beq.n	8007166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800712c:	4b4b      	ldr	r3, [pc, #300]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800712e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007132:	4a4a      	ldr	r2, [pc, #296]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713c:	f7fc fcf2 	bl	8003b24 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007144:	f7fc fcee 	bl	8003b24 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e21a      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007156:	4b41      	ldr	r3, [pc, #260]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0ef      	beq.n	8007144 <HAL_RCC_OscConfig+0x3ec>
 8007164:	e01b      	b.n	800719e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007166:	4b3d      	ldr	r3, [pc, #244]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800716c:	4a3b      	ldr	r2, [pc, #236]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800716e:	f023 0301 	bic.w	r3, r3, #1
 8007172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007176:	f7fc fcd5 	bl	8003b24 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717e:	f7fc fcd1 	bl	8003b24 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e1fd      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007190:	4b32      	ldr	r3, [pc, #200]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1ef      	bne.n	800717e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 80a6 	beq.w	80072f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ac:	2300      	movs	r3, #0
 80071ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80071b0:	4b2a      	ldr	r3, [pc, #168]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10d      	bne.n	80071d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c0:	4a26      	ldr	r2, [pc, #152]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c6:	6593      	str	r3, [r2, #88]	; 0x58
 80071c8:	4b24      	ldr	r3, [pc, #144]	; (800725c <HAL_RCC_OscConfig+0x504>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d4:	2301      	movs	r3, #1
 80071d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d8:	4b21      	ldr	r3, [pc, #132]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d118      	bne.n	8007216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071e4:	4b1e      	ldr	r3, [pc, #120]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1d      	ldr	r2, [pc, #116]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 80071ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f0:	f7fc fc98 	bl	8003b24 <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f8:	f7fc fc94 	bl	8003b24 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e1c0      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720a:	4b15      	ldr	r3, [pc, #84]	; (8007260 <HAL_RCC_OscConfig+0x508>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d108      	bne.n	8007230 <HAL_RCC_OscConfig+0x4d8>
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007224:	4a0d      	ldr	r2, [pc, #52]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800722e:	e029      	b.n	8007284 <HAL_RCC_OscConfig+0x52c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b05      	cmp	r3, #5
 8007236:	d115      	bne.n	8007264 <HAL_RCC_OscConfig+0x50c>
 8007238:	4b08      	ldr	r3, [pc, #32]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	4a07      	ldr	r2, [pc, #28]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007240:	f043 0304 	orr.w	r3, r3, #4
 8007244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007248:	4b04      	ldr	r3, [pc, #16]	; (800725c <HAL_RCC_OscConfig+0x504>)
 800724a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724e:	4a03      	ldr	r2, [pc, #12]	; (800725c <HAL_RCC_OscConfig+0x504>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007258:	e014      	b.n	8007284 <HAL_RCC_OscConfig+0x52c>
 800725a:	bf00      	nop
 800725c:	40021000 	.word	0x40021000
 8007260:	40007000 	.word	0x40007000
 8007264:	4b9a      	ldr	r3, [pc, #616]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	4a99      	ldr	r2, [pc, #612]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007274:	4b96      	ldr	r3, [pc, #600]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	4a95      	ldr	r2, [pc, #596]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800727c:	f023 0304 	bic.w	r3, r3, #4
 8007280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d016      	beq.n	80072ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728c:	f7fc fc4a 	bl	8003b24 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007292:	e00a      	b.n	80072aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007294:	f7fc fc46 	bl	8003b24 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e170      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0ed      	beq.n	8007294 <HAL_RCC_OscConfig+0x53c>
 80072b8:	e015      	b.n	80072e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ba:	f7fc fc33 	bl	8003b24 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fc fc2f 	bl	8003b24 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e159      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80072d8:	4b7d      	ldr	r3, [pc, #500]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1ed      	bne.n	80072c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072e6:	7ffb      	ldrb	r3, [r7, #31]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d105      	bne.n	80072f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ec:	4b78      	ldr	r3, [pc, #480]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f0:	4a77      	ldr	r2, [pc, #476]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80072f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d03c      	beq.n	800737e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01c      	beq.n	8007346 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800730c:	4b70      	ldr	r3, [pc, #448]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800730e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007312:	4a6f      	ldr	r2, [pc, #444]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731c:	f7fc fc02 	bl	8003b24 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007324:	f7fc fbfe 	bl	8003b24 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e12a      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007336:	4b66      	ldr	r3, [pc, #408]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0ef      	beq.n	8007324 <HAL_RCC_OscConfig+0x5cc>
 8007344:	e01b      	b.n	800737e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007346:	4b62      	ldr	r3, [pc, #392]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800734c:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800734e:	f023 0301 	bic.w	r3, r3, #1
 8007352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007356:	f7fc fbe5 	bl	8003b24 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800735e:	f7fc fbe1 	bl	8003b24 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e10d      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007370:	4b57      	ldr	r3, [pc, #348]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1ef      	bne.n	800735e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8101 	beq.w	800758a <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	2b02      	cmp	r3, #2
 800738e:	f040 80c9 	bne.w	8007524 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007392:	4b4f      	ldr	r3, [pc, #316]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f003 0203 	and.w	r2, r3, #3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d12c      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	3b01      	subs	r3, #1
 80073b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d123      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d11b      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d113      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	3b01      	subs	r3, #1
 80073e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d109      	bne.n	8007400 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	085b      	lsrs	r3, r3, #1
 80073f8:	3b01      	subs	r3, #1
 80073fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d06b      	beq.n	80074d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d062      	beq.n	80074cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007406:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e0ba      	b.n	800758c <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007416:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2d      	ldr	r2, [pc, #180]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800741c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007420:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007422:	f7fc fb7f 	bl	8003b24 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800742a:	f7fc fb7b 	bl	8003b24 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e0a7      	b.n	800758c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800743c:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f0      	bne.n	800742a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007448:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <HAL_RCC_OscConfig+0x77c>)
 800744e:	4013      	ands	r3, r2
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007458:	3a01      	subs	r2, #1
 800745a:	0112      	lsls	r2, r2, #4
 800745c:	4311      	orrs	r1, r2
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007462:	0212      	lsls	r2, r2, #8
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800746a:	0852      	lsrs	r2, r2, #1
 800746c:	3a01      	subs	r2, #1
 800746e:	0552      	lsls	r2, r2, #21
 8007470:	4311      	orrs	r1, r2
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007476:	0852      	lsrs	r2, r2, #1
 8007478:	3a01      	subs	r2, #1
 800747a:	0652      	lsls	r2, r2, #25
 800747c:	4311      	orrs	r1, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007482:	06d2      	lsls	r2, r2, #27
 8007484:	430a      	orrs	r2, r1
 8007486:	4912      	ldr	r1, [pc, #72]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007488:	4313      	orrs	r3, r2
 800748a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800748c:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007496:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007498:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 800749e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074a4:	f7fc fb3e 	bl	8003b24 <HAL_GetTick>
 80074a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074ac:	f7fc fb3a 	bl	8003b24 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e066      	b.n	800758c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074be:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_RCC_OscConfig+0x778>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80074ca:	e05e      	b.n	800758a <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e05d      	b.n	800758c <HAL_RCC_OscConfig+0x834>
 80074d0:	40021000 	.word	0x40021000
 80074d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074d8:	4b2e      	ldr	r3, [pc, #184]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d152      	bne.n	800758a <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80074e4:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a2a      	ldr	r2, [pc, #168]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 80074ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074f0:	4b28      	ldr	r3, [pc, #160]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a27      	ldr	r2, [pc, #156]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 80074f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80074fc:	f7fc fb12 	bl	8003b24 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fc fb0e 	bl	8003b24 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e03a      	b.n	800758c <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007516:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f0      	beq.n	8007504 <HAL_RCC_OscConfig+0x7ac>
 8007522:	e032      	b.n	800758a <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	2b0c      	cmp	r3, #12
 8007528:	d02d      	beq.n	8007586 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752a:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a19      	ldr	r2, [pc, #100]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007534:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007536:	4b17      	ldr	r3, [pc, #92]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d105      	bne.n	800754e <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007542:	4b14      	ldr	r3, [pc, #80]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	4a13      	ldr	r2, [pc, #76]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	4a10      	ldr	r2, [pc, #64]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 8007554:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800755c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755e:	f7fc fae1 	bl	8003b24 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007566:	f7fc fadd 	bl	8003b24 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e009      	b.n	800758c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <HAL_RCC_OscConfig+0x83c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1f0      	bne.n	8007566 <HAL_RCC_OscConfig+0x80e>
 8007584:	e001      	b.n	800758a <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3720      	adds	r7, #32
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	40021000 	.word	0x40021000

08007598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0c8      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075ac:	4b66      	ldr	r3, [pc, #408]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d910      	bls.n	80075dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b63      	ldr	r3, [pc, #396]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 0207 	bic.w	r2, r3, #7
 80075c2:	4961      	ldr	r1, [pc, #388]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ca:	4b5f      	ldr	r3, [pc, #380]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0b0      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d04c      	beq.n	8007682 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d107      	bne.n	8007600 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075f0:	4b56      	ldr	r3, [pc, #344]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d121      	bne.n	8007640 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e09e      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d107      	bne.n	8007618 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007608:	4b50      	ldr	r3, [pc, #320]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d115      	bne.n	8007640 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e092      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d107      	bne.n	8007630 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007620:	4b4a      	ldr	r3, [pc, #296]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d109      	bne.n	8007640 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e086      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007630:	4b46      	ldr	r3, [pc, #280]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e07e      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007640:	4b42      	ldr	r3, [pc, #264]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f023 0203 	bic.w	r2, r3, #3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	493f      	ldr	r1, [pc, #252]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 800764e:	4313      	orrs	r3, r2
 8007650:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007652:	f7fc fa67 	bl	8003b24 <HAL_GetTick>
 8007656:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007658:	e00a      	b.n	8007670 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800765a:	f7fc fa63 	bl	8003b24 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f241 3288 	movw	r2, #5000	; 0x1388
 8007668:	4293      	cmp	r3, r2
 800766a:	d901      	bls.n	8007670 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e066      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007670:	4b36      	ldr	r3, [pc, #216]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 020c 	and.w	r2, r3, #12
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	429a      	cmp	r2, r3
 8007680:	d1eb      	bne.n	800765a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d008      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800768e:	4b2f      	ldr	r3, [pc, #188]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	492c      	ldr	r1, [pc, #176]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076a0:	4b29      	ldr	r3, [pc, #164]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d210      	bcs.n	80076d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ae:	4b26      	ldr	r3, [pc, #152]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 0207 	bic.w	r2, r3, #7
 80076b6:	4924      	ldr	r1, [pc, #144]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	4b22      	ldr	r3, [pc, #136]	; (8007748 <HAL_RCC_ClockConfig+0x1b0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e036      	b.n	800773e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d008      	beq.n	80076ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076dc:	4b1b      	ldr	r3, [pc, #108]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4918      	ldr	r1, [pc, #96]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	4910      	ldr	r1, [pc, #64]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 800770a:	4313      	orrs	r3, r2
 800770c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800770e:	f000 f825 	bl	800775c <HAL_RCC_GetSysClockFreq>
 8007712:	4602      	mov	r2, r0
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <HAL_RCC_ClockConfig+0x1b4>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	490c      	ldr	r1, [pc, #48]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 8007720:	5ccb      	ldrb	r3, [r1, r3]
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	4a0a      	ldr	r2, [pc, #40]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 800772c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800772e:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <HAL_RCC_ClockConfig+0x1c0>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f7fc f9a6 	bl	8003a84 <HAL_InitTick>
 8007738:	4603      	mov	r3, r0
 800773a:	72fb      	strb	r3, [r7, #11]

  return status;
 800773c:	7afb      	ldrb	r3, [r7, #11]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	40022000 	.word	0x40022000
 800774c:	40021000 	.word	0x40021000
 8007750:	0800ba64 	.word	0x0800ba64
 8007754:	20000104 	.word	0x20000104
 8007758:	20000108 	.word	0x20000108

0800775c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	; 0x24
 8007760:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	61fb      	str	r3, [r7, #28]
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800776a:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
 8007772:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007774:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <HAL_RCC_GetSysClockFreq+0x34>
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2b0c      	cmp	r3, #12
 8007788:	d121      	bne.n	80077ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d11e      	bne.n	80077ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007790:	4b34      	ldr	r3, [pc, #208]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d107      	bne.n	80077ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800779c:	4b31      	ldr	r3, [pc, #196]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 800779e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e005      	b.n	80077b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80077ac:	4b2d      	ldr	r3, [pc, #180]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80077b8:	4a2b      	ldr	r2, [pc, #172]	; (8007868 <HAL_RCC_GetSysClockFreq+0x10c>)
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10d      	bne.n	80077e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80077cc:	e00a      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d102      	bne.n	80077da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <HAL_RCC_GetSysClockFreq+0x110>)
 80077d6:	61bb      	str	r3, [r7, #24]
 80077d8:	e004      	b.n	80077e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80077e0:	4b23      	ldr	r3, [pc, #140]	; (8007870 <HAL_RCC_GetSysClockFreq+0x114>)
 80077e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b0c      	cmp	r3, #12
 80077e8:	d134      	bne.n	8007854 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0303 	and.w	r3, r3, #3
 80077f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d003      	beq.n	8007802 <HAL_RCC_GetSysClockFreq+0xa6>
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d003      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0xac>
 8007800:	e005      	b.n	800780e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007802:	4b1a      	ldr	r3, [pc, #104]	; (800786c <HAL_RCC_GetSysClockFreq+0x110>)
 8007804:	617b      	str	r3, [r7, #20]
      break;
 8007806:	e005      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007808:	4b19      	ldr	r3, [pc, #100]	; (8007870 <HAL_RCC_GetSysClockFreq+0x114>)
 800780a:	617b      	str	r3, [r7, #20]
      break;
 800780c:	e002      	b.n	8007814 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	617b      	str	r3, [r7, #20]
      break;
 8007812:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007814:	4b13      	ldr	r3, [pc, #76]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	3301      	adds	r3, #1
 8007820:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007822:	4b10      	ldr	r3, [pc, #64]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	fb03 f202 	mul.w	r2, r3, r2
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <HAL_RCC_GetSysClockFreq+0x108>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	0e5b      	lsrs	r3, r3, #25
 8007840:	f003 0303 	and.w	r3, r3, #3
 8007844:	3301      	adds	r3, #1
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007852:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007854:	69bb      	ldr	r3, [r7, #24]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3724      	adds	r7, #36	; 0x24
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40021000 	.word	0x40021000
 8007868:	0800ba74 	.word	0x0800ba74
 800786c:	00f42400 	.word	0x00f42400
 8007870:	007a1200 	.word	0x007a1200

08007874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800787c:	2300      	movs	r3, #0
 800787e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007880:	4b2a      	ldr	r3, [pc, #168]	; (800792c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800788c:	f7ff fa00 	bl	8006c90 <HAL_PWREx_GetVoltageRange>
 8007890:	6178      	str	r0, [r7, #20]
 8007892:	e014      	b.n	80078be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007898:	4a24      	ldr	r2, [pc, #144]	; (800792c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800789a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789e:	6593      	str	r3, [r2, #88]	; 0x58
 80078a0:	4b22      	ldr	r3, [pc, #136]	; (800792c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80078ac:	f7ff f9f0 	bl	8006c90 <HAL_PWREx_GetVoltageRange>
 80078b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80078b2:	4b1e      	ldr	r3, [pc, #120]	; (800792c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	4a1d      	ldr	r2, [pc, #116]	; (800792c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d10b      	bne.n	80078de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d919      	bls.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2ba0      	cmp	r3, #160	; 0xa0
 80078d0:	d902      	bls.n	80078d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80078d2:	2302      	movs	r3, #2
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	e013      	b.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80078d8:	2301      	movs	r3, #1
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	e010      	b.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d902      	bls.n	80078ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80078e4:	2303      	movs	r3, #3
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	e00a      	b.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d102      	bne.n	80078f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80078f0:	2302      	movs	r3, #2
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	e004      	b.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b70      	cmp	r3, #112	; 0x70
 80078fa:	d101      	bne.n	8007900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80078fc:	2301      	movs	r3, #1
 80078fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f023 0207 	bic.w	r2, r3, #7
 8007908:	4909      	ldr	r1, [pc, #36]	; (8007930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	429a      	cmp	r2, r3
 800791c:	d001      	beq.n	8007922 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40021000 	.word	0x40021000
 8007930:	40022000 	.word	0x40022000

08007934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800793c:	2300      	movs	r3, #0
 800793e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007940:	2300      	movs	r3, #0
 8007942:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794c:	2b00      	cmp	r3, #0
 800794e:	d031      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007958:	d01a      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800795a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800795e:	d814      	bhi.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007968:	d10f      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800796a:	4b5d      	ldr	r3, [pc, #372]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	4a5c      	ldr	r2, [pc, #368]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007976:	e00c      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3304      	adds	r3, #4
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f9f0 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007988:	e003      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	74fb      	strb	r3, [r7, #19]
      break;
 800798e:	e000      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007992:	7cfb      	ldrb	r3, [r7, #19]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10b      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007998:	4b51      	ldr	r3, [pc, #324]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a6:	494e      	ldr	r1, [pc, #312]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079ae:	e001      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	7cfb      	ldrb	r3, [r7, #19]
 80079b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 809e 	beq.w	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079c2:	2300      	movs	r3, #0
 80079c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80079c6:	4b46      	ldr	r3, [pc, #280]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00d      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079dc:	4b40      	ldr	r3, [pc, #256]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e0:	4a3f      	ldr	r2, [pc, #252]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	6593      	str	r3, [r2, #88]	; 0x58
 80079e8:	4b3d      	ldr	r3, [pc, #244]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079f4:	2301      	movs	r3, #1
 80079f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079f8:	4b3a      	ldr	r3, [pc, #232]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a39      	ldr	r2, [pc, #228]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80079fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a04:	f7fc f88e 	bl	8003b24 <HAL_GetTick>
 8007a08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a0a:	e009      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a0c:	f7fc f88a 	bl	8003b24 <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d902      	bls.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	74fb      	strb	r3, [r7, #19]
        break;
 8007a1e:	e005      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a20:	4b30      	ldr	r3, [pc, #192]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0ef      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007a2c:	7cfb      	ldrb	r3, [r7, #19]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d15a      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a32:	4b2b      	ldr	r3, [pc, #172]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01e      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d019      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a5a:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a60:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	4a1b      	ldr	r2, [pc, #108]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a7a:	4a19      	ldr	r2, [pc, #100]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d016      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fc f84a 	bl	8003b24 <HAL_GetTick>
 8007a90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a92:	e00b      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a94:	f7fc f846 	bl	8003b24 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d902      	bls.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	74fb      	strb	r3, [r7, #19]
            break;
 8007aaa:	e006      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007aac:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0ec      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007aba:	7cfb      	ldrb	r3, [r7, #19]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10b      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ac0:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ace:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ad6:	e009      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ad8:	7cfb      	ldrb	r3, [r7, #19]
 8007ada:	74bb      	strb	r3, [r7, #18]
 8007adc:	e006      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007ade:	bf00      	nop
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae8:	7cfb      	ldrb	r3, [r7, #19]
 8007aea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aec:	7c7b      	ldrb	r3, [r7, #17]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d105      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007af2:	4b9b      	ldr	r3, [pc, #620]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	4a9a      	ldr	r2, [pc, #616]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007afc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b0a:	4b95      	ldr	r3, [pc, #596]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b10:	f023 0203 	bic.w	r2, r3, #3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	4991      	ldr	r1, [pc, #580]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b2c:	4b8c      	ldr	r3, [pc, #560]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f023 020c 	bic.w	r2, r3, #12
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	4989      	ldr	r1, [pc, #548]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b4e:	4b84      	ldr	r3, [pc, #528]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	4980      	ldr	r1, [pc, #512]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b70:	4b7b      	ldr	r3, [pc, #492]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	4978      	ldr	r1, [pc, #480]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b92:	4b73      	ldr	r3, [pc, #460]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	496f      	ldr	r1, [pc, #444]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bb4:	4b6a      	ldr	r3, [pc, #424]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	4967      	ldr	r1, [pc, #412]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bd6:	4b62      	ldr	r3, [pc, #392]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	495e      	ldr	r1, [pc, #376]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bf8:	4b59      	ldr	r3, [pc, #356]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	4956      	ldr	r1, [pc, #344]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c1a:	4b51      	ldr	r3, [pc, #324]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	494d      	ldr	r1, [pc, #308]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d028      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c3c:	4b48      	ldr	r3, [pc, #288]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4a:	4945      	ldr	r1, [pc, #276]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5a:	d106      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c5c:	4b40      	ldr	r3, [pc, #256]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4a3f      	ldr	r2, [pc, #252]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c66:	60d3      	str	r3, [r2, #12]
 8007c68:	e011      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c72:	d10c      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	2101      	movs	r1, #1
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f872 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007c84:	7cfb      	ldrb	r3, [r7, #19]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007c8a:	7cfb      	ldrb	r3, [r7, #19]
 8007c8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d028      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c9a:	4b31      	ldr	r3, [pc, #196]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca8:	492d      	ldr	r1, [pc, #180]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb8:	d106      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	4a28      	ldr	r2, [pc, #160]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc4:	60d3      	str	r3, [r2, #12]
 8007cc6:	e011      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd0:	d10c      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f843 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ce2:	7cfb      	ldrb	r3, [r7, #19]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8007ce8:	7cfb      	ldrb	r3, [r7, #19]
 8007cea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01c      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cf8:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d06:	4916      	ldr	r1, [pc, #88]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d16:	d10c      	bne.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f820 	bl	8007d64 <RCCEx_PLLSAI1_Config>
 8007d24:	4603      	mov	r3, r0
 8007d26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d28:	7cfb      	ldrb	r3, [r7, #19]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8007d2e:	7cfb      	ldrb	r3, [r7, #19]
 8007d30:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d3e:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4c:	4904      	ldr	r1, [pc, #16]	; (8007d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40021000 	.word	0x40021000

08007d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d72:	4b74      	ldr	r3, [pc, #464]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007d7e:	4b71      	ldr	r3, [pc, #452]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f003 0203 	and.w	r2, r3, #3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d10d      	bne.n	8007daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
       ||
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d009      	beq.n	8007daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007d96:	4b6b      	ldr	r3, [pc, #428]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
       ||
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d047      	beq.n	8007e3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
 8007dae:	e044      	b.n	8007e3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d018      	beq.n	8007dea <RCCEx_PLLSAI1_Config+0x86>
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d825      	bhi.n	8007e08 <RCCEx_PLLSAI1_Config+0xa4>
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d002      	beq.n	8007dc6 <RCCEx_PLLSAI1_Config+0x62>
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d009      	beq.n	8007dd8 <RCCEx_PLLSAI1_Config+0x74>
 8007dc4:	e020      	b.n	8007e08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007dc6:	4b5f      	ldr	r3, [pc, #380]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11d      	bne.n	8007e0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dd6:	e01a      	b.n	8007e0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007dd8:	4b5a      	ldr	r3, [pc, #360]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d116      	bne.n	8007e12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007de8:	e013      	b.n	8007e12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dea:	4b56      	ldr	r3, [pc, #344]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10f      	bne.n	8007e16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007df6:	4b53      	ldr	r3, [pc, #332]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e06:	e006      	b.n	8007e16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e004      	b.n	8007e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e002      	b.n	8007e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e12:	bf00      	nop
 8007e14:	e000      	b.n	8007e18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10d      	bne.n	8007e3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e1e:	4b49      	ldr	r3, [pc, #292]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	430b      	orrs	r3, r1
 8007e34:	4943      	ldr	r1, [pc, #268]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d17c      	bne.n	8007f3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007e40:	4b40      	ldr	r3, [pc, #256]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a3f      	ldr	r2, [pc, #252]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4c:	f7fb fe6a 	bl	8003b24 <HAL_GetTick>
 8007e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e52:	e009      	b.n	8007e68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e54:	f7fb fe66 	bl	8003b24 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d902      	bls.n	8007e68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	73fb      	strb	r3, [r7, #15]
        break;
 8007e66:	e005      	b.n	8007e74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e68:	4b36      	ldr	r3, [pc, #216]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1ef      	bne.n	8007e54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d15f      	bne.n	8007f3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d110      	bne.n	8007ea2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007e80:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6892      	ldr	r2, [r2, #8]
 8007e90:	0211      	lsls	r1, r2, #8
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68d2      	ldr	r2, [r2, #12]
 8007e96:	06d2      	lsls	r2, r2, #27
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	492a      	ldr	r1, [pc, #168]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	610b      	str	r3, [r1, #16]
 8007ea0:	e027      	b.n	8007ef2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d112      	bne.n	8007ece <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ea8:	4b26      	ldr	r3, [pc, #152]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6892      	ldr	r2, [r2, #8]
 8007eb8:	0211      	lsls	r1, r2, #8
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6912      	ldr	r2, [r2, #16]
 8007ebe:	0852      	lsrs	r2, r2, #1
 8007ec0:	3a01      	subs	r2, #1
 8007ec2:	0552      	lsls	r2, r2, #21
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	491f      	ldr	r1, [pc, #124]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	610b      	str	r3, [r1, #16]
 8007ecc:	e011      	b.n	8007ef2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ece:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007ed6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6892      	ldr	r2, [r2, #8]
 8007ede:	0211      	lsls	r1, r2, #8
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6952      	ldr	r2, [r2, #20]
 8007ee4:	0852      	lsrs	r2, r2, #1
 8007ee6:	3a01      	subs	r2, #1
 8007ee8:	0652      	lsls	r2, r2, #25
 8007eea:	430a      	orrs	r2, r1
 8007eec:	4915      	ldr	r1, [pc, #84]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007ef2:	4b14      	ldr	r3, [pc, #80]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ef8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007efc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efe:	f7fb fe11 	bl	8003b24 <HAL_GetTick>
 8007f02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f04:	e009      	b.n	8007f1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f06:	f7fb fe0d 	bl	8003b24 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d902      	bls.n	8007f1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	73fb      	strb	r3, [r7, #15]
          break;
 8007f18:	e005      	b.n	8007f26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0ef      	beq.n	8007f06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	4903      	ldr	r1, [pc, #12]	; (8007f44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40021000 	.word	0x40021000

08007f48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d06c      	beq.n	8008034 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fb fb80 	bl	8003674 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	22ca      	movs	r2, #202	; 0xca
 8007f82:	625a      	str	r2, [r3, #36]	; 0x24
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2253      	movs	r2, #83	; 0x53
 8007f8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa49 	bl	8008424 <RTC_EnterInitMode>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d14b      	bne.n	8008034 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fae:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6899      	ldr	r1, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	68d2      	ldr	r2, [r2, #12]
 8007fd6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6919      	ldr	r1, [r3, #16]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	041a      	lsls	r2, r3, #16
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fa4d 	bl	800848c <RTC_ExitInitMode>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d11b      	bne.n	8008034 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0203 	bic.w	r2, r2, #3
 800800a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800803e:	b590      	push	{r4, r7, lr}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d101      	bne.n	8008058 <HAL_RTC_SetTime+0x1a>
 8008054:	2302      	movs	r3, #2
 8008056:	e08b      	b.n	8008170 <HAL_RTC_SetTime+0x132>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	22ca      	movs	r2, #202	; 0xca
 800806e:	625a      	str	r2, [r3, #36]	; 0x24
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2253      	movs	r2, #83	; 0x53
 8008076:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f9d3 	bl	8008424 <RTC_EnterInitMode>
 800807e:	4603      	mov	r3, r0
 8008080:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008082:	7cfb      	ldrb	r3, [r7, #19]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d163      	bne.n	8008150 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d126      	bne.n	80080dc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2200      	movs	r2, #0
 80080a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fa2e 	bl	8008508 <RTC_ByteToBcd2>
 80080ac:	4603      	mov	r3, r0
 80080ae:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fa27 	bl	8008508 <RTC_ByteToBcd2>
 80080ba:	4603      	mov	r3, r0
 80080bc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80080be:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	789b      	ldrb	r3, [r3, #2]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fa1f 	bl	8008508 <RTC_ByteToBcd2>
 80080ca:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80080cc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	78db      	ldrb	r3, [r3, #3]
 80080d4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e018      	b.n	800810e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2200      	movs	r2, #0
 80080ee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80080fc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008102:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	78db      	ldrb	r3, [r3, #3]
 8008108:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008118:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800811c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800812c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6899      	ldr	r1, [r3, #8]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	431a      	orrs	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 f9a0 	bl	800848c <RTC_ExitInitMode>
 800814c:	4603      	mov	r3, r0
 800814e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	22ff      	movs	r2, #255	; 0xff
 8008156:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008158:	7cfb      	ldrb	r3, [r7, #19]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800816e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd90      	pop	{r4, r7, pc}

08008178 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80081a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80081aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	0c1b      	lsrs	r3, r3, #16
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	0d9b      	lsrs	r3, r3, #22
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d11a      	bne.n	8008226 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 f9a7 	bl	8008548 <RTC_Bcd2ToByte>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461a      	mov	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	4618      	mov	r0, r3
 8008208:	f000 f99e 	bl	8008548 <RTC_Bcd2ToByte>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	789b      	ldrb	r3, [r3, #2]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f995 	bl	8008548 <RTC_Bcd2ToByte>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008230:	b590      	push	{r4, r7, lr}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_RTC_SetDate+0x1a>
 8008246:	2302      	movs	r3, #2
 8008248:	e075      	b.n	8008336 <HAL_RTC_SetDate+0x106>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10e      	bne.n	800827e <HAL_RTC_SetDate+0x4e>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	f003 0310 	and.w	r3, r3, #16
 8008268:	2b00      	cmp	r3, #0
 800826a:	d008      	beq.n	800827e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	f023 0310 	bic.w	r3, r3, #16
 8008274:	b2db      	uxtb	r3, r3
 8008276:	330a      	adds	r3, #10
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d11c      	bne.n	80082be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	78db      	ldrb	r3, [r3, #3]
 8008288:	4618      	mov	r0, r3
 800828a:	f000 f93d 	bl	8008508 <RTC_ByteToBcd2>
 800828e:	4603      	mov	r3, r0
 8008290:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 f936 	bl	8008508 <RTC_ByteToBcd2>
 800829c:	4603      	mov	r3, r0
 800829e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	789b      	ldrb	r3, [r3, #2]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 f92e 	bl	8008508 <RTC_ByteToBcd2>
 80082ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80082ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80082b8:	4313      	orrs	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e00e      	b.n	80082dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	78db      	ldrb	r3, [r3, #3]
 80082c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80082ca:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80082d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	22ca      	movs	r2, #202	; 0xca
 80082e2:	625a      	str	r2, [r3, #36]	; 0x24
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2253      	movs	r2, #83	; 0x53
 80082ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f899 	bl	8008424 <RTC_EnterInitMode>
 80082f2:	4603      	mov	r3, r0
 80082f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80082f6:	7cfb      	ldrb	r3, [r7, #19]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10c      	bne.n	8008316 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008306:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800830a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f8bd 	bl	800848c <RTC_ExitInitMode>
 8008312:	4603      	mov	r3, r0
 8008314:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	22ff      	movs	r2, #255	; 0xff
 800831c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800831e:	7cfb      	ldrb	r3, [r7, #19]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008334:	7cfb      	ldrb	r3, [r7, #19]
}
 8008336:	4618      	mov	r0, r3
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	bd90      	pop	{r4, r7, pc}

0800833e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008354:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008358:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	b2da      	uxtb	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	b2db      	uxtb	r3, r3
 800836a:	f003 031f 	and.w	r3, r3, #31
 800836e:	b2da      	uxtb	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800837c:	b2da      	uxtb	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	0b5b      	lsrs	r3, r3, #13
 8008386:	b2db      	uxtb	r3, r3
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	b2da      	uxtb	r2, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11a      	bne.n	80083ce <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	78db      	ldrb	r3, [r3, #3]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f8d3 	bl	8008548 <RTC_Bcd2ToByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	461a      	mov	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f8ca 	bl	8008548 <RTC_Bcd2ToByte>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461a      	mov	r2, r3
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	789b      	ldrb	r3, [r3, #2]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f8c1 	bl	8008548 <RTC_Bcd2ToByte>
 80083c6:	4603      	mov	r3, r0
 80083c8:	461a      	mov	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083ee:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80083f0:	f7fb fb98 	bl	8003b24 <HAL_GetTick>
 80083f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083f6:	e009      	b.n	800840c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083f8:	f7fb fb94 	bl	8003b24 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008406:	d901      	bls.n	800840c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e007      	b.n	800841c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0ee      	beq.n	80083f8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b00      	cmp	r3, #0
 800843c:	d120      	bne.n	8008480 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f04f 32ff 	mov.w	r2, #4294967295
 8008446:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008448:	f7fb fb6c 	bl	8003b24 <HAL_GetTick>
 800844c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800844e:	e00d      	b.n	800846c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008450:	f7fb fb68 	bl	8003b24 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800845e:	d905      	bls.n	800846c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2203      	movs	r2, #3
 8008468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d102      	bne.n	8008480 <RTC_EnterInitMode+0x5c>
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d1e7      	bne.n	8008450 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008498:	4b1a      	ldr	r3, [pc, #104]	; (8008504 <RTC_ExitInitMode+0x78>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4a19      	ldr	r2, [pc, #100]	; (8008504 <RTC_ExitInitMode+0x78>)
 800849e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80084a4:	4b17      	ldr	r3, [pc, #92]	; (8008504 <RTC_ExitInitMode+0x78>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f003 0320 	and.w	r3, r3, #32
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10c      	bne.n	80084ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff ff91 	bl	80083d8 <HAL_RTC_WaitForSynchro>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01e      	beq.n	80084fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2203      	movs	r2, #3
 80084c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	73fb      	strb	r3, [r7, #15]
 80084c8:	e017      	b.n	80084fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <RTC_ExitInitMode+0x78>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4a0d      	ldr	r2, [pc, #52]	; (8008504 <RTC_ExitInitMode+0x78>)
 80084d0:	f023 0320 	bic.w	r3, r3, #32
 80084d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff ff7e 	bl	80083d8 <HAL_RTC_WaitForSynchro>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2203      	movs	r2, #3
 80084e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <RTC_ExitInitMode+0x78>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4a04      	ldr	r2, [pc, #16]	; (8008504 <RTC_ExitInitMode+0x78>)
 80084f4:	f043 0320 	orr.w	r3, r3, #32
 80084f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40002800 	.word	0x40002800

08008508 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800851a:	e005      	b.n	8008528 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	3301      	adds	r3, #1
 8008520:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	3b0a      	subs	r3, #10
 8008526:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	2b09      	cmp	r3, #9
 800852c:	d8f6      	bhi.n	800851c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	b2da      	uxtb	r2, r3
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	4313      	orrs	r3, r2
 800853a:	b2db      	uxtb	r3, r3
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	091b      	lsrs	r3, r3, #4
 8008556:	b2db      	uxtb	r3, r3
 8008558:	461a      	mov	r2, r3
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	4413      	add	r3, r2
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	f003 030f 	and.w	r3, r3, #15
 8008568:	b2da      	uxtb	r2, r3
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	4413      	add	r3, r2
 800856e:	b2db      	uxtb	r3, r3
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3350      	adds	r3, #80	; 0x50
 800858e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	009a      	lsls	r2, r3, #2
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	4413      	add	r3, r2
 8008598:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	461a      	mov	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6013      	str	r3, [r2, #0]
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e049      	b.n	8008654 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7fb f87d 	bl	80036d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f000 faaf 	bl	8008b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_TIM_PWM_Start+0x24>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b01      	cmp	r3, #1
 8008676:	bf14      	ite	ne
 8008678:	2301      	movne	r3, #1
 800867a:	2300      	moveq	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	e03c      	b.n	80086fa <HAL_TIM_PWM_Start+0x9e>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b04      	cmp	r3, #4
 8008684:	d109      	bne.n	800869a <HAL_TIM_PWM_Start+0x3e>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b01      	cmp	r3, #1
 8008690:	bf14      	ite	ne
 8008692:	2301      	movne	r3, #1
 8008694:	2300      	moveq	r3, #0
 8008696:	b2db      	uxtb	r3, r3
 8008698:	e02f      	b.n	80086fa <HAL_TIM_PWM_Start+0x9e>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b08      	cmp	r3, #8
 800869e:	d109      	bne.n	80086b4 <HAL_TIM_PWM_Start+0x58>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	bf14      	ite	ne
 80086ac:	2301      	movne	r3, #1
 80086ae:	2300      	moveq	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	e022      	b.n	80086fa <HAL_TIM_PWM_Start+0x9e>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b0c      	cmp	r3, #12
 80086b8:	d109      	bne.n	80086ce <HAL_TIM_PWM_Start+0x72>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	bf14      	ite	ne
 80086c6:	2301      	movne	r3, #1
 80086c8:	2300      	moveq	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	e015      	b.n	80086fa <HAL_TIM_PWM_Start+0x9e>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d109      	bne.n	80086e8 <HAL_TIM_PWM_Start+0x8c>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	bf14      	ite	ne
 80086e0:	2301      	movne	r3, #1
 80086e2:	2300      	moveq	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	e008      	b.n	80086fa <HAL_TIM_PWM_Start+0x9e>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	bf14      	ite	ne
 80086f4:	2301      	movne	r3, #1
 80086f6:	2300      	moveq	r3, #0
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e07e      	b.n	8008800 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <HAL_TIM_PWM_Start+0xb6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008710:	e023      	b.n	800875a <HAL_TIM_PWM_Start+0xfe>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b04      	cmp	r3, #4
 8008716:	d104      	bne.n	8008722 <HAL_TIM_PWM_Start+0xc6>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008720:	e01b      	b.n	800875a <HAL_TIM_PWM_Start+0xfe>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b08      	cmp	r3, #8
 8008726:	d104      	bne.n	8008732 <HAL_TIM_PWM_Start+0xd6>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008730:	e013      	b.n	800875a <HAL_TIM_PWM_Start+0xfe>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b0c      	cmp	r3, #12
 8008736:	d104      	bne.n	8008742 <HAL_TIM_PWM_Start+0xe6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008740:	e00b      	b.n	800875a <HAL_TIM_PWM_Start+0xfe>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b10      	cmp	r3, #16
 8008746:	d104      	bne.n	8008752 <HAL_TIM_PWM_Start+0xf6>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008750:	e003      	b.n	800875a <HAL_TIM_PWM_Start+0xfe>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2201      	movs	r2, #1
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fcd6 	bl	8009114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a26      	ldr	r2, [pc, #152]	; (8008808 <HAL_TIM_PWM_Start+0x1ac>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d009      	beq.n	8008786 <HAL_TIM_PWM_Start+0x12a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a25      	ldr	r2, [pc, #148]	; (800880c <HAL_TIM_PWM_Start+0x1b0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d004      	beq.n	8008786 <HAL_TIM_PWM_Start+0x12a>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a23      	ldr	r2, [pc, #140]	; (8008810 <HAL_TIM_PWM_Start+0x1b4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d101      	bne.n	800878a <HAL_TIM_PWM_Start+0x12e>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <HAL_TIM_PWM_Start+0x130>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800879e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a18      	ldr	r2, [pc, #96]	; (8008808 <HAL_TIM_PWM_Start+0x1ac>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d009      	beq.n	80087be <HAL_TIM_PWM_Start+0x162>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b2:	d004      	beq.n	80087be <HAL_TIM_PWM_Start+0x162>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a14      	ldr	r2, [pc, #80]	; (800880c <HAL_TIM_PWM_Start+0x1b0>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d115      	bne.n	80087ea <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689a      	ldr	r2, [r3, #8]
 80087c4:	4b13      	ldr	r3, [pc, #76]	; (8008814 <HAL_TIM_PWM_Start+0x1b8>)
 80087c6:	4013      	ands	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	d015      	beq.n	80087fc <HAL_TIM_PWM_Start+0x1a0>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d6:	d011      	beq.n	80087fc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e8:	e008      	b.n	80087fc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f042 0201 	orr.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e000      	b.n	80087fe <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40014000 	.word	0x40014000
 8008810:	40014400 	.word	0x40014400
 8008814:	00010007 	.word	0x00010007

08008818 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2200      	movs	r2, #0
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fc72 	bl	8009114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a39      	ldr	r2, [pc, #228]	; (800891c <HAL_TIM_PWM_Stop+0x104>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d009      	beq.n	800884e <HAL_TIM_PWM_Stop+0x36>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a38      	ldr	r2, [pc, #224]	; (8008920 <HAL_TIM_PWM_Stop+0x108>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d004      	beq.n	800884e <HAL_TIM_PWM_Stop+0x36>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a36      	ldr	r2, [pc, #216]	; (8008924 <HAL_TIM_PWM_Stop+0x10c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d101      	bne.n	8008852 <HAL_TIM_PWM_Stop+0x3a>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <HAL_TIM_PWM_Stop+0x3c>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d017      	beq.n	8008888 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a1a      	ldr	r2, [r3, #32]
 800885e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008862:	4013      	ands	r3, r2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10f      	bne.n	8008888 <HAL_TIM_PWM_Stop+0x70>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	f240 4344 	movw	r3, #1092	; 0x444
 8008872:	4013      	ands	r3, r2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d107      	bne.n	8008888 <HAL_TIM_PWM_Stop+0x70>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008886:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6a1a      	ldr	r2, [r3, #32]
 800888e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008892:	4013      	ands	r3, r2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10f      	bne.n	80088b8 <HAL_TIM_PWM_Stop+0xa0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6a1a      	ldr	r2, [r3, #32]
 800889e:	f240 4344 	movw	r3, #1092	; 0x444
 80088a2:	4013      	ands	r3, r2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <HAL_TIM_PWM_Stop+0xa0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0201 	bic.w	r2, r2, #1
 80088b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <HAL_TIM_PWM_Stop+0xb0>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c6:	e023      	b.n	8008910 <HAL_TIM_PWM_Stop+0xf8>
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d104      	bne.n	80088d8 <HAL_TIM_PWM_Stop+0xc0>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d6:	e01b      	b.n	8008910 <HAL_TIM_PWM_Stop+0xf8>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d104      	bne.n	80088e8 <HAL_TIM_PWM_Stop+0xd0>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e6:	e013      	b.n	8008910 <HAL_TIM_PWM_Stop+0xf8>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b0c      	cmp	r3, #12
 80088ec:	d104      	bne.n	80088f8 <HAL_TIM_PWM_Stop+0xe0>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088f6:	e00b      	b.n	8008910 <HAL_TIM_PWM_Stop+0xf8>
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b10      	cmp	r3, #16
 80088fc:	d104      	bne.n	8008908 <HAL_TIM_PWM_Stop+0xf0>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008906:	e003      	b.n	8008910 <HAL_TIM_PWM_Stop+0xf8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40012c00 	.word	0x40012c00
 8008920:	40014000 	.word	0x40014000
 8008924:	40014400 	.word	0x40014400

08008928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008942:	2302      	movs	r3, #2
 8008944:	e0ff      	b.n	8008b46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b14      	cmp	r3, #20
 8008952:	f200 80f0 	bhi.w	8008b36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008956:	a201      	add	r2, pc, #4	; (adr r2, 800895c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	080089b1 	.word	0x080089b1
 8008960:	08008b37 	.word	0x08008b37
 8008964:	08008b37 	.word	0x08008b37
 8008968:	08008b37 	.word	0x08008b37
 800896c:	080089f1 	.word	0x080089f1
 8008970:	08008b37 	.word	0x08008b37
 8008974:	08008b37 	.word	0x08008b37
 8008978:	08008b37 	.word	0x08008b37
 800897c:	08008a33 	.word	0x08008a33
 8008980:	08008b37 	.word	0x08008b37
 8008984:	08008b37 	.word	0x08008b37
 8008988:	08008b37 	.word	0x08008b37
 800898c:	08008a73 	.word	0x08008a73
 8008990:	08008b37 	.word	0x08008b37
 8008994:	08008b37 	.word	0x08008b37
 8008998:	08008b37 	.word	0x08008b37
 800899c:	08008ab5 	.word	0x08008ab5
 80089a0:	08008b37 	.word	0x08008b37
 80089a4:	08008b37 	.word	0x08008b37
 80089a8:	08008b37 	.word	0x08008b37
 80089ac:	08008af5 	.word	0x08008af5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f92e 	bl	8008c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0208 	orr.w	r2, r2, #8
 80089ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0204 	bic.w	r2, r2, #4
 80089da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	619a      	str	r2, [r3, #24]
      break;
 80089ee:	e0a5      	b.n	8008b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68b9      	ldr	r1, [r7, #8]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 f98a 	bl	8008d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6999      	ldr	r1, [r3, #24]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	021a      	lsls	r2, r3, #8
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	619a      	str	r2, [r3, #24]
      break;
 8008a30:	e084      	b.n	8008b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 f9e3 	bl	8008e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f042 0208 	orr.w	r2, r2, #8
 8008a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69da      	ldr	r2, [r3, #28]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0204 	bic.w	r2, r2, #4
 8008a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69d9      	ldr	r1, [r3, #28]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	61da      	str	r2, [r3, #28]
      break;
 8008a70:	e064      	b.n	8008b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fa3b 	bl	8008ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69da      	ldr	r2, [r3, #28]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69d9      	ldr	r1, [r3, #28]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	021a      	lsls	r2, r3, #8
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	61da      	str	r2, [r3, #28]
      break;
 8008ab2:	e043      	b.n	8008b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68b9      	ldr	r1, [r7, #8]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fa78 	bl	8008fb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0208 	orr.w	r2, r2, #8
 8008ace:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0204 	bic.w	r2, r2, #4
 8008ade:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008af2:	e023      	b.n	8008b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fab0 	bl	8009060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	021a      	lsls	r2, r3, #8
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b34:	e002      	b.n	8008b3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop

08008b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <TIM_Base_SetConfig+0xbc>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_Base_SetConfig+0x20>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b6e:	d108      	bne.n	8008b82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a21      	ldr	r2, [pc, #132]	; (8008c0c <TIM_Base_SetConfig+0xbc>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00b      	beq.n	8008ba2 <TIM_Base_SetConfig+0x52>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b90:	d007      	beq.n	8008ba2 <TIM_Base_SetConfig+0x52>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1e      	ldr	r2, [pc, #120]	; (8008c10 <TIM_Base_SetConfig+0xc0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d003      	beq.n	8008ba2 <TIM_Base_SetConfig+0x52>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <TIM_Base_SetConfig+0xc4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d108      	bne.n	8008bb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <TIM_Base_SetConfig+0xbc>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d007      	beq.n	8008bf0 <TIM_Base_SetConfig+0xa0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a0b      	ldr	r2, [pc, #44]	; (8008c10 <TIM_Base_SetConfig+0xc0>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d003      	beq.n	8008bf0 <TIM_Base_SetConfig+0xa0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a0a      	ldr	r2, [pc, #40]	; (8008c14 <TIM_Base_SetConfig+0xc4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d103      	bne.n	8008bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	615a      	str	r2, [r3, #20]
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	40012c00 	.word	0x40012c00
 8008c10:	40014000 	.word	0x40014000
 8008c14:	40014400 	.word	0x40014400

08008c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f023 0201 	bic.w	r2, r3, #1
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0303 	bic.w	r3, r3, #3
 8008c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f023 0302 	bic.w	r3, r3, #2
 8008c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a24      	ldr	r2, [pc, #144]	; (8008d04 <TIM_OC1_SetConfig+0xec>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d007      	beq.n	8008c88 <TIM_OC1_SetConfig+0x70>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a23      	ldr	r2, [pc, #140]	; (8008d08 <TIM_OC1_SetConfig+0xf0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <TIM_OC1_SetConfig+0x70>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a22      	ldr	r2, [pc, #136]	; (8008d0c <TIM_OC1_SetConfig+0xf4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d10c      	bne.n	8008ca2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f023 0308 	bic.w	r3, r3, #8
 8008c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f023 0304 	bic.w	r3, r3, #4
 8008ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a17      	ldr	r2, [pc, #92]	; (8008d04 <TIM_OC1_SetConfig+0xec>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d007      	beq.n	8008cba <TIM_OC1_SetConfig+0xa2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a16      	ldr	r2, [pc, #88]	; (8008d08 <TIM_OC1_SetConfig+0xf0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d003      	beq.n	8008cba <TIM_OC1_SetConfig+0xa2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a15      	ldr	r2, [pc, #84]	; (8008d0c <TIM_OC1_SetConfig+0xf4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d111      	bne.n	8008cde <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	621a      	str	r2, [r3, #32]
}
 8008cf8:	bf00      	nop
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr
 8008d04:	40012c00 	.word	0x40012c00
 8008d08:	40014000 	.word	0x40014000
 8008d0c:	40014400 	.word	0x40014400

08008d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f023 0210 	bic.w	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f023 0320 	bic.w	r3, r3, #32
 8008d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <TIM_OC2_SetConfig+0xe8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d10d      	bne.n	8008d90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <TIM_OC2_SetConfig+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d007      	beq.n	8008da8 <TIM_OC2_SetConfig+0x98>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <TIM_OC2_SetConfig+0xec>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_OC2_SetConfig+0x98>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <TIM_OC2_SetConfig+0xf0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d113      	bne.n	8008dd0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	621a      	str	r2, [r3, #32]
}
 8008dea:	bf00      	nop
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	40014400 	.word	0x40014400

08008e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	021b      	lsls	r3, r3, #8
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a21      	ldr	r2, [pc, #132]	; (8008ee8 <TIM_OC3_SetConfig+0xe4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d10d      	bne.n	8008e82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <TIM_OC3_SetConfig+0xe4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d007      	beq.n	8008e9a <TIM_OC3_SetConfig+0x96>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a17      	ldr	r2, [pc, #92]	; (8008eec <TIM_OC3_SetConfig+0xe8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d003      	beq.n	8008e9a <TIM_OC3_SetConfig+0x96>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a16      	ldr	r2, [pc, #88]	; (8008ef0 <TIM_OC3_SetConfig+0xec>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d113      	bne.n	8008ec2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	011b      	lsls	r3, r3, #4
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	621a      	str	r2, [r3, #32]
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	40012c00 	.word	0x40012c00
 8008eec:	40014000 	.word	0x40014000
 8008ef0:	40014400 	.word	0x40014400

08008ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	031b      	lsls	r3, r3, #12
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a14      	ldr	r2, [pc, #80]	; (8008fa4 <TIM_OC4_SetConfig+0xb0>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d007      	beq.n	8008f68 <TIM_OC4_SetConfig+0x74>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a13      	ldr	r2, [pc, #76]	; (8008fa8 <TIM_OC4_SetConfig+0xb4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d003      	beq.n	8008f68 <TIM_OC4_SetConfig+0x74>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a12      	ldr	r2, [pc, #72]	; (8008fac <TIM_OC4_SetConfig+0xb8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d109      	bne.n	8008f7c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	019b      	lsls	r3, r3, #6
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	40014400 	.word	0x40014400

08008fb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ff4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	041b      	lsls	r3, r3, #16
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a13      	ldr	r2, [pc, #76]	; (8009054 <TIM_OC5_SetConfig+0xa4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d007      	beq.n	800901a <TIM_OC5_SetConfig+0x6a>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a12      	ldr	r2, [pc, #72]	; (8009058 <TIM_OC5_SetConfig+0xa8>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d003      	beq.n	800901a <TIM_OC5_SetConfig+0x6a>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a11      	ldr	r2, [pc, #68]	; (800905c <TIM_OC5_SetConfig+0xac>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d109      	bne.n	800902e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009020:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	621a      	str	r2, [r3, #32]
}
 8009048:	bf00      	nop
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	40012c00 	.word	0x40012c00
 8009058:	40014000 	.word	0x40014000
 800905c:	40014400 	.word	0x40014400

08009060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800908e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	021b      	lsls	r3, r3, #8
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	051b      	lsls	r3, r3, #20
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a14      	ldr	r2, [pc, #80]	; (8009108 <TIM_OC6_SetConfig+0xa8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d007      	beq.n	80090cc <TIM_OC6_SetConfig+0x6c>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a13      	ldr	r2, [pc, #76]	; (800910c <TIM_OC6_SetConfig+0xac>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d003      	beq.n	80090cc <TIM_OC6_SetConfig+0x6c>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a12      	ldr	r2, [pc, #72]	; (8009110 <TIM_OC6_SetConfig+0xb0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d109      	bne.n	80090e0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	695b      	ldr	r3, [r3, #20]
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	621a      	str	r2, [r3, #32]
}
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	40012c00 	.word	0x40012c00
 800910c:	40014000 	.word	0x40014000
 8009110:	40014400 	.word	0x40014400

08009114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f003 031f 	and.w	r3, r3, #31
 8009126:	2201      	movs	r2, #1
 8009128:	fa02 f303 	lsl.w	r3, r2, r3
 800912c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a1a      	ldr	r2, [r3, #32]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	43db      	mvns	r3, r3
 8009136:	401a      	ands	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1a      	ldr	r2, [r3, #32]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 031f 	and.w	r3, r3, #31
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	fa01 f303 	lsl.w	r3, r1, r3
 800914c:	431a      	orrs	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009170:	2b01      	cmp	r3, #1
 8009172:	d101      	bne.n	8009178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009174:	2302      	movs	r3, #2
 8009176:	e04f      	b.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a21      	ldr	r2, [pc, #132]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d108      	bne.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a14      	ldr	r2, [pc, #80]	; (8009224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d009      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e0:	d004      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a10      	ldr	r2, [pc, #64]	; (8009228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d10c      	bne.n	8009206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	40012c00 	.word	0x40012c00
 8009228:	40014000 	.word	0x40014000

0800922c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009244:	2302      	movs	r3, #2
 8009246:	e060      	b.n	800930a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4313      	orrs	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a14      	ldr	r2, [pc, #80]	; (8009318 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d115      	bne.n	80092f8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	051b      	lsls	r3, r3, #20
 80092d8:	4313      	orrs	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40012c00 	.word	0x40012c00

0800931c <__errno>:
 800931c:	4b01      	ldr	r3, [pc, #4]	; (8009324 <__errno+0x8>)
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20000110 	.word	0x20000110

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4d0d      	ldr	r5, [pc, #52]	; (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	; (8009364 <__libc_init_array+0x3c>)
 800932e:	1b64      	subs	r4, r4, r5
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2600      	movs	r6, #0
 8009334:	42a6      	cmp	r6, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4d0b      	ldr	r5, [pc, #44]	; (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	; (800936c <__libc_init_array+0x44>)
 800933c:	f002 fb32 	bl	800b9a4 <_init>
 8009340:	1b64      	subs	r4, r4, r5
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2600      	movs	r6, #0
 8009346:	42a6      	cmp	r6, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009350:	4798      	blx	r3
 8009352:	3601      	adds	r6, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f855 3b04 	ldr.w	r3, [r5], #4
 800935a:	4798      	blx	r3
 800935c:	3601      	adds	r6, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	0800bdac 	.word	0x0800bdac
 8009364:	0800bdac 	.word	0x0800bdac
 8009368:	0800bdac 	.word	0x0800bdac
 800936c:	0800bdb0 	.word	0x0800bdb0

08009370 <localtime>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <localtime+0x30>)
 8009374:	681d      	ldr	r5, [r3, #0]
 8009376:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009378:	4604      	mov	r4, r0
 800937a:	b953      	cbnz	r3, 8009392 <localtime+0x22>
 800937c:	2024      	movs	r0, #36	; 0x24
 800937e:	f000 f909 	bl	8009594 <malloc>
 8009382:	4602      	mov	r2, r0
 8009384:	63e8      	str	r0, [r5, #60]	; 0x3c
 8009386:	b920      	cbnz	r0, 8009392 <localtime+0x22>
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <localtime+0x34>)
 800938a:	4807      	ldr	r0, [pc, #28]	; (80093a8 <localtime+0x38>)
 800938c:	2132      	movs	r1, #50	; 0x32
 800938e:	f000 fc73 	bl	8009c78 <__assert_func>
 8009392:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8009394:	4620      	mov	r0, r4
 8009396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800939a:	f000 b807 	b.w	80093ac <localtime_r>
 800939e:	bf00      	nop
 80093a0:	20000110 	.word	0x20000110
 80093a4:	0800baa8 	.word	0x0800baa8
 80093a8:	0800babf 	.word	0x0800babf

080093ac <localtime_r>:
 80093ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80093b0:	4680      	mov	r8, r0
 80093b2:	9101      	str	r1, [sp, #4]
 80093b4:	f000 fcd4 	bl	8009d60 <__gettzinfo>
 80093b8:	9901      	ldr	r1, [sp, #4]
 80093ba:	4605      	mov	r5, r0
 80093bc:	4640      	mov	r0, r8
 80093be:	f000 fcd3 	bl	8009d68 <gmtime_r>
 80093c2:	6943      	ldr	r3, [r0, #20]
 80093c4:	0799      	lsls	r1, r3, #30
 80093c6:	4604      	mov	r4, r0
 80093c8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80093cc:	d105      	bne.n	80093da <localtime_r+0x2e>
 80093ce:	2264      	movs	r2, #100	; 0x64
 80093d0:	fb97 f3f2 	sdiv	r3, r7, r2
 80093d4:	fb02 7313 	mls	r3, r2, r3, r7
 80093d8:	bb73      	cbnz	r3, 8009438 <localtime_r+0x8c>
 80093da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80093de:	fb97 f6f3 	sdiv	r6, r7, r3
 80093e2:	fb03 7616 	mls	r6, r3, r6, r7
 80093e6:	fab6 f386 	clz	r3, r6
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	4e67      	ldr	r6, [pc, #412]	; (800958c <localtime_r+0x1e0>)
 80093ee:	2230      	movs	r2, #48	; 0x30
 80093f0:	fb02 6603 	mla	r6, r2, r3, r6
 80093f4:	f000 faae 	bl	8009954 <__tz_lock>
 80093f8:	f000 fab8 	bl	800996c <_tzset_unlocked>
 80093fc:	4b64      	ldr	r3, [pc, #400]	; (8009590 <localtime_r+0x1e4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	b34b      	cbz	r3, 8009456 <localtime_r+0xaa>
 8009402:	686b      	ldr	r3, [r5, #4]
 8009404:	42bb      	cmp	r3, r7
 8009406:	d119      	bne.n	800943c <localtime_r+0x90>
 8009408:	682f      	ldr	r7, [r5, #0]
 800940a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800940e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009412:	b9df      	cbnz	r7, 800944c <localtime_r+0xa0>
 8009414:	4282      	cmp	r2, r0
 8009416:	eb73 0101 	sbcs.w	r1, r3, r1
 800941a:	da23      	bge.n	8009464 <localtime_r+0xb8>
 800941c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009420:	4282      	cmp	r2, r0
 8009422:	eb73 0701 	sbcs.w	r7, r3, r1
 8009426:	bfb4      	ite	lt
 8009428:	2701      	movlt	r7, #1
 800942a:	2700      	movge	r7, #0
 800942c:	4282      	cmp	r2, r0
 800942e:	418b      	sbcs	r3, r1
 8009430:	6227      	str	r7, [r4, #32]
 8009432:	db19      	blt.n	8009468 <localtime_r+0xbc>
 8009434:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009436:	e018      	b.n	800946a <localtime_r+0xbe>
 8009438:	2301      	movs	r3, #1
 800943a:	e7d7      	b.n	80093ec <localtime_r+0x40>
 800943c:	4638      	mov	r0, r7
 800943e:	f000 f9df 	bl	8009800 <__tzcalc_limits>
 8009442:	2800      	cmp	r0, #0
 8009444:	d1e0      	bne.n	8009408 <localtime_r+0x5c>
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	e004      	b.n	8009456 <localtime_r+0xaa>
 800944c:	4282      	cmp	r2, r0
 800944e:	eb73 0101 	sbcs.w	r1, r3, r1
 8009452:	da02      	bge.n	800945a <localtime_r+0xae>
 8009454:	2300      	movs	r3, #0
 8009456:	6223      	str	r3, [r4, #32]
 8009458:	e7ec      	b.n	8009434 <localtime_r+0x88>
 800945a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800945e:	4282      	cmp	r2, r0
 8009460:	418b      	sbcs	r3, r1
 8009462:	daf7      	bge.n	8009454 <localtime_r+0xa8>
 8009464:	2301      	movs	r3, #1
 8009466:	6223      	str	r3, [r4, #32]
 8009468:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800946a:	6861      	ldr	r1, [r4, #4]
 800946c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009470:	203c      	movs	r0, #60	; 0x3c
 8009472:	fb93 f5f2 	sdiv	r5, r3, r2
 8009476:	fb02 3315 	mls	r3, r2, r5, r3
 800947a:	fb93 f2f0 	sdiv	r2, r3, r0
 800947e:	fb00 3012 	mls	r0, r0, r2, r3
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	1a89      	subs	r1, r1, r2
 8009486:	68a2      	ldr	r2, [r4, #8]
 8009488:	6061      	str	r1, [r4, #4]
 800948a:	1a1b      	subs	r3, r3, r0
 800948c:	1b52      	subs	r2, r2, r5
 800948e:	2b3b      	cmp	r3, #59	; 0x3b
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	60a2      	str	r2, [r4, #8]
 8009494:	dd35      	ble.n	8009502 <localtime_r+0x156>
 8009496:	3101      	adds	r1, #1
 8009498:	6061      	str	r1, [r4, #4]
 800949a:	3b3c      	subs	r3, #60	; 0x3c
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	2b3b      	cmp	r3, #59	; 0x3b
 80094a2:	dd34      	ble.n	800950e <localtime_r+0x162>
 80094a4:	3201      	adds	r2, #1
 80094a6:	60a2      	str	r2, [r4, #8]
 80094a8:	3b3c      	subs	r3, #60	; 0x3c
 80094aa:	6063      	str	r3, [r4, #4]
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	2b17      	cmp	r3, #23
 80094b0:	dd33      	ble.n	800951a <localtime_r+0x16e>
 80094b2:	69e2      	ldr	r2, [r4, #28]
 80094b4:	3201      	adds	r2, #1
 80094b6:	61e2      	str	r2, [r4, #28]
 80094b8:	69a2      	ldr	r2, [r4, #24]
 80094ba:	3201      	adds	r2, #1
 80094bc:	2a06      	cmp	r2, #6
 80094be:	bfc8      	it	gt
 80094c0:	2200      	movgt	r2, #0
 80094c2:	61a2      	str	r2, [r4, #24]
 80094c4:	68e2      	ldr	r2, [r4, #12]
 80094c6:	3b18      	subs	r3, #24
 80094c8:	3201      	adds	r2, #1
 80094ca:	60a3      	str	r3, [r4, #8]
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	60e2      	str	r2, [r4, #12]
 80094d0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80094d4:	428a      	cmp	r2, r1
 80094d6:	dd0e      	ble.n	80094f6 <localtime_r+0x14a>
 80094d8:	2b0b      	cmp	r3, #11
 80094da:	eba2 0201 	sub.w	r2, r2, r1
 80094de:	60e2      	str	r2, [r4, #12]
 80094e0:	f103 0201 	add.w	r2, r3, #1
 80094e4:	bf09      	itett	eq
 80094e6:	6963      	ldreq	r3, [r4, #20]
 80094e8:	6122      	strne	r2, [r4, #16]
 80094ea:	2200      	moveq	r2, #0
 80094ec:	3301      	addeq	r3, #1
 80094ee:	bf02      	ittt	eq
 80094f0:	6122      	streq	r2, [r4, #16]
 80094f2:	6163      	streq	r3, [r4, #20]
 80094f4:	61e2      	streq	r2, [r4, #28]
 80094f6:	f000 fa33 	bl	8009960 <__tz_unlock>
 80094fa:	4620      	mov	r0, r4
 80094fc:	b002      	add	sp, #8
 80094fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009502:	2b00      	cmp	r3, #0
 8009504:	dacb      	bge.n	800949e <localtime_r+0xf2>
 8009506:	3901      	subs	r1, #1
 8009508:	6061      	str	r1, [r4, #4]
 800950a:	333c      	adds	r3, #60	; 0x3c
 800950c:	e7c6      	b.n	800949c <localtime_r+0xf0>
 800950e:	2b00      	cmp	r3, #0
 8009510:	dacc      	bge.n	80094ac <localtime_r+0x100>
 8009512:	3a01      	subs	r2, #1
 8009514:	60a2      	str	r2, [r4, #8]
 8009516:	333c      	adds	r3, #60	; 0x3c
 8009518:	e7c7      	b.n	80094aa <localtime_r+0xfe>
 800951a:	2b00      	cmp	r3, #0
 800951c:	daeb      	bge.n	80094f6 <localtime_r+0x14a>
 800951e:	69e2      	ldr	r2, [r4, #28]
 8009520:	3a01      	subs	r2, #1
 8009522:	61e2      	str	r2, [r4, #28]
 8009524:	69a2      	ldr	r2, [r4, #24]
 8009526:	3a01      	subs	r2, #1
 8009528:	bf48      	it	mi
 800952a:	2206      	movmi	r2, #6
 800952c:	61a2      	str	r2, [r4, #24]
 800952e:	68e2      	ldr	r2, [r4, #12]
 8009530:	3318      	adds	r3, #24
 8009532:	3a01      	subs	r2, #1
 8009534:	60e2      	str	r2, [r4, #12]
 8009536:	60a3      	str	r3, [r4, #8]
 8009538:	2a00      	cmp	r2, #0
 800953a:	d1dc      	bne.n	80094f6 <localtime_r+0x14a>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	3b01      	subs	r3, #1
 8009540:	d405      	bmi.n	800954e <localtime_r+0x1a2>
 8009542:	6123      	str	r3, [r4, #16]
 8009544:	6923      	ldr	r3, [r4, #16]
 8009546:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800954a:	60e3      	str	r3, [r4, #12]
 800954c:	e7d3      	b.n	80094f6 <localtime_r+0x14a>
 800954e:	230b      	movs	r3, #11
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	6963      	ldr	r3, [r4, #20]
 8009554:	1e5a      	subs	r2, r3, #1
 8009556:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800955a:	6162      	str	r2, [r4, #20]
 800955c:	079a      	lsls	r2, r3, #30
 800955e:	d105      	bne.n	800956c <localtime_r+0x1c0>
 8009560:	2164      	movs	r1, #100	; 0x64
 8009562:	fb93 f2f1 	sdiv	r2, r3, r1
 8009566:	fb01 3212 	mls	r2, r1, r2, r3
 800956a:	b962      	cbnz	r2, 8009586 <localtime_r+0x1da>
 800956c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009570:	fb93 f1f2 	sdiv	r1, r3, r2
 8009574:	fb02 3311 	mls	r3, r2, r1, r3
 8009578:	fab3 f383 	clz	r3, r3
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009582:	61e3      	str	r3, [r4, #28]
 8009584:	e7de      	b.n	8009544 <localtime_r+0x198>
 8009586:	2301      	movs	r3, #1
 8009588:	e7f9      	b.n	800957e <localtime_r+0x1d2>
 800958a:	bf00      	nop
 800958c:	0800bb1c 	.word	0x0800bb1c
 8009590:	20000d00 	.word	0x20000d00

08009594 <malloc>:
 8009594:	4b02      	ldr	r3, [pc, #8]	; (80095a0 <malloc+0xc>)
 8009596:	4601      	mov	r1, r0
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f000 b88d 	b.w	80096b8 <_malloc_r>
 800959e:	bf00      	nop
 80095a0:	20000110 	.word	0x20000110

080095a4 <free>:
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <free+0xc>)
 80095a6:	4601      	mov	r1, r0
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f000 b819 	b.w	80095e0 <_free_r>
 80095ae:	bf00      	nop
 80095b0:	20000110 	.word	0x20000110

080095b4 <memcpy>:
 80095b4:	440a      	add	r2, r1
 80095b6:	4291      	cmp	r1, r2
 80095b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095bc:	d100      	bne.n	80095c0 <memcpy+0xc>
 80095be:	4770      	bx	lr
 80095c0:	b510      	push	{r4, lr}
 80095c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ca:	4291      	cmp	r1, r2
 80095cc:	d1f9      	bne.n	80095c2 <memcpy+0xe>
 80095ce:	bd10      	pop	{r4, pc}

080095d0 <memset>:
 80095d0:	4402      	add	r2, r0
 80095d2:	4603      	mov	r3, r0
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d100      	bne.n	80095da <memset+0xa>
 80095d8:	4770      	bx	lr
 80095da:	f803 1b01 	strb.w	r1, [r3], #1
 80095de:	e7f9      	b.n	80095d4 <memset+0x4>

080095e0 <_free_r>:
 80095e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095e2:	2900      	cmp	r1, #0
 80095e4:	d044      	beq.n	8009670 <_free_r+0x90>
 80095e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ea:	9001      	str	r0, [sp, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f1a1 0404 	sub.w	r4, r1, #4
 80095f2:	bfb8      	it	lt
 80095f4:	18e4      	addlt	r4, r4, r3
 80095f6:	f000 fc69 	bl	8009ecc <__malloc_lock>
 80095fa:	4a1e      	ldr	r2, [pc, #120]	; (8009674 <_free_r+0x94>)
 80095fc:	9801      	ldr	r0, [sp, #4]
 80095fe:	6813      	ldr	r3, [r2, #0]
 8009600:	b933      	cbnz	r3, 8009610 <_free_r+0x30>
 8009602:	6063      	str	r3, [r4, #4]
 8009604:	6014      	str	r4, [r2, #0]
 8009606:	b003      	add	sp, #12
 8009608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800960c:	f000 bc64 	b.w	8009ed8 <__malloc_unlock>
 8009610:	42a3      	cmp	r3, r4
 8009612:	d908      	bls.n	8009626 <_free_r+0x46>
 8009614:	6825      	ldr	r5, [r4, #0]
 8009616:	1961      	adds	r1, r4, r5
 8009618:	428b      	cmp	r3, r1
 800961a:	bf01      	itttt	eq
 800961c:	6819      	ldreq	r1, [r3, #0]
 800961e:	685b      	ldreq	r3, [r3, #4]
 8009620:	1949      	addeq	r1, r1, r5
 8009622:	6021      	streq	r1, [r4, #0]
 8009624:	e7ed      	b.n	8009602 <_free_r+0x22>
 8009626:	461a      	mov	r2, r3
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	b10b      	cbz	r3, 8009630 <_free_r+0x50>
 800962c:	42a3      	cmp	r3, r4
 800962e:	d9fa      	bls.n	8009626 <_free_r+0x46>
 8009630:	6811      	ldr	r1, [r2, #0]
 8009632:	1855      	adds	r5, r2, r1
 8009634:	42a5      	cmp	r5, r4
 8009636:	d10b      	bne.n	8009650 <_free_r+0x70>
 8009638:	6824      	ldr	r4, [r4, #0]
 800963a:	4421      	add	r1, r4
 800963c:	1854      	adds	r4, r2, r1
 800963e:	42a3      	cmp	r3, r4
 8009640:	6011      	str	r1, [r2, #0]
 8009642:	d1e0      	bne.n	8009606 <_free_r+0x26>
 8009644:	681c      	ldr	r4, [r3, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	6053      	str	r3, [r2, #4]
 800964a:	4421      	add	r1, r4
 800964c:	6011      	str	r1, [r2, #0]
 800964e:	e7da      	b.n	8009606 <_free_r+0x26>
 8009650:	d902      	bls.n	8009658 <_free_r+0x78>
 8009652:	230c      	movs	r3, #12
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	e7d6      	b.n	8009606 <_free_r+0x26>
 8009658:	6825      	ldr	r5, [r4, #0]
 800965a:	1961      	adds	r1, r4, r5
 800965c:	428b      	cmp	r3, r1
 800965e:	bf04      	itt	eq
 8009660:	6819      	ldreq	r1, [r3, #0]
 8009662:	685b      	ldreq	r3, [r3, #4]
 8009664:	6063      	str	r3, [r4, #4]
 8009666:	bf04      	itt	eq
 8009668:	1949      	addeq	r1, r1, r5
 800966a:	6021      	streq	r1, [r4, #0]
 800966c:	6054      	str	r4, [r2, #4]
 800966e:	e7ca      	b.n	8009606 <_free_r+0x26>
 8009670:	b003      	add	sp, #12
 8009672:	bd30      	pop	{r4, r5, pc}
 8009674:	20000cdc 	.word	0x20000cdc

08009678 <sbrk_aligned>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4e0e      	ldr	r6, [pc, #56]	; (80096b4 <sbrk_aligned+0x3c>)
 800967c:	460c      	mov	r4, r1
 800967e:	6831      	ldr	r1, [r6, #0]
 8009680:	4605      	mov	r5, r0
 8009682:	b911      	cbnz	r1, 800968a <sbrk_aligned+0x12>
 8009684:	f000 f88c 	bl	80097a0 <_sbrk_r>
 8009688:	6030      	str	r0, [r6, #0]
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f000 f887 	bl	80097a0 <_sbrk_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d00a      	beq.n	80096ac <sbrk_aligned+0x34>
 8009696:	1cc4      	adds	r4, r0, #3
 8009698:	f024 0403 	bic.w	r4, r4, #3
 800969c:	42a0      	cmp	r0, r4
 800969e:	d007      	beq.n	80096b0 <sbrk_aligned+0x38>
 80096a0:	1a21      	subs	r1, r4, r0
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f87c 	bl	80097a0 <_sbrk_r>
 80096a8:	3001      	adds	r0, #1
 80096aa:	d101      	bne.n	80096b0 <sbrk_aligned+0x38>
 80096ac:	f04f 34ff 	mov.w	r4, #4294967295
 80096b0:	4620      	mov	r0, r4
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	20000ce0 	.word	0x20000ce0

080096b8 <_malloc_r>:
 80096b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	1ccd      	adds	r5, r1, #3
 80096be:	f025 0503 	bic.w	r5, r5, #3
 80096c2:	3508      	adds	r5, #8
 80096c4:	2d0c      	cmp	r5, #12
 80096c6:	bf38      	it	cc
 80096c8:	250c      	movcc	r5, #12
 80096ca:	2d00      	cmp	r5, #0
 80096cc:	4607      	mov	r7, r0
 80096ce:	db01      	blt.n	80096d4 <_malloc_r+0x1c>
 80096d0:	42a9      	cmp	r1, r5
 80096d2:	d905      	bls.n	80096e0 <_malloc_r+0x28>
 80096d4:	230c      	movs	r3, #12
 80096d6:	603b      	str	r3, [r7, #0]
 80096d8:	2600      	movs	r6, #0
 80096da:	4630      	mov	r0, r6
 80096dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e0:	4e2e      	ldr	r6, [pc, #184]	; (800979c <_malloc_r+0xe4>)
 80096e2:	f000 fbf3 	bl	8009ecc <__malloc_lock>
 80096e6:	6833      	ldr	r3, [r6, #0]
 80096e8:	461c      	mov	r4, r3
 80096ea:	bb34      	cbnz	r4, 800973a <_malloc_r+0x82>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4638      	mov	r0, r7
 80096f0:	f7ff ffc2 	bl	8009678 <sbrk_aligned>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	4604      	mov	r4, r0
 80096f8:	d14d      	bne.n	8009796 <_malloc_r+0xde>
 80096fa:	6834      	ldr	r4, [r6, #0]
 80096fc:	4626      	mov	r6, r4
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d140      	bne.n	8009784 <_malloc_r+0xcc>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	4631      	mov	r1, r6
 8009706:	4638      	mov	r0, r7
 8009708:	eb04 0803 	add.w	r8, r4, r3
 800970c:	f000 f848 	bl	80097a0 <_sbrk_r>
 8009710:	4580      	cmp	r8, r0
 8009712:	d13a      	bne.n	800978a <_malloc_r+0xd2>
 8009714:	6821      	ldr	r1, [r4, #0]
 8009716:	3503      	adds	r5, #3
 8009718:	1a6d      	subs	r5, r5, r1
 800971a:	f025 0503 	bic.w	r5, r5, #3
 800971e:	3508      	adds	r5, #8
 8009720:	2d0c      	cmp	r5, #12
 8009722:	bf38      	it	cc
 8009724:	250c      	movcc	r5, #12
 8009726:	4629      	mov	r1, r5
 8009728:	4638      	mov	r0, r7
 800972a:	f7ff ffa5 	bl	8009678 <sbrk_aligned>
 800972e:	3001      	adds	r0, #1
 8009730:	d02b      	beq.n	800978a <_malloc_r+0xd2>
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	442b      	add	r3, r5
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	e00e      	b.n	8009758 <_malloc_r+0xa0>
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	1b52      	subs	r2, r2, r5
 800973e:	d41e      	bmi.n	800977e <_malloc_r+0xc6>
 8009740:	2a0b      	cmp	r2, #11
 8009742:	d916      	bls.n	8009772 <_malloc_r+0xba>
 8009744:	1961      	adds	r1, r4, r5
 8009746:	42a3      	cmp	r3, r4
 8009748:	6025      	str	r5, [r4, #0]
 800974a:	bf18      	it	ne
 800974c:	6059      	strne	r1, [r3, #4]
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	bf08      	it	eq
 8009752:	6031      	streq	r1, [r6, #0]
 8009754:	5162      	str	r2, [r4, r5]
 8009756:	604b      	str	r3, [r1, #4]
 8009758:	4638      	mov	r0, r7
 800975a:	f104 060b 	add.w	r6, r4, #11
 800975e:	f000 fbbb 	bl	8009ed8 <__malloc_unlock>
 8009762:	f026 0607 	bic.w	r6, r6, #7
 8009766:	1d23      	adds	r3, r4, #4
 8009768:	1af2      	subs	r2, r6, r3
 800976a:	d0b6      	beq.n	80096da <_malloc_r+0x22>
 800976c:	1b9b      	subs	r3, r3, r6
 800976e:	50a3      	str	r3, [r4, r2]
 8009770:	e7b3      	b.n	80096da <_malloc_r+0x22>
 8009772:	6862      	ldr	r2, [r4, #4]
 8009774:	42a3      	cmp	r3, r4
 8009776:	bf0c      	ite	eq
 8009778:	6032      	streq	r2, [r6, #0]
 800977a:	605a      	strne	r2, [r3, #4]
 800977c:	e7ec      	b.n	8009758 <_malloc_r+0xa0>
 800977e:	4623      	mov	r3, r4
 8009780:	6864      	ldr	r4, [r4, #4]
 8009782:	e7b2      	b.n	80096ea <_malloc_r+0x32>
 8009784:	4634      	mov	r4, r6
 8009786:	6876      	ldr	r6, [r6, #4]
 8009788:	e7b9      	b.n	80096fe <_malloc_r+0x46>
 800978a:	230c      	movs	r3, #12
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	4638      	mov	r0, r7
 8009790:	f000 fba2 	bl	8009ed8 <__malloc_unlock>
 8009794:	e7a1      	b.n	80096da <_malloc_r+0x22>
 8009796:	6025      	str	r5, [r4, #0]
 8009798:	e7de      	b.n	8009758 <_malloc_r+0xa0>
 800979a:	bf00      	nop
 800979c:	20000cdc 	.word	0x20000cdc

080097a0 <_sbrk_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d06      	ldr	r5, [pc, #24]	; (80097bc <_sbrk_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7fa f8e0 	bl	8003970 <_sbrk>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_sbrk_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_sbrk_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000d10 	.word	0x20000d10

080097c0 <siprintf>:
 80097c0:	b40e      	push	{r1, r2, r3}
 80097c2:	b500      	push	{lr}
 80097c4:	b09c      	sub	sp, #112	; 0x70
 80097c6:	ab1d      	add	r3, sp, #116	; 0x74
 80097c8:	9002      	str	r0, [sp, #8]
 80097ca:	9006      	str	r0, [sp, #24]
 80097cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097d0:	4809      	ldr	r0, [pc, #36]	; (80097f8 <siprintf+0x38>)
 80097d2:	9107      	str	r1, [sp, #28]
 80097d4:	9104      	str	r1, [sp, #16]
 80097d6:	4909      	ldr	r1, [pc, #36]	; (80097fc <siprintf+0x3c>)
 80097d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097dc:	9105      	str	r1, [sp, #20]
 80097de:	6800      	ldr	r0, [r0, #0]
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	a902      	add	r1, sp, #8
 80097e4:	f000 fbda 	bl	8009f9c <_svfiprintf_r>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
 80097ee:	b01c      	add	sp, #112	; 0x70
 80097f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097f4:	b003      	add	sp, #12
 80097f6:	4770      	bx	lr
 80097f8:	20000110 	.word	0x20000110
 80097fc:	ffff0208 	.word	0xffff0208

08009800 <__tzcalc_limits>:
 8009800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	4605      	mov	r5, r0
 8009806:	f000 faab 	bl	8009d60 <__gettzinfo>
 800980a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800980e:	429d      	cmp	r5, r3
 8009810:	f340 8099 	ble.w	8009946 <__tzcalc_limits+0x146>
 8009814:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009818:	18ac      	adds	r4, r5, r2
 800981a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800981e:	f240 126d 	movw	r2, #365	; 0x16d
 8009822:	10a4      	asrs	r4, r4, #2
 8009824:	fb02 4403 	mla	r4, r2, r3, r4
 8009828:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800982c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009830:	fb93 f3f2 	sdiv	r3, r3, r2
 8009834:	441c      	add	r4, r3
 8009836:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800983a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800983e:	fb95 fcf3 	sdiv	ip, r5, r3
 8009842:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009846:	186a      	adds	r2, r5, r1
 8009848:	fabc f68c 	clz	r6, ip
 800984c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009850:	f005 0303 	and.w	r3, r5, #3
 8009854:	4414      	add	r4, r2
 8009856:	2264      	movs	r2, #100	; 0x64
 8009858:	6045      	str	r5, [r0, #4]
 800985a:	fb95 f7f2 	sdiv	r7, r5, r2
 800985e:	0976      	lsrs	r6, r6, #5
 8009860:	fb02 5717 	mls	r7, r2, r7, r5
 8009864:	4601      	mov	r1, r0
 8009866:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	f04f 0a07 	mov.w	sl, #7
 8009870:	7a0d      	ldrb	r5, [r1, #8]
 8009872:	694b      	ldr	r3, [r1, #20]
 8009874:	2d4a      	cmp	r5, #74	; 0x4a
 8009876:	d12d      	bne.n	80098d4 <__tzcalc_limits+0xd4>
 8009878:	9a00      	ldr	r2, [sp, #0]
 800987a:	eb04 0e03 	add.w	lr, r4, r3
 800987e:	b902      	cbnz	r2, 8009882 <__tzcalc_limits+0x82>
 8009880:	b917      	cbnz	r7, 8009888 <__tzcalc_limits+0x88>
 8009882:	f1bc 0f00 	cmp.w	ip, #0
 8009886:	d123      	bne.n	80098d0 <__tzcalc_limits+0xd0>
 8009888:	2b3b      	cmp	r3, #59	; 0x3b
 800988a:	bfd4      	ite	le
 800988c:	2300      	movle	r3, #0
 800988e:	2301      	movgt	r3, #1
 8009890:	4473      	add	r3, lr
 8009892:	3b01      	subs	r3, #1
 8009894:	698d      	ldr	r5, [r1, #24]
 8009896:	4a2d      	ldr	r2, [pc, #180]	; (800994c <__tzcalc_limits+0x14c>)
 8009898:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800989c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80098a0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80098a2:	18ed      	adds	r5, r5, r3
 80098a4:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80098a8:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80098ac:	3128      	adds	r1, #40	; 0x28
 80098ae:	458b      	cmp	fp, r1
 80098b0:	d1de      	bne.n	8009870 <__tzcalc_limits+0x70>
 80098b2:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80098b6:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80098ba:	428c      	cmp	r4, r1
 80098bc:	eb72 0303 	sbcs.w	r3, r2, r3
 80098c0:	bfb4      	ite	lt
 80098c2:	2301      	movlt	r3, #1
 80098c4:	2300      	movge	r3, #0
 80098c6:	6003      	str	r3, [r0, #0]
 80098c8:	2001      	movs	r0, #1
 80098ca:	b003      	add	sp, #12
 80098cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	2300      	movs	r3, #0
 80098d2:	e7dd      	b.n	8009890 <__tzcalc_limits+0x90>
 80098d4:	2d44      	cmp	r5, #68	; 0x44
 80098d6:	d101      	bne.n	80098dc <__tzcalc_limits+0xdc>
 80098d8:	4423      	add	r3, r4
 80098da:	e7db      	b.n	8009894 <__tzcalc_limits+0x94>
 80098dc:	9a00      	ldr	r2, [sp, #0]
 80098de:	bb62      	cbnz	r2, 800993a <__tzcalc_limits+0x13a>
 80098e0:	2f00      	cmp	r7, #0
 80098e2:	bf0c      	ite	eq
 80098e4:	4635      	moveq	r5, r6
 80098e6:	2501      	movne	r5, #1
 80098e8:	68ca      	ldr	r2, [r1, #12]
 80098ea:	9201      	str	r2, [sp, #4]
 80098ec:	4a18      	ldr	r2, [pc, #96]	; (8009950 <__tzcalc_limits+0x150>)
 80098ee:	f04f 0930 	mov.w	r9, #48	; 0x30
 80098f2:	fb09 2505 	mla	r5, r9, r5, r2
 80098f6:	46a6      	mov	lr, r4
 80098f8:	f04f 0800 	mov.w	r8, #0
 80098fc:	3d04      	subs	r5, #4
 80098fe:	9a01      	ldr	r2, [sp, #4]
 8009900:	f108 0801 	add.w	r8, r8, #1
 8009904:	4542      	cmp	r2, r8
 8009906:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800990a:	dc18      	bgt.n	800993e <__tzcalc_limits+0x13e>
 800990c:	f10e 0504 	add.w	r5, lr, #4
 8009910:	fb95 f8fa 	sdiv	r8, r5, sl
 8009914:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009918:	eba5 0808 	sub.w	r8, r5, r8
 800991c:	ebb3 0808 	subs.w	r8, r3, r8
 8009920:	690b      	ldr	r3, [r1, #16]
 8009922:	f103 33ff 	add.w	r3, r3, #4294967295
 8009926:	bf48      	it	mi
 8009928:	f108 0807 	addmi.w	r8, r8, #7
 800992c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009930:	4443      	add	r3, r8
 8009932:	454b      	cmp	r3, r9
 8009934:	da05      	bge.n	8009942 <__tzcalc_limits+0x142>
 8009936:	4473      	add	r3, lr
 8009938:	e7ac      	b.n	8009894 <__tzcalc_limits+0x94>
 800993a:	4635      	mov	r5, r6
 800993c:	e7d4      	b.n	80098e8 <__tzcalc_limits+0xe8>
 800993e:	44ce      	add	lr, r9
 8009940:	e7dd      	b.n	80098fe <__tzcalc_limits+0xfe>
 8009942:	3b07      	subs	r3, #7
 8009944:	e7f5      	b.n	8009932 <__tzcalc_limits+0x132>
 8009946:	2000      	movs	r0, #0
 8009948:	e7bf      	b.n	80098ca <__tzcalc_limits+0xca>
 800994a:	bf00      	nop
 800994c:	00015180 	.word	0x00015180
 8009950:	0800bb1c 	.word	0x0800bb1c

08009954 <__tz_lock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__tz_lock+0x8>)
 8009956:	f000 bab4 	b.w	8009ec2 <__retarget_lock_acquire>
 800995a:	bf00      	nop
 800995c:	20000d0c 	.word	0x20000d0c

08009960 <__tz_unlock>:
 8009960:	4801      	ldr	r0, [pc, #4]	; (8009968 <__tz_unlock+0x8>)
 8009962:	f000 bab0 	b.w	8009ec6 <__retarget_lock_release>
 8009966:	bf00      	nop
 8009968:	20000d0c 	.word	0x20000d0c

0800996c <_tzset_unlocked>:
 800996c:	4b01      	ldr	r3, [pc, #4]	; (8009974 <_tzset_unlocked+0x8>)
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	f000 b802 	b.w	8009978 <_tzset_unlocked_r>
 8009974:	20000110 	.word	0x20000110

08009978 <_tzset_unlocked_r>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	b08d      	sub	sp, #52	; 0x34
 800997e:	4607      	mov	r7, r0
 8009980:	f000 f9ee 	bl	8009d60 <__gettzinfo>
 8009984:	49b0      	ldr	r1, [pc, #704]	; (8009c48 <_tzset_unlocked_r+0x2d0>)
 8009986:	4eb1      	ldr	r6, [pc, #708]	; (8009c4c <_tzset_unlocked_r+0x2d4>)
 8009988:	4605      	mov	r5, r0
 800998a:	4638      	mov	r0, r7
 800998c:	f000 f9e0 	bl	8009d50 <_getenv_r>
 8009990:	4604      	mov	r4, r0
 8009992:	b970      	cbnz	r0, 80099b2 <_tzset_unlocked_r+0x3a>
 8009994:	4bae      	ldr	r3, [pc, #696]	; (8009c50 <_tzset_unlocked_r+0x2d8>)
 8009996:	4aaf      	ldr	r2, [pc, #700]	; (8009c54 <_tzset_unlocked_r+0x2dc>)
 8009998:	6018      	str	r0, [r3, #0]
 800999a:	4baf      	ldr	r3, [pc, #700]	; (8009c58 <_tzset_unlocked_r+0x2e0>)
 800999c:	6018      	str	r0, [r3, #0]
 800999e:	4baf      	ldr	r3, [pc, #700]	; (8009c5c <_tzset_unlocked_r+0x2e4>)
 80099a0:	6830      	ldr	r0, [r6, #0]
 80099a2:	e9c3 2200 	strd	r2, r2, [r3]
 80099a6:	f7ff fdfd 	bl	80095a4 <free>
 80099aa:	6034      	str	r4, [r6, #0]
 80099ac:	b00d      	add	sp, #52	; 0x34
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	6831      	ldr	r1, [r6, #0]
 80099b4:	2900      	cmp	r1, #0
 80099b6:	d162      	bne.n	8009a7e <_tzset_unlocked_r+0x106>
 80099b8:	6830      	ldr	r0, [r6, #0]
 80099ba:	f7ff fdf3 	bl	80095a4 <free>
 80099be:	4620      	mov	r0, r4
 80099c0:	f7f6 fc06 	bl	80001d0 <strlen>
 80099c4:	1c41      	adds	r1, r0, #1
 80099c6:	4638      	mov	r0, r7
 80099c8:	f7ff fe76 	bl	80096b8 <_malloc_r>
 80099cc:	6030      	str	r0, [r6, #0]
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d15a      	bne.n	8009a88 <_tzset_unlocked_r+0x110>
 80099d2:	7823      	ldrb	r3, [r4, #0]
 80099d4:	4aa2      	ldr	r2, [pc, #648]	; (8009c60 <_tzset_unlocked_r+0x2e8>)
 80099d6:	49a3      	ldr	r1, [pc, #652]	; (8009c64 <_tzset_unlocked_r+0x2ec>)
 80099d8:	2b3a      	cmp	r3, #58	; 0x3a
 80099da:	bf08      	it	eq
 80099dc:	3401      	addeq	r4, #1
 80099de:	ae0a      	add	r6, sp, #40	; 0x28
 80099e0:	4633      	mov	r3, r6
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 fec8 	bl	800a778 <siscanf>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dddf      	ble.n	80099ac <_tzset_unlocked_r+0x34>
 80099ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ee:	18e7      	adds	r7, r4, r3
 80099f0:	5ce3      	ldrb	r3, [r4, r3]
 80099f2:	2b2d      	cmp	r3, #45	; 0x2d
 80099f4:	d14c      	bne.n	8009a90 <_tzset_unlocked_r+0x118>
 80099f6:	3701      	adds	r7, #1
 80099f8:	f04f 38ff 	mov.w	r8, #4294967295
 80099fc:	f10d 0a20 	add.w	sl, sp, #32
 8009a00:	f10d 0b1e 	add.w	fp, sp, #30
 8009a04:	2400      	movs	r4, #0
 8009a06:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009a0a:	4997      	ldr	r1, [pc, #604]	; (8009c68 <_tzset_unlocked_r+0x2f0>)
 8009a0c:	9603      	str	r6, [sp, #12]
 8009a0e:	f8cd b000 	str.w	fp, [sp]
 8009a12:	4633      	mov	r3, r6
 8009a14:	aa07      	add	r2, sp, #28
 8009a16:	4638      	mov	r0, r7
 8009a18:	f8ad 401e 	strh.w	r4, [sp, #30]
 8009a1c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009a20:	f000 feaa 	bl	800a778 <siscanf>
 8009a24:	42a0      	cmp	r0, r4
 8009a26:	ddc1      	ble.n	80099ac <_tzset_unlocked_r+0x34>
 8009a28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009a2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009a30:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009c74 <_tzset_unlocked_r+0x2fc>
 8009a34:	213c      	movs	r1, #60	; 0x3c
 8009a36:	fb01 3302 	mla	r3, r1, r2, r3
 8009a3a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009a3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009a42:	fb01 3302 	mla	r3, r1, r2, r3
 8009a46:	fb08 f303 	mul.w	r3, r8, r3
 8009a4a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8009c5c <_tzset_unlocked_r+0x2e4>
 8009a4e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009a50:	4b83      	ldr	r3, [pc, #524]	; (8009c60 <_tzset_unlocked_r+0x2e8>)
 8009a52:	f8c8 3000 	str.w	r3, [r8]
 8009a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a58:	4982      	ldr	r1, [pc, #520]	; (8009c64 <_tzset_unlocked_r+0x2ec>)
 8009a5a:	441f      	add	r7, r3
 8009a5c:	464a      	mov	r2, r9
 8009a5e:	4633      	mov	r3, r6
 8009a60:	4638      	mov	r0, r7
 8009a62:	f000 fe89 	bl	800a778 <siscanf>
 8009a66:	42a0      	cmp	r0, r4
 8009a68:	dc18      	bgt.n	8009a9c <_tzset_unlocked_r+0x124>
 8009a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a72:	4b77      	ldr	r3, [pc, #476]	; (8009c50 <_tzset_unlocked_r+0x2d8>)
 8009a74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	4b77      	ldr	r3, [pc, #476]	; (8009c58 <_tzset_unlocked_r+0x2e0>)
 8009a7a:	601c      	str	r4, [r3, #0]
 8009a7c:	e796      	b.n	80099ac <_tzset_unlocked_r+0x34>
 8009a7e:	f7f6 fbaf 	bl	80001e0 <strcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d198      	bne.n	80099b8 <_tzset_unlocked_r+0x40>
 8009a86:	e791      	b.n	80099ac <_tzset_unlocked_r+0x34>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	f000 fee6 	bl	800a85a <strcpy>
 8009a8e:	e7a0      	b.n	80099d2 <_tzset_unlocked_r+0x5a>
 8009a90:	2b2b      	cmp	r3, #43	; 0x2b
 8009a92:	bf08      	it	eq
 8009a94:	3701      	addeq	r7, #1
 8009a96:	f04f 0801 	mov.w	r8, #1
 8009a9a:	e7af      	b.n	80099fc <_tzset_unlocked_r+0x84>
 8009a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9e:	f8c8 9004 	str.w	r9, [r8, #4]
 8009aa2:	18fc      	adds	r4, r7, r3
 8009aa4:	5cfb      	ldrb	r3, [r7, r3]
 8009aa6:	2b2d      	cmp	r3, #45	; 0x2d
 8009aa8:	f040 808b 	bne.w	8009bc2 <_tzset_unlocked_r+0x24a>
 8009aac:	3401      	adds	r4, #1
 8009aae:	f04f 37ff 	mov.w	r7, #4294967295
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009ab8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009abc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ac2:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009ac6:	e9cd b600 	strd	fp, r6, [sp]
 8009aca:	4967      	ldr	r1, [pc, #412]	; (8009c68 <_tzset_unlocked_r+0x2f0>)
 8009acc:	4633      	mov	r3, r6
 8009ace:	aa07      	add	r2, sp, #28
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fe51 	bl	800a778 <siscanf>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	dc78      	bgt.n	8009bcc <_tzset_unlocked_r+0x254>
 8009ada:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009adc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009ae0:	652b      	str	r3, [r5, #80]	; 0x50
 8009ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae4:	462f      	mov	r7, r5
 8009ae6:	441c      	add	r4, r3
 8009ae8:	f04f 0900 	mov.w	r9, #0
 8009aec:	7823      	ldrb	r3, [r4, #0]
 8009aee:	2b2c      	cmp	r3, #44	; 0x2c
 8009af0:	bf08      	it	eq
 8009af2:	3401      	addeq	r4, #1
 8009af4:	f894 8000 	ldrb.w	r8, [r4]
 8009af8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009afc:	d178      	bne.n	8009bf0 <_tzset_unlocked_r+0x278>
 8009afe:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009b02:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009b06:	ab09      	add	r3, sp, #36	; 0x24
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4958      	ldr	r1, [pc, #352]	; (8009c6c <_tzset_unlocked_r+0x2f4>)
 8009b0c:	9603      	str	r6, [sp, #12]
 8009b0e:	4633      	mov	r3, r6
 8009b10:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009b14:	4620      	mov	r0, r4
 8009b16:	f000 fe2f 	bl	800a778 <siscanf>
 8009b1a:	2803      	cmp	r0, #3
 8009b1c:	f47f af46 	bne.w	80099ac <_tzset_unlocked_r+0x34>
 8009b20:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009b24:	1e4b      	subs	r3, r1, #1
 8009b26:	2b0b      	cmp	r3, #11
 8009b28:	f63f af40 	bhi.w	80099ac <_tzset_unlocked_r+0x34>
 8009b2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009b30:	1e53      	subs	r3, r2, #1
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	f63f af3a 	bhi.w	80099ac <_tzset_unlocked_r+0x34>
 8009b38:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	f63f af35 	bhi.w	80099ac <_tzset_unlocked_r+0x34>
 8009b42:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009b46:	f887 8008 	strb.w	r8, [r7, #8]
 8009b4a:	617b      	str	r3, [r7, #20]
 8009b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4e:	eb04 0803 	add.w	r8, r4, r3
 8009b52:	2302      	movs	r3, #2
 8009b54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009b5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009b62:	930a      	str	r3, [sp, #40]	; 0x28
 8009b64:	f898 3000 	ldrb.w	r3, [r8]
 8009b68:	2b2f      	cmp	r3, #47	; 0x2f
 8009b6a:	d109      	bne.n	8009b80 <_tzset_unlocked_r+0x208>
 8009b6c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009b70:	e9cd b600 	strd	fp, r6, [sp]
 8009b74:	493e      	ldr	r1, [pc, #248]	; (8009c70 <_tzset_unlocked_r+0x2f8>)
 8009b76:	4633      	mov	r3, r6
 8009b78:	aa07      	add	r2, sp, #28
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f000 fdfc 	bl	800a778 <siscanf>
 8009b80:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009b84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009b88:	213c      	movs	r1, #60	; 0x3c
 8009b8a:	fb01 3302 	mla	r3, r1, r2, r3
 8009b8e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009b92:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009b96:	fb01 3302 	mla	r3, r1, r2, r3
 8009b9a:	61bb      	str	r3, [r7, #24]
 8009b9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b9e:	3728      	adds	r7, #40	; 0x28
 8009ba0:	4444      	add	r4, r8
 8009ba2:	f1b9 0f00 	cmp.w	r9, #0
 8009ba6:	d020      	beq.n	8009bea <_tzset_unlocked_r+0x272>
 8009ba8:	6868      	ldr	r0, [r5, #4]
 8009baa:	f7ff fe29 	bl	8009800 <__tzcalc_limits>
 8009bae:	4b28      	ldr	r3, [pc, #160]	; (8009c50 <_tzset_unlocked_r+0x2d8>)
 8009bb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009bb6:	1a9b      	subs	r3, r3, r2
 8009bb8:	4a27      	ldr	r2, [pc, #156]	; (8009c58 <_tzset_unlocked_r+0x2e0>)
 8009bba:	bf18      	it	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	e6f4      	b.n	80099ac <_tzset_unlocked_r+0x34>
 8009bc2:	2b2b      	cmp	r3, #43	; 0x2b
 8009bc4:	bf08      	it	eq
 8009bc6:	3401      	addeq	r4, #1
 8009bc8:	2701      	movs	r7, #1
 8009bca:	e772      	b.n	8009ab2 <_tzset_unlocked_r+0x13a>
 8009bcc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009bd0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009bd4:	213c      	movs	r1, #60	; 0x3c
 8009bd6:	fb01 3302 	mla	r3, r1, r2, r3
 8009bda:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009bde:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009be2:	fb01 3302 	mla	r3, r1, r2, r3
 8009be6:	437b      	muls	r3, r7
 8009be8:	e77a      	b.n	8009ae0 <_tzset_unlocked_r+0x168>
 8009bea:	f04f 0901 	mov.w	r9, #1
 8009bee:	e77d      	b.n	8009aec <_tzset_unlocked_r+0x174>
 8009bf0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8009bf4:	bf06      	itte	eq
 8009bf6:	3401      	addeq	r4, #1
 8009bf8:	4643      	moveq	r3, r8
 8009bfa:	2344      	movne	r3, #68	; 0x44
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	a90b      	add	r1, sp, #44	; 0x2c
 8009c00:	4620      	mov	r0, r4
 8009c02:	9305      	str	r3, [sp, #20]
 8009c04:	f000 feba 	bl	800a97c <strtoul>
 8009c08:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009c0c:	9b05      	ldr	r3, [sp, #20]
 8009c0e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009c12:	45a0      	cmp	r8, r4
 8009c14:	d114      	bne.n	8009c40 <_tzset_unlocked_r+0x2c8>
 8009c16:	234d      	movs	r3, #77	; 0x4d
 8009c18:	f1b9 0f00 	cmp.w	r9, #0
 8009c1c:	d107      	bne.n	8009c2e <_tzset_unlocked_r+0x2b6>
 8009c1e:	722b      	strb	r3, [r5, #8]
 8009c20:	2103      	movs	r1, #3
 8009c22:	2302      	movs	r3, #2
 8009c24:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8009c28:	f8c5 9014 	str.w	r9, [r5, #20]
 8009c2c:	e791      	b.n	8009b52 <_tzset_unlocked_r+0x1da>
 8009c2e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009c32:	220b      	movs	r2, #11
 8009c34:	2301      	movs	r3, #1
 8009c36:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009c3e:	e788      	b.n	8009b52 <_tzset_unlocked_r+0x1da>
 8009c40:	b280      	uxth	r0, r0
 8009c42:	723b      	strb	r3, [r7, #8]
 8009c44:	6178      	str	r0, [r7, #20]
 8009c46:	e784      	b.n	8009b52 <_tzset_unlocked_r+0x1da>
 8009c48:	0800bb7c 	.word	0x0800bb7c
 8009c4c:	20000cfc 	.word	0x20000cfc
 8009c50:	20000d04 	.word	0x20000d04
 8009c54:	0800bb7f 	.word	0x0800bb7f
 8009c58:	20000d00 	.word	0x20000d00
 8009c5c:	20000174 	.word	0x20000174
 8009c60:	20000cef 	.word	0x20000cef
 8009c64:	0800bb83 	.word	0x0800bb83
 8009c68:	0800bba6 	.word	0x0800bba6
 8009c6c:	0800bb92 	.word	0x0800bb92
 8009c70:	0800bba5 	.word	0x0800bba5
 8009c74:	20000ce4 	.word	0x20000ce4

08009c78 <__assert_func>:
 8009c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c7a:	4614      	mov	r4, r2
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <__assert_func+0x2c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4605      	mov	r5, r0
 8009c84:	68d8      	ldr	r0, [r3, #12]
 8009c86:	b14c      	cbz	r4, 8009c9c <__assert_func+0x24>
 8009c88:	4b07      	ldr	r3, [pc, #28]	; (8009ca8 <__assert_func+0x30>)
 8009c8a:	9100      	str	r1, [sp, #0]
 8009c8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c90:	4906      	ldr	r1, [pc, #24]	; (8009cac <__assert_func+0x34>)
 8009c92:	462b      	mov	r3, r5
 8009c94:	f000 f80e 	bl	8009cb4 <fiprintf>
 8009c98:	f000 ff4c 	bl	800ab34 <abort>
 8009c9c:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <__assert_func+0x38>)
 8009c9e:	461c      	mov	r4, r3
 8009ca0:	e7f3      	b.n	8009c8a <__assert_func+0x12>
 8009ca2:	bf00      	nop
 8009ca4:	20000110 	.word	0x20000110
 8009ca8:	0800bbb8 	.word	0x0800bbb8
 8009cac:	0800bbc5 	.word	0x0800bbc5
 8009cb0:	0800bbf3 	.word	0x0800bbf3

08009cb4 <fiprintf>:
 8009cb4:	b40e      	push	{r1, r2, r3}
 8009cb6:	b503      	push	{r0, r1, lr}
 8009cb8:	4601      	mov	r1, r0
 8009cba:	ab03      	add	r3, sp, #12
 8009cbc:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <fiprintf+0x20>)
 8009cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc2:	6800      	ldr	r0, [r0, #0]
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	f000 fa93 	bl	800a1f0 <_vfiprintf_r>
 8009cca:	b002      	add	sp, #8
 8009ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cd0:	b003      	add	sp, #12
 8009cd2:	4770      	bx	lr
 8009cd4:	20000110 	.word	0x20000110

08009cd8 <_findenv_r>:
 8009cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009d4c <_findenv_r+0x74>
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	4689      	mov	r9, r1
 8009ce4:	4616      	mov	r6, r2
 8009ce6:	f000 ff3d 	bl	800ab64 <__env_lock>
 8009cea:	f8da 4000 	ldr.w	r4, [sl]
 8009cee:	b134      	cbz	r4, 8009cfe <_findenv_r+0x26>
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	4698      	mov	r8, r3
 8009cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf8:	b13a      	cbz	r2, 8009d0a <_findenv_r+0x32>
 8009cfa:	2a3d      	cmp	r2, #61	; 0x3d
 8009cfc:	d1f9      	bne.n	8009cf2 <_findenv_r+0x1a>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f000 ff36 	bl	800ab70 <__env_unlock>
 8009d04:	2000      	movs	r0, #0
 8009d06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0a:	eba8 0809 	sub.w	r8, r8, r9
 8009d0e:	46a3      	mov	fp, r4
 8009d10:	f854 0b04 	ldr.w	r0, [r4], #4
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d0f2      	beq.n	8009cfe <_findenv_r+0x26>
 8009d18:	4642      	mov	r2, r8
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	f000 fda5 	bl	800a86a <strncmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d1f4      	bne.n	8009d0e <_findenv_r+0x36>
 8009d24:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009d28:	eb03 0508 	add.w	r5, r3, r8
 8009d2c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009d30:	2b3d      	cmp	r3, #61	; 0x3d
 8009d32:	d1ec      	bne.n	8009d0e <_findenv_r+0x36>
 8009d34:	f8da 3000 	ldr.w	r3, [sl]
 8009d38:	ebab 0303 	sub.w	r3, fp, r3
 8009d3c:	109b      	asrs	r3, r3, #2
 8009d3e:	4638      	mov	r0, r7
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	f000 ff15 	bl	800ab70 <__env_unlock>
 8009d46:	1c68      	adds	r0, r5, #1
 8009d48:	e7dd      	b.n	8009d06 <_findenv_r+0x2e>
 8009d4a:	bf00      	nop
 8009d4c:	20000100 	.word	0x20000100

08009d50 <_getenv_r>:
 8009d50:	b507      	push	{r0, r1, r2, lr}
 8009d52:	aa01      	add	r2, sp, #4
 8009d54:	f7ff ffc0 	bl	8009cd8 <_findenv_r>
 8009d58:	b003      	add	sp, #12
 8009d5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009d60 <__gettzinfo>:
 8009d60:	4800      	ldr	r0, [pc, #0]	; (8009d64 <__gettzinfo+0x4>)
 8009d62:	4770      	bx	lr
 8009d64:	20000180 	.word	0x20000180

08009d68 <gmtime_r>:
 8009d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8009d70:	460c      	mov	r4, r1
 8009d72:	4a4f      	ldr	r2, [pc, #316]	; (8009eb0 <gmtime_r+0x148>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	4630      	mov	r0, r6
 8009d78:	4639      	mov	r1, r7
 8009d7a:	f7f6 fdff 	bl	800097c <__aeabi_ldivmod>
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4605      	mov	r5, r0
 8009d82:	4a4b      	ldr	r2, [pc, #300]	; (8009eb0 <gmtime_r+0x148>)
 8009d84:	4630      	mov	r0, r6
 8009d86:	2300      	movs	r3, #0
 8009d88:	f7f6 fdf8 	bl	800097c <__aeabi_ldivmod>
 8009d8c:	2a00      	cmp	r2, #0
 8009d8e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8009d92:	bfb7      	itett	lt
 8009d94:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8009d98:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8009d9c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8009da0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8009da4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8009da8:	fbb2 f1f0 	udiv	r1, r2, r0
 8009dac:	fb00 2211 	mls	r2, r0, r1, r2
 8009db0:	203c      	movs	r0, #60	; 0x3c
 8009db2:	60a1      	str	r1, [r4, #8]
 8009db4:	fbb2 f1f0 	udiv	r1, r2, r0
 8009db8:	fb00 2211 	mls	r2, r0, r1, r2
 8009dbc:	6061      	str	r1, [r4, #4]
 8009dbe:	6022      	str	r2, [r4, #0]
 8009dc0:	2107      	movs	r1, #7
 8009dc2:	1cda      	adds	r2, r3, #3
 8009dc4:	fb92 f1f1 	sdiv	r1, r2, r1
 8009dc8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8009dcc:	1a52      	subs	r2, r2, r1
 8009dce:	bf48      	it	mi
 8009dd0:	3207      	addmi	r2, #7
 8009dd2:	4d38      	ldr	r5, [pc, #224]	; (8009eb4 <gmtime_r+0x14c>)
 8009dd4:	4838      	ldr	r0, [pc, #224]	; (8009eb8 <gmtime_r+0x150>)
 8009dd6:	61a2      	str	r2, [r4, #24]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfb7      	itett	lt
 8009ddc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8009de0:	fb93 f5f5 	sdivge	r5, r3, r5
 8009de4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8009de8:	fb92 f5f5 	sdivlt	r5, r2, r5
 8009dec:	fb00 3005 	mla	r0, r0, r5, r3
 8009df0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8009df4:	fbb0 f2f2 	udiv	r2, r0, r2
 8009df8:	4402      	add	r2, r0
 8009dfa:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8009dfe:	fbb0 f1f3 	udiv	r1, r0, r3
 8009e02:	1a52      	subs	r2, r2, r1
 8009e04:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009e08:	492c      	ldr	r1, [pc, #176]	; (8009ebc <gmtime_r+0x154>)
 8009e0a:	fbb0 f1f1 	udiv	r1, r0, r1
 8009e0e:	2764      	movs	r7, #100	; 0x64
 8009e10:	1a52      	subs	r2, r2, r1
 8009e12:	fbb2 f1fc 	udiv	r1, r2, ip
 8009e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1a:	fbb1 f6f7 	udiv	r6, r1, r7
 8009e1e:	1af3      	subs	r3, r6, r3
 8009e20:	4403      	add	r3, r0
 8009e22:	fb0c 3311 	mls	r3, ip, r1, r3
 8009e26:	2299      	movs	r2, #153	; 0x99
 8009e28:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8009e2c:	f10e 0e02 	add.w	lr, lr, #2
 8009e30:	f103 0c01 	add.w	ip, r3, #1
 8009e34:	fbbe f0f2 	udiv	r0, lr, r2
 8009e38:	4342      	muls	r2, r0
 8009e3a:	3202      	adds	r2, #2
 8009e3c:	f04f 0805 	mov.w	r8, #5
 8009e40:	fbb2 f2f8 	udiv	r2, r2, r8
 8009e44:	ebac 0c02 	sub.w	ip, ip, r2
 8009e48:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8009e4c:	4596      	cmp	lr, r2
 8009e4e:	bf94      	ite	ls
 8009e50:	2202      	movls	r2, #2
 8009e52:	f06f 0209 	mvnhi.w	r2, #9
 8009e56:	4410      	add	r0, r2
 8009e58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009e5c:	fb02 1505 	mla	r5, r2, r5, r1
 8009e60:	2801      	cmp	r0, #1
 8009e62:	bf98      	it	ls
 8009e64:	3501      	addls	r5, #1
 8009e66:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009e6a:	d30d      	bcc.n	8009e88 <gmtime_r+0x120>
 8009e6c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009e70:	61e3      	str	r3, [r4, #28]
 8009e72:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8009e76:	2300      	movs	r3, #0
 8009e78:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8009e7c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8009e80:	6223      	str	r3, [r4, #32]
 8009e82:	4620      	mov	r0, r4
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	078a      	lsls	r2, r1, #30
 8009e8a:	d102      	bne.n	8009e92 <gmtime_r+0x12a>
 8009e8c:	fb07 1616 	mls	r6, r7, r6, r1
 8009e90:	b95e      	cbnz	r6, 8009eaa <gmtime_r+0x142>
 8009e92:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009e96:	fbb1 f6f2 	udiv	r6, r1, r2
 8009e9a:	fb02 1216 	mls	r2, r2, r6, r1
 8009e9e:	fab2 f282 	clz	r2, r2
 8009ea2:	0952      	lsrs	r2, r2, #5
 8009ea4:	333b      	adds	r3, #59	; 0x3b
 8009ea6:	4413      	add	r3, r2
 8009ea8:	e7e2      	b.n	8009e70 <gmtime_r+0x108>
 8009eaa:	2201      	movs	r2, #1
 8009eac:	e7fa      	b.n	8009ea4 <gmtime_r+0x13c>
 8009eae:	bf00      	nop
 8009eb0:	00015180 	.word	0x00015180
 8009eb4:	00023ab1 	.word	0x00023ab1
 8009eb8:	fffdc54f 	.word	0xfffdc54f
 8009ebc:	00023ab0 	.word	0x00023ab0

08009ec0 <__retarget_lock_init_recursive>:
 8009ec0:	4770      	bx	lr

08009ec2 <__retarget_lock_acquire>:
 8009ec2:	4770      	bx	lr

08009ec4 <__retarget_lock_acquire_recursive>:
 8009ec4:	4770      	bx	lr

08009ec6 <__retarget_lock_release>:
 8009ec6:	4770      	bx	lr

08009ec8 <__retarget_lock_release_recursive>:
 8009ec8:	4770      	bx	lr
	...

08009ecc <__malloc_lock>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__malloc_lock+0x8>)
 8009ece:	f7ff bff9 	b.w	8009ec4 <__retarget_lock_acquire_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20000d09 	.word	0x20000d09

08009ed8 <__malloc_unlock>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__malloc_unlock+0x8>)
 8009eda:	f7ff bff5 	b.w	8009ec8 <__retarget_lock_release_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20000d09 	.word	0x20000d09

08009ee4 <__ssputs_r>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	688e      	ldr	r6, [r1, #8]
 8009eea:	429e      	cmp	r6, r3
 8009eec:	4682      	mov	sl, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	4690      	mov	r8, r2
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	d838      	bhi.n	8009f68 <__ssputs_r+0x84>
 8009ef6:	898a      	ldrh	r2, [r1, #12]
 8009ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009efc:	d032      	beq.n	8009f64 <__ssputs_r+0x80>
 8009efe:	6825      	ldr	r5, [r4, #0]
 8009f00:	6909      	ldr	r1, [r1, #16]
 8009f02:	eba5 0901 	sub.w	r9, r5, r1
 8009f06:	6965      	ldr	r5, [r4, #20]
 8009f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f10:	3301      	adds	r3, #1
 8009f12:	444b      	add	r3, r9
 8009f14:	106d      	asrs	r5, r5, #1
 8009f16:	429d      	cmp	r5, r3
 8009f18:	bf38      	it	cc
 8009f1a:	461d      	movcc	r5, r3
 8009f1c:	0553      	lsls	r3, r2, #21
 8009f1e:	d531      	bpl.n	8009f84 <__ssputs_r+0xa0>
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7ff fbc9 	bl	80096b8 <_malloc_r>
 8009f26:	4606      	mov	r6, r0
 8009f28:	b950      	cbnz	r0, 8009f40 <__ssputs_r+0x5c>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	f8ca 3000 	str.w	r3, [sl]
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f40:	6921      	ldr	r1, [r4, #16]
 8009f42:	464a      	mov	r2, r9
 8009f44:	f7ff fb36 	bl	80095b4 <memcpy>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	6126      	str	r6, [r4, #16]
 8009f56:	6165      	str	r5, [r4, #20]
 8009f58:	444e      	add	r6, r9
 8009f5a:	eba5 0509 	sub.w	r5, r5, r9
 8009f5e:	6026      	str	r6, [r4, #0]
 8009f60:	60a5      	str	r5, [r4, #8]
 8009f62:	463e      	mov	r6, r7
 8009f64:	42be      	cmp	r6, r7
 8009f66:	d900      	bls.n	8009f6a <__ssputs_r+0x86>
 8009f68:	463e      	mov	r6, r7
 8009f6a:	6820      	ldr	r0, [r4, #0]
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	4641      	mov	r1, r8
 8009f70:	f001 f834 	bl	800afdc <memmove>
 8009f74:	68a3      	ldr	r3, [r4, #8]
 8009f76:	1b9b      	subs	r3, r3, r6
 8009f78:	60a3      	str	r3, [r4, #8]
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	4433      	add	r3, r6
 8009f7e:	6023      	str	r3, [r4, #0]
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7db      	b.n	8009f3c <__ssputs_r+0x58>
 8009f84:	462a      	mov	r2, r5
 8009f86:	f001 f843 	bl	800b010 <_realloc_r>
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1e1      	bne.n	8009f54 <__ssputs_r+0x70>
 8009f90:	6921      	ldr	r1, [r4, #16]
 8009f92:	4650      	mov	r0, sl
 8009f94:	f7ff fb24 	bl	80095e0 <_free_r>
 8009f98:	e7c7      	b.n	8009f2a <__ssputs_r+0x46>
	...

08009f9c <_svfiprintf_r>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	4698      	mov	r8, r3
 8009fa2:	898b      	ldrh	r3, [r1, #12]
 8009fa4:	061b      	lsls	r3, r3, #24
 8009fa6:	b09d      	sub	sp, #116	; 0x74
 8009fa8:	4607      	mov	r7, r0
 8009faa:	460d      	mov	r5, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	d50e      	bpl.n	8009fce <_svfiprintf_r+0x32>
 8009fb0:	690b      	ldr	r3, [r1, #16]
 8009fb2:	b963      	cbnz	r3, 8009fce <_svfiprintf_r+0x32>
 8009fb4:	2140      	movs	r1, #64	; 0x40
 8009fb6:	f7ff fb7f 	bl	80096b8 <_malloc_r>
 8009fba:	6028      	str	r0, [r5, #0]
 8009fbc:	6128      	str	r0, [r5, #16]
 8009fbe:	b920      	cbnz	r0, 8009fca <_svfiprintf_r+0x2e>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	e0d1      	b.n	800a16e <_svfiprintf_r+0x1d2>
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	616b      	str	r3, [r5, #20]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd2:	2320      	movs	r3, #32
 8009fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fdc:	2330      	movs	r3, #48	; 0x30
 8009fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a188 <_svfiprintf_r+0x1ec>
 8009fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe6:	f04f 0901 	mov.w	r9, #1
 8009fea:	4623      	mov	r3, r4
 8009fec:	469a      	mov	sl, r3
 8009fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff2:	b10a      	cbz	r2, 8009ff8 <_svfiprintf_r+0x5c>
 8009ff4:	2a25      	cmp	r2, #37	; 0x25
 8009ff6:	d1f9      	bne.n	8009fec <_svfiprintf_r+0x50>
 8009ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ffc:	d00b      	beq.n	800a016 <_svfiprintf_r+0x7a>
 8009ffe:	465b      	mov	r3, fp
 800a000:	4622      	mov	r2, r4
 800a002:	4629      	mov	r1, r5
 800a004:	4638      	mov	r0, r7
 800a006:	f7ff ff6d 	bl	8009ee4 <__ssputs_r>
 800a00a:	3001      	adds	r0, #1
 800a00c:	f000 80aa 	beq.w	800a164 <_svfiprintf_r+0x1c8>
 800a010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a012:	445a      	add	r2, fp
 800a014:	9209      	str	r2, [sp, #36]	; 0x24
 800a016:	f89a 3000 	ldrb.w	r3, [sl]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80a2 	beq.w	800a164 <_svfiprintf_r+0x1c8>
 800a020:	2300      	movs	r3, #0
 800a022:	f04f 32ff 	mov.w	r2, #4294967295
 800a026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a02a:	f10a 0a01 	add.w	sl, sl, #1
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a036:	931a      	str	r3, [sp, #104]	; 0x68
 800a038:	4654      	mov	r4, sl
 800a03a:	2205      	movs	r2, #5
 800a03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a040:	4851      	ldr	r0, [pc, #324]	; (800a188 <_svfiprintf_r+0x1ec>)
 800a042:	f7f6 f8dd 	bl	8000200 <memchr>
 800a046:	9a04      	ldr	r2, [sp, #16]
 800a048:	b9d8      	cbnz	r0, 800a082 <_svfiprintf_r+0xe6>
 800a04a:	06d0      	lsls	r0, r2, #27
 800a04c:	bf44      	itt	mi
 800a04e:	2320      	movmi	r3, #32
 800a050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a054:	0711      	lsls	r1, r2, #28
 800a056:	bf44      	itt	mi
 800a058:	232b      	movmi	r3, #43	; 0x2b
 800a05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05e:	f89a 3000 	ldrb.w	r3, [sl]
 800a062:	2b2a      	cmp	r3, #42	; 0x2a
 800a064:	d015      	beq.n	800a092 <_svfiprintf_r+0xf6>
 800a066:	9a07      	ldr	r2, [sp, #28]
 800a068:	4654      	mov	r4, sl
 800a06a:	2000      	movs	r0, #0
 800a06c:	f04f 0c0a 	mov.w	ip, #10
 800a070:	4621      	mov	r1, r4
 800a072:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a076:	3b30      	subs	r3, #48	; 0x30
 800a078:	2b09      	cmp	r3, #9
 800a07a:	d94e      	bls.n	800a11a <_svfiprintf_r+0x17e>
 800a07c:	b1b0      	cbz	r0, 800a0ac <_svfiprintf_r+0x110>
 800a07e:	9207      	str	r2, [sp, #28]
 800a080:	e014      	b.n	800a0ac <_svfiprintf_r+0x110>
 800a082:	eba0 0308 	sub.w	r3, r0, r8
 800a086:	fa09 f303 	lsl.w	r3, r9, r3
 800a08a:	4313      	orrs	r3, r2
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	46a2      	mov	sl, r4
 800a090:	e7d2      	b.n	800a038 <_svfiprintf_r+0x9c>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	1d19      	adds	r1, r3, #4
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	9103      	str	r1, [sp, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	bfbb      	ittet	lt
 800a09e:	425b      	neglt	r3, r3
 800a0a0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a4:	9307      	strge	r3, [sp, #28]
 800a0a6:	9307      	strlt	r3, [sp, #28]
 800a0a8:	bfb8      	it	lt
 800a0aa:	9204      	strlt	r2, [sp, #16]
 800a0ac:	7823      	ldrb	r3, [r4, #0]
 800a0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b0:	d10c      	bne.n	800a0cc <_svfiprintf_r+0x130>
 800a0b2:	7863      	ldrb	r3, [r4, #1]
 800a0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b6:	d135      	bne.n	800a124 <_svfiprintf_r+0x188>
 800a0b8:	9b03      	ldr	r3, [sp, #12]
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	9203      	str	r2, [sp, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bfb8      	it	lt
 800a0c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0c8:	3402      	adds	r4, #2
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a198 <_svfiprintf_r+0x1fc>
 800a0d0:	7821      	ldrb	r1, [r4, #0]
 800a0d2:	2203      	movs	r2, #3
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	f7f6 f893 	bl	8000200 <memchr>
 800a0da:	b140      	cbz	r0, 800a0ee <_svfiprintf_r+0x152>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	eba0 000a 	sub.w	r0, r0, sl
 800a0e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	4303      	orrs	r3, r0
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f2:	4826      	ldr	r0, [pc, #152]	; (800a18c <_svfiprintf_r+0x1f0>)
 800a0f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0f8:	2206      	movs	r2, #6
 800a0fa:	f7f6 f881 	bl	8000200 <memchr>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d038      	beq.n	800a174 <_svfiprintf_r+0x1d8>
 800a102:	4b23      	ldr	r3, [pc, #140]	; (800a190 <_svfiprintf_r+0x1f4>)
 800a104:	bb1b      	cbnz	r3, 800a14e <_svfiprintf_r+0x1b2>
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	3307      	adds	r3, #7
 800a10a:	f023 0307 	bic.w	r3, r3, #7
 800a10e:	3308      	adds	r3, #8
 800a110:	9303      	str	r3, [sp, #12]
 800a112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a114:	4433      	add	r3, r6
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	e767      	b.n	8009fea <_svfiprintf_r+0x4e>
 800a11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a11e:	460c      	mov	r4, r1
 800a120:	2001      	movs	r0, #1
 800a122:	e7a5      	b.n	800a070 <_svfiprintf_r+0xd4>
 800a124:	2300      	movs	r3, #0
 800a126:	3401      	adds	r4, #1
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	4619      	mov	r1, r3
 800a12c:	f04f 0c0a 	mov.w	ip, #10
 800a130:	4620      	mov	r0, r4
 800a132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a136:	3a30      	subs	r2, #48	; 0x30
 800a138:	2a09      	cmp	r2, #9
 800a13a:	d903      	bls.n	800a144 <_svfiprintf_r+0x1a8>
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0c5      	beq.n	800a0cc <_svfiprintf_r+0x130>
 800a140:	9105      	str	r1, [sp, #20]
 800a142:	e7c3      	b.n	800a0cc <_svfiprintf_r+0x130>
 800a144:	fb0c 2101 	mla	r1, ip, r1, r2
 800a148:	4604      	mov	r4, r0
 800a14a:	2301      	movs	r3, #1
 800a14c:	e7f0      	b.n	800a130 <_svfiprintf_r+0x194>
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	462a      	mov	r2, r5
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <_svfiprintf_r+0x1f8>)
 800a156:	a904      	add	r1, sp, #16
 800a158:	4638      	mov	r0, r7
 800a15a:	f3af 8000 	nop.w
 800a15e:	1c42      	adds	r2, r0, #1
 800a160:	4606      	mov	r6, r0
 800a162:	d1d6      	bne.n	800a112 <_svfiprintf_r+0x176>
 800a164:	89ab      	ldrh	r3, [r5, #12]
 800a166:	065b      	lsls	r3, r3, #25
 800a168:	f53f af2c 	bmi.w	8009fc4 <_svfiprintf_r+0x28>
 800a16c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a16e:	b01d      	add	sp, #116	; 0x74
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	ab03      	add	r3, sp, #12
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	462a      	mov	r2, r5
 800a17a:	4b06      	ldr	r3, [pc, #24]	; (800a194 <_svfiprintf_r+0x1f8>)
 800a17c:	a904      	add	r1, sp, #16
 800a17e:	4638      	mov	r0, r7
 800a180:	f000 f9d4 	bl	800a52c <_printf_i>
 800a184:	e7eb      	b.n	800a15e <_svfiprintf_r+0x1c2>
 800a186:	bf00      	nop
 800a188:	0800bbf4 	.word	0x0800bbf4
 800a18c:	0800bbfe 	.word	0x0800bbfe
 800a190:	00000000 	.word	0x00000000
 800a194:	08009ee5 	.word	0x08009ee5
 800a198:	0800bbfa 	.word	0x0800bbfa

0800a19c <__sfputc_r>:
 800a19c:	6893      	ldr	r3, [r2, #8]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	b410      	push	{r4}
 800a1a4:	6093      	str	r3, [r2, #8]
 800a1a6:	da08      	bge.n	800a1ba <__sfputc_r+0x1e>
 800a1a8:	6994      	ldr	r4, [r2, #24]
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	db01      	blt.n	800a1b2 <__sfputc_r+0x16>
 800a1ae:	290a      	cmp	r1, #10
 800a1b0:	d103      	bne.n	800a1ba <__sfputc_r+0x1e>
 800a1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1b6:	f000 bbeb 	b.w	800a990 <__swbuf_r>
 800a1ba:	6813      	ldr	r3, [r2, #0]
 800a1bc:	1c58      	adds	r0, r3, #1
 800a1be:	6010      	str	r0, [r2, #0]
 800a1c0:	7019      	strb	r1, [r3, #0]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c8:	4770      	bx	lr

0800a1ca <__sfputs_r>:
 800a1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	18d5      	adds	r5, r2, r3
 800a1d4:	42ac      	cmp	r4, r5
 800a1d6:	d101      	bne.n	800a1dc <__sfputs_r+0x12>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e007      	b.n	800a1ec <__sfputs_r+0x22>
 800a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ffda 	bl	800a19c <__sfputc_r>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d1f3      	bne.n	800a1d4 <__sfputs_r+0xa>
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1f0 <_vfiprintf_r>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	460d      	mov	r5, r1
 800a1f6:	b09d      	sub	sp, #116	; 0x74
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	4698      	mov	r8, r3
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	b118      	cbz	r0, 800a208 <_vfiprintf_r+0x18>
 800a200:	6983      	ldr	r3, [r0, #24]
 800a202:	b90b      	cbnz	r3, 800a208 <_vfiprintf_r+0x18>
 800a204:	f000 fdd4 	bl	800adb0 <__sinit>
 800a208:	4b89      	ldr	r3, [pc, #548]	; (800a430 <_vfiprintf_r+0x240>)
 800a20a:	429d      	cmp	r5, r3
 800a20c:	d11b      	bne.n	800a246 <_vfiprintf_r+0x56>
 800a20e:	6875      	ldr	r5, [r6, #4]
 800a210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a212:	07d9      	lsls	r1, r3, #31
 800a214:	d405      	bmi.n	800a222 <_vfiprintf_r+0x32>
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	059a      	lsls	r2, r3, #22
 800a21a:	d402      	bmi.n	800a222 <_vfiprintf_r+0x32>
 800a21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a21e:	f7ff fe51 	bl	8009ec4 <__retarget_lock_acquire_recursive>
 800a222:	89ab      	ldrh	r3, [r5, #12]
 800a224:	071b      	lsls	r3, r3, #28
 800a226:	d501      	bpl.n	800a22c <_vfiprintf_r+0x3c>
 800a228:	692b      	ldr	r3, [r5, #16]
 800a22a:	b9eb      	cbnz	r3, 800a268 <_vfiprintf_r+0x78>
 800a22c:	4629      	mov	r1, r5
 800a22e:	4630      	mov	r0, r6
 800a230:	f000 fc12 	bl	800aa58 <__swsetup_r>
 800a234:	b1c0      	cbz	r0, 800a268 <_vfiprintf_r+0x78>
 800a236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a238:	07dc      	lsls	r4, r3, #31
 800a23a:	d50e      	bpl.n	800a25a <_vfiprintf_r+0x6a>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	b01d      	add	sp, #116	; 0x74
 800a242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a246:	4b7b      	ldr	r3, [pc, #492]	; (800a434 <_vfiprintf_r+0x244>)
 800a248:	429d      	cmp	r5, r3
 800a24a:	d101      	bne.n	800a250 <_vfiprintf_r+0x60>
 800a24c:	68b5      	ldr	r5, [r6, #8]
 800a24e:	e7df      	b.n	800a210 <_vfiprintf_r+0x20>
 800a250:	4b79      	ldr	r3, [pc, #484]	; (800a438 <_vfiprintf_r+0x248>)
 800a252:	429d      	cmp	r5, r3
 800a254:	bf08      	it	eq
 800a256:	68f5      	ldreq	r5, [r6, #12]
 800a258:	e7da      	b.n	800a210 <_vfiprintf_r+0x20>
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	0598      	lsls	r0, r3, #22
 800a25e:	d4ed      	bmi.n	800a23c <_vfiprintf_r+0x4c>
 800a260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a262:	f7ff fe31 	bl	8009ec8 <__retarget_lock_release_recursive>
 800a266:	e7e9      	b.n	800a23c <_vfiprintf_r+0x4c>
 800a268:	2300      	movs	r3, #0
 800a26a:	9309      	str	r3, [sp, #36]	; 0x24
 800a26c:	2320      	movs	r3, #32
 800a26e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a272:	f8cd 800c 	str.w	r8, [sp, #12]
 800a276:	2330      	movs	r3, #48	; 0x30
 800a278:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a43c <_vfiprintf_r+0x24c>
 800a27c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a280:	f04f 0901 	mov.w	r9, #1
 800a284:	4623      	mov	r3, r4
 800a286:	469a      	mov	sl, r3
 800a288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28c:	b10a      	cbz	r2, 800a292 <_vfiprintf_r+0xa2>
 800a28e:	2a25      	cmp	r2, #37	; 0x25
 800a290:	d1f9      	bne.n	800a286 <_vfiprintf_r+0x96>
 800a292:	ebba 0b04 	subs.w	fp, sl, r4
 800a296:	d00b      	beq.n	800a2b0 <_vfiprintf_r+0xc0>
 800a298:	465b      	mov	r3, fp
 800a29a:	4622      	mov	r2, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ff93 	bl	800a1ca <__sfputs_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f000 80aa 	beq.w	800a3fe <_vfiprintf_r+0x20e>
 800a2aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ac:	445a      	add	r2, fp
 800a2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 80a2 	beq.w	800a3fe <_vfiprintf_r+0x20e>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c4:	f10a 0a01 	add.w	sl, sl, #1
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	9307      	str	r3, [sp, #28]
 800a2cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a2d2:	4654      	mov	r4, sl
 800a2d4:	2205      	movs	r2, #5
 800a2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2da:	4858      	ldr	r0, [pc, #352]	; (800a43c <_vfiprintf_r+0x24c>)
 800a2dc:	f7f5 ff90 	bl	8000200 <memchr>
 800a2e0:	9a04      	ldr	r2, [sp, #16]
 800a2e2:	b9d8      	cbnz	r0, 800a31c <_vfiprintf_r+0x12c>
 800a2e4:	06d1      	lsls	r1, r2, #27
 800a2e6:	bf44      	itt	mi
 800a2e8:	2320      	movmi	r3, #32
 800a2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ee:	0713      	lsls	r3, r2, #28
 800a2f0:	bf44      	itt	mi
 800a2f2:	232b      	movmi	r3, #43	; 0x2b
 800a2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fe:	d015      	beq.n	800a32c <_vfiprintf_r+0x13c>
 800a300:	9a07      	ldr	r2, [sp, #28]
 800a302:	4654      	mov	r4, sl
 800a304:	2000      	movs	r0, #0
 800a306:	f04f 0c0a 	mov.w	ip, #10
 800a30a:	4621      	mov	r1, r4
 800a30c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a310:	3b30      	subs	r3, #48	; 0x30
 800a312:	2b09      	cmp	r3, #9
 800a314:	d94e      	bls.n	800a3b4 <_vfiprintf_r+0x1c4>
 800a316:	b1b0      	cbz	r0, 800a346 <_vfiprintf_r+0x156>
 800a318:	9207      	str	r2, [sp, #28]
 800a31a:	e014      	b.n	800a346 <_vfiprintf_r+0x156>
 800a31c:	eba0 0308 	sub.w	r3, r0, r8
 800a320:	fa09 f303 	lsl.w	r3, r9, r3
 800a324:	4313      	orrs	r3, r2
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	46a2      	mov	sl, r4
 800a32a:	e7d2      	b.n	800a2d2 <_vfiprintf_r+0xe2>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	1d19      	adds	r1, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	9103      	str	r1, [sp, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbb      	ittet	lt
 800a338:	425b      	neglt	r3, r3
 800a33a:	f042 0202 	orrlt.w	r2, r2, #2
 800a33e:	9307      	strge	r3, [sp, #28]
 800a340:	9307      	strlt	r3, [sp, #28]
 800a342:	bfb8      	it	lt
 800a344:	9204      	strlt	r2, [sp, #16]
 800a346:	7823      	ldrb	r3, [r4, #0]
 800a348:	2b2e      	cmp	r3, #46	; 0x2e
 800a34a:	d10c      	bne.n	800a366 <_vfiprintf_r+0x176>
 800a34c:	7863      	ldrb	r3, [r4, #1]
 800a34e:	2b2a      	cmp	r3, #42	; 0x2a
 800a350:	d135      	bne.n	800a3be <_vfiprintf_r+0x1ce>
 800a352:	9b03      	ldr	r3, [sp, #12]
 800a354:	1d1a      	adds	r2, r3, #4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	9203      	str	r2, [sp, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bfb8      	it	lt
 800a35e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a362:	3402      	adds	r4, #2
 800a364:	9305      	str	r3, [sp, #20]
 800a366:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a44c <_vfiprintf_r+0x25c>
 800a36a:	7821      	ldrb	r1, [r4, #0]
 800a36c:	2203      	movs	r2, #3
 800a36e:	4650      	mov	r0, sl
 800a370:	f7f5 ff46 	bl	8000200 <memchr>
 800a374:	b140      	cbz	r0, 800a388 <_vfiprintf_r+0x198>
 800a376:	2340      	movs	r3, #64	; 0x40
 800a378:	eba0 000a 	sub.w	r0, r0, sl
 800a37c:	fa03 f000 	lsl.w	r0, r3, r0
 800a380:	9b04      	ldr	r3, [sp, #16]
 800a382:	4303      	orrs	r3, r0
 800a384:	3401      	adds	r4, #1
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38c:	482c      	ldr	r0, [pc, #176]	; (800a440 <_vfiprintf_r+0x250>)
 800a38e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a392:	2206      	movs	r2, #6
 800a394:	f7f5 ff34 	bl	8000200 <memchr>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d03f      	beq.n	800a41c <_vfiprintf_r+0x22c>
 800a39c:	4b29      	ldr	r3, [pc, #164]	; (800a444 <_vfiprintf_r+0x254>)
 800a39e:	bb1b      	cbnz	r3, 800a3e8 <_vfiprintf_r+0x1f8>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	3307      	adds	r3, #7
 800a3a4:	f023 0307 	bic.w	r3, r3, #7
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	9303      	str	r3, [sp, #12]
 800a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ae:	443b      	add	r3, r7
 800a3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b2:	e767      	b.n	800a284 <_vfiprintf_r+0x94>
 800a3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	e7a5      	b.n	800a30a <_vfiprintf_r+0x11a>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	3401      	adds	r4, #1
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f04f 0c0a 	mov.w	ip, #10
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3d0:	3a30      	subs	r2, #48	; 0x30
 800a3d2:	2a09      	cmp	r2, #9
 800a3d4:	d903      	bls.n	800a3de <_vfiprintf_r+0x1ee>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0c5      	beq.n	800a366 <_vfiprintf_r+0x176>
 800a3da:	9105      	str	r1, [sp, #20]
 800a3dc:	e7c3      	b.n	800a366 <_vfiprintf_r+0x176>
 800a3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e7f0      	b.n	800a3ca <_vfiprintf_r+0x1da>
 800a3e8:	ab03      	add	r3, sp, #12
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4b16      	ldr	r3, [pc, #88]	; (800a448 <_vfiprintf_r+0x258>)
 800a3f0:	a904      	add	r1, sp, #16
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	4607      	mov	r7, r0
 800a3fa:	1c78      	adds	r0, r7, #1
 800a3fc:	d1d6      	bne.n	800a3ac <_vfiprintf_r+0x1bc>
 800a3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a400:	07d9      	lsls	r1, r3, #31
 800a402:	d405      	bmi.n	800a410 <_vfiprintf_r+0x220>
 800a404:	89ab      	ldrh	r3, [r5, #12]
 800a406:	059a      	lsls	r2, r3, #22
 800a408:	d402      	bmi.n	800a410 <_vfiprintf_r+0x220>
 800a40a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40c:	f7ff fd5c 	bl	8009ec8 <__retarget_lock_release_recursive>
 800a410:	89ab      	ldrh	r3, [r5, #12]
 800a412:	065b      	lsls	r3, r3, #25
 800a414:	f53f af12 	bmi.w	800a23c <_vfiprintf_r+0x4c>
 800a418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a41a:	e711      	b.n	800a240 <_vfiprintf_r+0x50>
 800a41c:	ab03      	add	r3, sp, #12
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	462a      	mov	r2, r5
 800a422:	4b09      	ldr	r3, [pc, #36]	; (800a448 <_vfiprintf_r+0x258>)
 800a424:	a904      	add	r1, sp, #16
 800a426:	4630      	mov	r0, r6
 800a428:	f000 f880 	bl	800a52c <_printf_i>
 800a42c:	e7e4      	b.n	800a3f8 <_vfiprintf_r+0x208>
 800a42e:	bf00      	nop
 800a430:	0800bd48 	.word	0x0800bd48
 800a434:	0800bd68 	.word	0x0800bd68
 800a438:	0800bd28 	.word	0x0800bd28
 800a43c:	0800bbf4 	.word	0x0800bbf4
 800a440:	0800bbfe 	.word	0x0800bbfe
 800a444:	00000000 	.word	0x00000000
 800a448:	0800a1cb 	.word	0x0800a1cb
 800a44c:	0800bbfa 	.word	0x0800bbfa

0800a450 <_printf_common>:
 800a450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a454:	4616      	mov	r6, r2
 800a456:	4699      	mov	r9, r3
 800a458:	688a      	ldr	r2, [r1, #8]
 800a45a:	690b      	ldr	r3, [r1, #16]
 800a45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a460:	4293      	cmp	r3, r2
 800a462:	bfb8      	it	lt
 800a464:	4613      	movlt	r3, r2
 800a466:	6033      	str	r3, [r6, #0]
 800a468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a46c:	4607      	mov	r7, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	b10a      	cbz	r2, 800a476 <_printf_common+0x26>
 800a472:	3301      	adds	r3, #1
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	0699      	lsls	r1, r3, #26
 800a47a:	bf42      	ittt	mi
 800a47c:	6833      	ldrmi	r3, [r6, #0]
 800a47e:	3302      	addmi	r3, #2
 800a480:	6033      	strmi	r3, [r6, #0]
 800a482:	6825      	ldr	r5, [r4, #0]
 800a484:	f015 0506 	ands.w	r5, r5, #6
 800a488:	d106      	bne.n	800a498 <_printf_common+0x48>
 800a48a:	f104 0a19 	add.w	sl, r4, #25
 800a48e:	68e3      	ldr	r3, [r4, #12]
 800a490:	6832      	ldr	r2, [r6, #0]
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	42ab      	cmp	r3, r5
 800a496:	dc26      	bgt.n	800a4e6 <_printf_common+0x96>
 800a498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a49c:	1e13      	subs	r3, r2, #0
 800a49e:	6822      	ldr	r2, [r4, #0]
 800a4a0:	bf18      	it	ne
 800a4a2:	2301      	movne	r3, #1
 800a4a4:	0692      	lsls	r2, r2, #26
 800a4a6:	d42b      	bmi.n	800a500 <_printf_common+0xb0>
 800a4a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	47c0      	blx	r8
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	d01e      	beq.n	800a4f4 <_printf_common+0xa4>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	68e5      	ldr	r5, [r4, #12]
 800a4ba:	6832      	ldr	r2, [r6, #0]
 800a4bc:	f003 0306 	and.w	r3, r3, #6
 800a4c0:	2b04      	cmp	r3, #4
 800a4c2:	bf08      	it	eq
 800a4c4:	1aad      	subeq	r5, r5, r2
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	6922      	ldr	r2, [r4, #16]
 800a4ca:	bf0c      	ite	eq
 800a4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4d0:	2500      	movne	r5, #0
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	bfc4      	itt	gt
 800a4d6:	1a9b      	subgt	r3, r3, r2
 800a4d8:	18ed      	addgt	r5, r5, r3
 800a4da:	2600      	movs	r6, #0
 800a4dc:	341a      	adds	r4, #26
 800a4de:	42b5      	cmp	r5, r6
 800a4e0:	d11a      	bne.n	800a518 <_printf_common+0xc8>
 800a4e2:	2000      	movs	r0, #0
 800a4e4:	e008      	b.n	800a4f8 <_printf_common+0xa8>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4652      	mov	r2, sl
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	47c0      	blx	r8
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d103      	bne.n	800a4fc <_printf_common+0xac>
 800a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	e7c6      	b.n	800a48e <_printf_common+0x3e>
 800a500:	18e1      	adds	r1, r4, r3
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	2030      	movs	r0, #48	; 0x30
 800a506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a50a:	4422      	add	r2, r4
 800a50c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a514:	3302      	adds	r3, #2
 800a516:	e7c7      	b.n	800a4a8 <_printf_common+0x58>
 800a518:	2301      	movs	r3, #1
 800a51a:	4622      	mov	r2, r4
 800a51c:	4649      	mov	r1, r9
 800a51e:	4638      	mov	r0, r7
 800a520:	47c0      	blx	r8
 800a522:	3001      	adds	r0, #1
 800a524:	d0e6      	beq.n	800a4f4 <_printf_common+0xa4>
 800a526:	3601      	adds	r6, #1
 800a528:	e7d9      	b.n	800a4de <_printf_common+0x8e>
	...

0800a52c <_printf_i>:
 800a52c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	7e0f      	ldrb	r7, [r1, #24]
 800a532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a534:	2f78      	cmp	r7, #120	; 0x78
 800a536:	4691      	mov	r9, r2
 800a538:	4680      	mov	r8, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	469a      	mov	sl, r3
 800a53e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a542:	d807      	bhi.n	800a554 <_printf_i+0x28>
 800a544:	2f62      	cmp	r7, #98	; 0x62
 800a546:	d80a      	bhi.n	800a55e <_printf_i+0x32>
 800a548:	2f00      	cmp	r7, #0
 800a54a:	f000 80d8 	beq.w	800a6fe <_printf_i+0x1d2>
 800a54e:	2f58      	cmp	r7, #88	; 0x58
 800a550:	f000 80a3 	beq.w	800a69a <_printf_i+0x16e>
 800a554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a55c:	e03a      	b.n	800a5d4 <_printf_i+0xa8>
 800a55e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a562:	2b15      	cmp	r3, #21
 800a564:	d8f6      	bhi.n	800a554 <_printf_i+0x28>
 800a566:	a101      	add	r1, pc, #4	; (adr r1, 800a56c <_printf_i+0x40>)
 800a568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a56c:	0800a5c5 	.word	0x0800a5c5
 800a570:	0800a5d9 	.word	0x0800a5d9
 800a574:	0800a555 	.word	0x0800a555
 800a578:	0800a555 	.word	0x0800a555
 800a57c:	0800a555 	.word	0x0800a555
 800a580:	0800a555 	.word	0x0800a555
 800a584:	0800a5d9 	.word	0x0800a5d9
 800a588:	0800a555 	.word	0x0800a555
 800a58c:	0800a555 	.word	0x0800a555
 800a590:	0800a555 	.word	0x0800a555
 800a594:	0800a555 	.word	0x0800a555
 800a598:	0800a6e5 	.word	0x0800a6e5
 800a59c:	0800a609 	.word	0x0800a609
 800a5a0:	0800a6c7 	.word	0x0800a6c7
 800a5a4:	0800a555 	.word	0x0800a555
 800a5a8:	0800a555 	.word	0x0800a555
 800a5ac:	0800a707 	.word	0x0800a707
 800a5b0:	0800a555 	.word	0x0800a555
 800a5b4:	0800a609 	.word	0x0800a609
 800a5b8:	0800a555 	.word	0x0800a555
 800a5bc:	0800a555 	.word	0x0800a555
 800a5c0:	0800a6cf 	.word	0x0800a6cf
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	1d1a      	adds	r2, r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	602a      	str	r2, [r5, #0]
 800a5cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e0a3      	b.n	800a720 <_printf_i+0x1f4>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	6829      	ldr	r1, [r5, #0]
 800a5dc:	0606      	lsls	r6, r0, #24
 800a5de:	f101 0304 	add.w	r3, r1, #4
 800a5e2:	d50a      	bpl.n	800a5fa <_printf_i+0xce>
 800a5e4:	680e      	ldr	r6, [r1, #0]
 800a5e6:	602b      	str	r3, [r5, #0]
 800a5e8:	2e00      	cmp	r6, #0
 800a5ea:	da03      	bge.n	800a5f4 <_printf_i+0xc8>
 800a5ec:	232d      	movs	r3, #45	; 0x2d
 800a5ee:	4276      	negs	r6, r6
 800a5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f4:	485e      	ldr	r0, [pc, #376]	; (800a770 <_printf_i+0x244>)
 800a5f6:	230a      	movs	r3, #10
 800a5f8:	e019      	b.n	800a62e <_printf_i+0x102>
 800a5fa:	680e      	ldr	r6, [r1, #0]
 800a5fc:	602b      	str	r3, [r5, #0]
 800a5fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a602:	bf18      	it	ne
 800a604:	b236      	sxthne	r6, r6
 800a606:	e7ef      	b.n	800a5e8 <_printf_i+0xbc>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	6820      	ldr	r0, [r4, #0]
 800a60c:	1d19      	adds	r1, r3, #4
 800a60e:	6029      	str	r1, [r5, #0]
 800a610:	0601      	lsls	r1, r0, #24
 800a612:	d501      	bpl.n	800a618 <_printf_i+0xec>
 800a614:	681e      	ldr	r6, [r3, #0]
 800a616:	e002      	b.n	800a61e <_printf_i+0xf2>
 800a618:	0646      	lsls	r6, r0, #25
 800a61a:	d5fb      	bpl.n	800a614 <_printf_i+0xe8>
 800a61c:	881e      	ldrh	r6, [r3, #0]
 800a61e:	4854      	ldr	r0, [pc, #336]	; (800a770 <_printf_i+0x244>)
 800a620:	2f6f      	cmp	r7, #111	; 0x6f
 800a622:	bf0c      	ite	eq
 800a624:	2308      	moveq	r3, #8
 800a626:	230a      	movne	r3, #10
 800a628:	2100      	movs	r1, #0
 800a62a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a62e:	6865      	ldr	r5, [r4, #4]
 800a630:	60a5      	str	r5, [r4, #8]
 800a632:	2d00      	cmp	r5, #0
 800a634:	bfa2      	ittt	ge
 800a636:	6821      	ldrge	r1, [r4, #0]
 800a638:	f021 0104 	bicge.w	r1, r1, #4
 800a63c:	6021      	strge	r1, [r4, #0]
 800a63e:	b90e      	cbnz	r6, 800a644 <_printf_i+0x118>
 800a640:	2d00      	cmp	r5, #0
 800a642:	d04d      	beq.n	800a6e0 <_printf_i+0x1b4>
 800a644:	4615      	mov	r5, r2
 800a646:	fbb6 f1f3 	udiv	r1, r6, r3
 800a64a:	fb03 6711 	mls	r7, r3, r1, r6
 800a64e:	5dc7      	ldrb	r7, [r0, r7]
 800a650:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a654:	4637      	mov	r7, r6
 800a656:	42bb      	cmp	r3, r7
 800a658:	460e      	mov	r6, r1
 800a65a:	d9f4      	bls.n	800a646 <_printf_i+0x11a>
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d10b      	bne.n	800a678 <_printf_i+0x14c>
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	07de      	lsls	r6, r3, #31
 800a664:	d508      	bpl.n	800a678 <_printf_i+0x14c>
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	6861      	ldr	r1, [r4, #4]
 800a66a:	4299      	cmp	r1, r3
 800a66c:	bfde      	ittt	le
 800a66e:	2330      	movle	r3, #48	; 0x30
 800a670:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a674:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a678:	1b52      	subs	r2, r2, r5
 800a67a:	6122      	str	r2, [r4, #16]
 800a67c:	f8cd a000 	str.w	sl, [sp]
 800a680:	464b      	mov	r3, r9
 800a682:	aa03      	add	r2, sp, #12
 800a684:	4621      	mov	r1, r4
 800a686:	4640      	mov	r0, r8
 800a688:	f7ff fee2 	bl	800a450 <_printf_common>
 800a68c:	3001      	adds	r0, #1
 800a68e:	d14c      	bne.n	800a72a <_printf_i+0x1fe>
 800a690:	f04f 30ff 	mov.w	r0, #4294967295
 800a694:	b004      	add	sp, #16
 800a696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69a:	4835      	ldr	r0, [pc, #212]	; (800a770 <_printf_i+0x244>)
 800a69c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6a0:	6829      	ldr	r1, [r5, #0]
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6a8:	6029      	str	r1, [r5, #0]
 800a6aa:	061d      	lsls	r5, r3, #24
 800a6ac:	d514      	bpl.n	800a6d8 <_printf_i+0x1ac>
 800a6ae:	07df      	lsls	r7, r3, #31
 800a6b0:	bf44      	itt	mi
 800a6b2:	f043 0320 	orrmi.w	r3, r3, #32
 800a6b6:	6023      	strmi	r3, [r4, #0]
 800a6b8:	b91e      	cbnz	r6, 800a6c2 <_printf_i+0x196>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	f023 0320 	bic.w	r3, r3, #32
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	2310      	movs	r3, #16
 800a6c4:	e7b0      	b.n	800a628 <_printf_i+0xfc>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	f043 0320 	orr.w	r3, r3, #32
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	2378      	movs	r3, #120	; 0x78
 800a6d0:	4828      	ldr	r0, [pc, #160]	; (800a774 <_printf_i+0x248>)
 800a6d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6d6:	e7e3      	b.n	800a6a0 <_printf_i+0x174>
 800a6d8:	0659      	lsls	r1, r3, #25
 800a6da:	bf48      	it	mi
 800a6dc:	b2b6      	uxthmi	r6, r6
 800a6de:	e7e6      	b.n	800a6ae <_printf_i+0x182>
 800a6e0:	4615      	mov	r5, r2
 800a6e2:	e7bb      	b.n	800a65c <_printf_i+0x130>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	6826      	ldr	r6, [r4, #0]
 800a6e8:	6961      	ldr	r1, [r4, #20]
 800a6ea:	1d18      	adds	r0, r3, #4
 800a6ec:	6028      	str	r0, [r5, #0]
 800a6ee:	0635      	lsls	r5, r6, #24
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	d501      	bpl.n	800a6f8 <_printf_i+0x1cc>
 800a6f4:	6019      	str	r1, [r3, #0]
 800a6f6:	e002      	b.n	800a6fe <_printf_i+0x1d2>
 800a6f8:	0670      	lsls	r0, r6, #25
 800a6fa:	d5fb      	bpl.n	800a6f4 <_printf_i+0x1c8>
 800a6fc:	8019      	strh	r1, [r3, #0]
 800a6fe:	2300      	movs	r3, #0
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	4615      	mov	r5, r2
 800a704:	e7ba      	b.n	800a67c <_printf_i+0x150>
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	1d1a      	adds	r2, r3, #4
 800a70a:	602a      	str	r2, [r5, #0]
 800a70c:	681d      	ldr	r5, [r3, #0]
 800a70e:	6862      	ldr	r2, [r4, #4]
 800a710:	2100      	movs	r1, #0
 800a712:	4628      	mov	r0, r5
 800a714:	f7f5 fd74 	bl	8000200 <memchr>
 800a718:	b108      	cbz	r0, 800a71e <_printf_i+0x1f2>
 800a71a:	1b40      	subs	r0, r0, r5
 800a71c:	6060      	str	r0, [r4, #4]
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	2300      	movs	r3, #0
 800a724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a728:	e7a8      	b.n	800a67c <_printf_i+0x150>
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	462a      	mov	r2, r5
 800a72e:	4649      	mov	r1, r9
 800a730:	4640      	mov	r0, r8
 800a732:	47d0      	blx	sl
 800a734:	3001      	adds	r0, #1
 800a736:	d0ab      	beq.n	800a690 <_printf_i+0x164>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	079b      	lsls	r3, r3, #30
 800a73c:	d413      	bmi.n	800a766 <_printf_i+0x23a>
 800a73e:	68e0      	ldr	r0, [r4, #12]
 800a740:	9b03      	ldr	r3, [sp, #12]
 800a742:	4298      	cmp	r0, r3
 800a744:	bfb8      	it	lt
 800a746:	4618      	movlt	r0, r3
 800a748:	e7a4      	b.n	800a694 <_printf_i+0x168>
 800a74a:	2301      	movs	r3, #1
 800a74c:	4632      	mov	r2, r6
 800a74e:	4649      	mov	r1, r9
 800a750:	4640      	mov	r0, r8
 800a752:	47d0      	blx	sl
 800a754:	3001      	adds	r0, #1
 800a756:	d09b      	beq.n	800a690 <_printf_i+0x164>
 800a758:	3501      	adds	r5, #1
 800a75a:	68e3      	ldr	r3, [r4, #12]
 800a75c:	9903      	ldr	r1, [sp, #12]
 800a75e:	1a5b      	subs	r3, r3, r1
 800a760:	42ab      	cmp	r3, r5
 800a762:	dcf2      	bgt.n	800a74a <_printf_i+0x21e>
 800a764:	e7eb      	b.n	800a73e <_printf_i+0x212>
 800a766:	2500      	movs	r5, #0
 800a768:	f104 0619 	add.w	r6, r4, #25
 800a76c:	e7f5      	b.n	800a75a <_printf_i+0x22e>
 800a76e:	bf00      	nop
 800a770:	0800bc05 	.word	0x0800bc05
 800a774:	0800bc16 	.word	0x0800bc16

0800a778 <siscanf>:
 800a778:	b40e      	push	{r1, r2, r3}
 800a77a:	b510      	push	{r4, lr}
 800a77c:	b09f      	sub	sp, #124	; 0x7c
 800a77e:	ac21      	add	r4, sp, #132	; 0x84
 800a780:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a784:	f854 2b04 	ldr.w	r2, [r4], #4
 800a788:	9201      	str	r2, [sp, #4]
 800a78a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a78e:	9004      	str	r0, [sp, #16]
 800a790:	9008      	str	r0, [sp, #32]
 800a792:	f7f5 fd1d 	bl	80001d0 <strlen>
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <siscanf+0x50>)
 800a798:	9005      	str	r0, [sp, #20]
 800a79a:	9009      	str	r0, [sp, #36]	; 0x24
 800a79c:	930d      	str	r3, [sp, #52]	; 0x34
 800a79e:	480b      	ldr	r0, [pc, #44]	; (800a7cc <siscanf+0x54>)
 800a7a0:	9a01      	ldr	r2, [sp, #4]
 800a7a2:	6800      	ldr	r0, [r0, #0]
 800a7a4:	9403      	str	r4, [sp, #12]
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	9311      	str	r3, [sp, #68]	; 0x44
 800a7aa:	9316      	str	r3, [sp, #88]	; 0x58
 800a7ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a7b4:	a904      	add	r1, sp, #16
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	f000 fcb4 	bl	800b124 <__ssvfiscanf_r>
 800a7bc:	b01f      	add	sp, #124	; 0x7c
 800a7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c2:	b003      	add	sp, #12
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	0800a7f3 	.word	0x0800a7f3
 800a7cc:	20000110 	.word	0x20000110

0800a7d0 <__sread>:
 800a7d0:	b510      	push	{r4, lr}
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d8:	f000 ff6e 	bl	800b6b8 <_read_r>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	bfab      	itete	ge
 800a7e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7e2:	89a3      	ldrhlt	r3, [r4, #12]
 800a7e4:	181b      	addge	r3, r3, r0
 800a7e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7ea:	bfac      	ite	ge
 800a7ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7ee:	81a3      	strhlt	r3, [r4, #12]
 800a7f0:	bd10      	pop	{r4, pc}

0800a7f2 <__seofread>:
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	4770      	bx	lr

0800a7f6 <__swrite>:
 800a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	898b      	ldrh	r3, [r1, #12]
 800a7fe:	05db      	lsls	r3, r3, #23
 800a800:	4605      	mov	r5, r0
 800a802:	460c      	mov	r4, r1
 800a804:	4616      	mov	r6, r2
 800a806:	d505      	bpl.n	800a814 <__swrite+0x1e>
 800a808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a80c:	2302      	movs	r3, #2
 800a80e:	2200      	movs	r2, #0
 800a810:	f000 fb6c 	bl	800aeec <_lseek_r>
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a81a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	4632      	mov	r2, r6
 800a822:	463b      	mov	r3, r7
 800a824:	4628      	mov	r0, r5
 800a826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a82a:	f000 b903 	b.w	800aa34 <_write_r>

0800a82e <__sseek>:
 800a82e:	b510      	push	{r4, lr}
 800a830:	460c      	mov	r4, r1
 800a832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a836:	f000 fb59 	bl	800aeec <_lseek_r>
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	bf15      	itete	ne
 800a840:	6560      	strne	r0, [r4, #84]	; 0x54
 800a842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a84a:	81a3      	strheq	r3, [r4, #12]
 800a84c:	bf18      	it	ne
 800a84e:	81a3      	strhne	r3, [r4, #12]
 800a850:	bd10      	pop	{r4, pc}

0800a852 <__sclose>:
 800a852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a856:	f000 b975 	b.w	800ab44 <_close_r>

0800a85a <strcpy>:
 800a85a:	4603      	mov	r3, r0
 800a85c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a860:	f803 2b01 	strb.w	r2, [r3], #1
 800a864:	2a00      	cmp	r2, #0
 800a866:	d1f9      	bne.n	800a85c <strcpy+0x2>
 800a868:	4770      	bx	lr

0800a86a <strncmp>:
 800a86a:	b510      	push	{r4, lr}
 800a86c:	b17a      	cbz	r2, 800a88e <strncmp+0x24>
 800a86e:	4603      	mov	r3, r0
 800a870:	3901      	subs	r1, #1
 800a872:	1884      	adds	r4, r0, r2
 800a874:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a878:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a87c:	4290      	cmp	r0, r2
 800a87e:	d101      	bne.n	800a884 <strncmp+0x1a>
 800a880:	42a3      	cmp	r3, r4
 800a882:	d101      	bne.n	800a888 <strncmp+0x1e>
 800a884:	1a80      	subs	r0, r0, r2
 800a886:	bd10      	pop	{r4, pc}
 800a888:	2800      	cmp	r0, #0
 800a88a:	d1f3      	bne.n	800a874 <strncmp+0xa>
 800a88c:	e7fa      	b.n	800a884 <strncmp+0x1a>
 800a88e:	4610      	mov	r0, r2
 800a890:	e7f9      	b.n	800a886 <strncmp+0x1c>
	...

0800a894 <_strtoul_l.constprop.0>:
 800a894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a898:	4f36      	ldr	r7, [pc, #216]	; (800a974 <_strtoul_l.constprop.0+0xe0>)
 800a89a:	4686      	mov	lr, r0
 800a89c:	460d      	mov	r5, r1
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8a4:	5de6      	ldrb	r6, [r4, r7]
 800a8a6:	f016 0608 	ands.w	r6, r6, #8
 800a8aa:	d1f8      	bne.n	800a89e <_strtoul_l.constprop.0+0xa>
 800a8ac:	2c2d      	cmp	r4, #45	; 0x2d
 800a8ae:	d12f      	bne.n	800a910 <_strtoul_l.constprop.0+0x7c>
 800a8b0:	782c      	ldrb	r4, [r5, #0]
 800a8b2:	2601      	movs	r6, #1
 800a8b4:	1c85      	adds	r5, r0, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d057      	beq.n	800a96a <_strtoul_l.constprop.0+0xd6>
 800a8ba:	2b10      	cmp	r3, #16
 800a8bc:	d109      	bne.n	800a8d2 <_strtoul_l.constprop.0+0x3e>
 800a8be:	2c30      	cmp	r4, #48	; 0x30
 800a8c0:	d107      	bne.n	800a8d2 <_strtoul_l.constprop.0+0x3e>
 800a8c2:	7828      	ldrb	r0, [r5, #0]
 800a8c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a8c8:	2858      	cmp	r0, #88	; 0x58
 800a8ca:	d149      	bne.n	800a960 <_strtoul_l.constprop.0+0xcc>
 800a8cc:	786c      	ldrb	r4, [r5, #1]
 800a8ce:	2310      	movs	r3, #16
 800a8d0:	3502      	adds	r5, #2
 800a8d2:	f04f 38ff 	mov.w	r8, #4294967295
 800a8d6:	2700      	movs	r7, #0
 800a8d8:	fbb8 f8f3 	udiv	r8, r8, r3
 800a8dc:	fb03 f908 	mul.w	r9, r3, r8
 800a8e0:	ea6f 0909 	mvn.w	r9, r9
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a8ea:	f1bc 0f09 	cmp.w	ip, #9
 800a8ee:	d814      	bhi.n	800a91a <_strtoul_l.constprop.0+0x86>
 800a8f0:	4664      	mov	r4, ip
 800a8f2:	42a3      	cmp	r3, r4
 800a8f4:	dd22      	ble.n	800a93c <_strtoul_l.constprop.0+0xa8>
 800a8f6:	2f00      	cmp	r7, #0
 800a8f8:	db1d      	blt.n	800a936 <_strtoul_l.constprop.0+0xa2>
 800a8fa:	4580      	cmp	r8, r0
 800a8fc:	d31b      	bcc.n	800a936 <_strtoul_l.constprop.0+0xa2>
 800a8fe:	d101      	bne.n	800a904 <_strtoul_l.constprop.0+0x70>
 800a900:	45a1      	cmp	r9, r4
 800a902:	db18      	blt.n	800a936 <_strtoul_l.constprop.0+0xa2>
 800a904:	fb00 4003 	mla	r0, r0, r3, r4
 800a908:	2701      	movs	r7, #1
 800a90a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a90e:	e7ea      	b.n	800a8e6 <_strtoul_l.constprop.0+0x52>
 800a910:	2c2b      	cmp	r4, #43	; 0x2b
 800a912:	bf04      	itt	eq
 800a914:	782c      	ldrbeq	r4, [r5, #0]
 800a916:	1c85      	addeq	r5, r0, #2
 800a918:	e7cd      	b.n	800a8b6 <_strtoul_l.constprop.0+0x22>
 800a91a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a91e:	f1bc 0f19 	cmp.w	ip, #25
 800a922:	d801      	bhi.n	800a928 <_strtoul_l.constprop.0+0x94>
 800a924:	3c37      	subs	r4, #55	; 0x37
 800a926:	e7e4      	b.n	800a8f2 <_strtoul_l.constprop.0+0x5e>
 800a928:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a92c:	f1bc 0f19 	cmp.w	ip, #25
 800a930:	d804      	bhi.n	800a93c <_strtoul_l.constprop.0+0xa8>
 800a932:	3c57      	subs	r4, #87	; 0x57
 800a934:	e7dd      	b.n	800a8f2 <_strtoul_l.constprop.0+0x5e>
 800a936:	f04f 37ff 	mov.w	r7, #4294967295
 800a93a:	e7e6      	b.n	800a90a <_strtoul_l.constprop.0+0x76>
 800a93c:	2f00      	cmp	r7, #0
 800a93e:	da07      	bge.n	800a950 <_strtoul_l.constprop.0+0xbc>
 800a940:	2322      	movs	r3, #34	; 0x22
 800a942:	f8ce 3000 	str.w	r3, [lr]
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	b932      	cbnz	r2, 800a95a <_strtoul_l.constprop.0+0xc6>
 800a94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a950:	b106      	cbz	r6, 800a954 <_strtoul_l.constprop.0+0xc0>
 800a952:	4240      	negs	r0, r0
 800a954:	2a00      	cmp	r2, #0
 800a956:	d0f9      	beq.n	800a94c <_strtoul_l.constprop.0+0xb8>
 800a958:	b107      	cbz	r7, 800a95c <_strtoul_l.constprop.0+0xc8>
 800a95a:	1e69      	subs	r1, r5, #1
 800a95c:	6011      	str	r1, [r2, #0]
 800a95e:	e7f5      	b.n	800a94c <_strtoul_l.constprop.0+0xb8>
 800a960:	2430      	movs	r4, #48	; 0x30
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1b5      	bne.n	800a8d2 <_strtoul_l.constprop.0+0x3e>
 800a966:	2308      	movs	r3, #8
 800a968:	e7b3      	b.n	800a8d2 <_strtoul_l.constprop.0+0x3e>
 800a96a:	2c30      	cmp	r4, #48	; 0x30
 800a96c:	d0a9      	beq.n	800a8c2 <_strtoul_l.constprop.0+0x2e>
 800a96e:	230a      	movs	r3, #10
 800a970:	e7af      	b.n	800a8d2 <_strtoul_l.constprop.0+0x3e>
 800a972:	bf00      	nop
 800a974:	0800bc28 	.word	0x0800bc28

0800a978 <_strtoul_r>:
 800a978:	f7ff bf8c 	b.w	800a894 <_strtoul_l.constprop.0>

0800a97c <strtoul>:
 800a97c:	4613      	mov	r3, r2
 800a97e:	460a      	mov	r2, r1
 800a980:	4601      	mov	r1, r0
 800a982:	4802      	ldr	r0, [pc, #8]	; (800a98c <strtoul+0x10>)
 800a984:	6800      	ldr	r0, [r0, #0]
 800a986:	f7ff bf85 	b.w	800a894 <_strtoul_l.constprop.0>
 800a98a:	bf00      	nop
 800a98c:	20000110 	.word	0x20000110

0800a990 <__swbuf_r>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	460e      	mov	r6, r1
 800a994:	4614      	mov	r4, r2
 800a996:	4605      	mov	r5, r0
 800a998:	b118      	cbz	r0, 800a9a2 <__swbuf_r+0x12>
 800a99a:	6983      	ldr	r3, [r0, #24]
 800a99c:	b90b      	cbnz	r3, 800a9a2 <__swbuf_r+0x12>
 800a99e:	f000 fa07 	bl	800adb0 <__sinit>
 800a9a2:	4b21      	ldr	r3, [pc, #132]	; (800aa28 <__swbuf_r+0x98>)
 800a9a4:	429c      	cmp	r4, r3
 800a9a6:	d12b      	bne.n	800aa00 <__swbuf_r+0x70>
 800a9a8:	686c      	ldr	r4, [r5, #4]
 800a9aa:	69a3      	ldr	r3, [r4, #24]
 800a9ac:	60a3      	str	r3, [r4, #8]
 800a9ae:	89a3      	ldrh	r3, [r4, #12]
 800a9b0:	071a      	lsls	r2, r3, #28
 800a9b2:	d52f      	bpl.n	800aa14 <__swbuf_r+0x84>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	b36b      	cbz	r3, 800aa14 <__swbuf_r+0x84>
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	6820      	ldr	r0, [r4, #0]
 800a9bc:	1ac0      	subs	r0, r0, r3
 800a9be:	6963      	ldr	r3, [r4, #20]
 800a9c0:	b2f6      	uxtb	r6, r6
 800a9c2:	4283      	cmp	r3, r0
 800a9c4:	4637      	mov	r7, r6
 800a9c6:	dc04      	bgt.n	800a9d2 <__swbuf_r+0x42>
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f000 f95c 	bl	800ac88 <_fflush_r>
 800a9d0:	bb30      	cbnz	r0, 800aa20 <__swbuf_r+0x90>
 800a9d2:	68a3      	ldr	r3, [r4, #8]
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	60a3      	str	r3, [r4, #8]
 800a9d8:	6823      	ldr	r3, [r4, #0]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	6022      	str	r2, [r4, #0]
 800a9de:	701e      	strb	r6, [r3, #0]
 800a9e0:	6963      	ldr	r3, [r4, #20]
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	4283      	cmp	r3, r0
 800a9e6:	d004      	beq.n	800a9f2 <__swbuf_r+0x62>
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	07db      	lsls	r3, r3, #31
 800a9ec:	d506      	bpl.n	800a9fc <__swbuf_r+0x6c>
 800a9ee:	2e0a      	cmp	r6, #10
 800a9f0:	d104      	bne.n	800a9fc <__swbuf_r+0x6c>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f000 f947 	bl	800ac88 <_fflush_r>
 800a9fa:	b988      	cbnz	r0, 800aa20 <__swbuf_r+0x90>
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <__swbuf_r+0x9c>)
 800aa02:	429c      	cmp	r4, r3
 800aa04:	d101      	bne.n	800aa0a <__swbuf_r+0x7a>
 800aa06:	68ac      	ldr	r4, [r5, #8]
 800aa08:	e7cf      	b.n	800a9aa <__swbuf_r+0x1a>
 800aa0a:	4b09      	ldr	r3, [pc, #36]	; (800aa30 <__swbuf_r+0xa0>)
 800aa0c:	429c      	cmp	r4, r3
 800aa0e:	bf08      	it	eq
 800aa10:	68ec      	ldreq	r4, [r5, #12]
 800aa12:	e7ca      	b.n	800a9aa <__swbuf_r+0x1a>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4628      	mov	r0, r5
 800aa18:	f000 f81e 	bl	800aa58 <__swsetup_r>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d0cb      	beq.n	800a9b8 <__swbuf_r+0x28>
 800aa20:	f04f 37ff 	mov.w	r7, #4294967295
 800aa24:	e7ea      	b.n	800a9fc <__swbuf_r+0x6c>
 800aa26:	bf00      	nop
 800aa28:	0800bd48 	.word	0x0800bd48
 800aa2c:	0800bd68 	.word	0x0800bd68
 800aa30:	0800bd28 	.word	0x0800bd28

0800aa34 <_write_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_write_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f8 ff43 	bl	80038ce <_write>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_write_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_write_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20000d10 	.word	0x20000d10

0800aa58 <__swsetup_r>:
 800aa58:	4b32      	ldr	r3, [pc, #200]	; (800ab24 <__swsetup_r+0xcc>)
 800aa5a:	b570      	push	{r4, r5, r6, lr}
 800aa5c:	681d      	ldr	r5, [r3, #0]
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460c      	mov	r4, r1
 800aa62:	b125      	cbz	r5, 800aa6e <__swsetup_r+0x16>
 800aa64:	69ab      	ldr	r3, [r5, #24]
 800aa66:	b913      	cbnz	r3, 800aa6e <__swsetup_r+0x16>
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f000 f9a1 	bl	800adb0 <__sinit>
 800aa6e:	4b2e      	ldr	r3, [pc, #184]	; (800ab28 <__swsetup_r+0xd0>)
 800aa70:	429c      	cmp	r4, r3
 800aa72:	d10f      	bne.n	800aa94 <__swsetup_r+0x3c>
 800aa74:	686c      	ldr	r4, [r5, #4]
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa7c:	0719      	lsls	r1, r3, #28
 800aa7e:	d42c      	bmi.n	800aada <__swsetup_r+0x82>
 800aa80:	06dd      	lsls	r5, r3, #27
 800aa82:	d411      	bmi.n	800aaa8 <__swsetup_r+0x50>
 800aa84:	2309      	movs	r3, #9
 800aa86:	6033      	str	r3, [r6, #0]
 800aa88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa8c:	81a3      	strh	r3, [r4, #12]
 800aa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa92:	e03e      	b.n	800ab12 <__swsetup_r+0xba>
 800aa94:	4b25      	ldr	r3, [pc, #148]	; (800ab2c <__swsetup_r+0xd4>)
 800aa96:	429c      	cmp	r4, r3
 800aa98:	d101      	bne.n	800aa9e <__swsetup_r+0x46>
 800aa9a:	68ac      	ldr	r4, [r5, #8]
 800aa9c:	e7eb      	b.n	800aa76 <__swsetup_r+0x1e>
 800aa9e:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <__swsetup_r+0xd8>)
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	bf08      	it	eq
 800aaa4:	68ec      	ldreq	r4, [r5, #12]
 800aaa6:	e7e6      	b.n	800aa76 <__swsetup_r+0x1e>
 800aaa8:	0758      	lsls	r0, r3, #29
 800aaaa:	d512      	bpl.n	800aad2 <__swsetup_r+0x7a>
 800aaac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaae:	b141      	cbz	r1, 800aac2 <__swsetup_r+0x6a>
 800aab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab4:	4299      	cmp	r1, r3
 800aab6:	d002      	beq.n	800aabe <__swsetup_r+0x66>
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7fe fd91 	bl	80095e0 <_free_r>
 800aabe:	2300      	movs	r3, #0
 800aac0:	6363      	str	r3, [r4, #52]	; 0x34
 800aac2:	89a3      	ldrh	r3, [r4, #12]
 800aac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	2300      	movs	r3, #0
 800aacc:	6063      	str	r3, [r4, #4]
 800aace:	6923      	ldr	r3, [r4, #16]
 800aad0:	6023      	str	r3, [r4, #0]
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f043 0308 	orr.w	r3, r3, #8
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	b94b      	cbnz	r3, 800aaf2 <__swsetup_r+0x9a>
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aae8:	d003      	beq.n	800aaf2 <__swsetup_r+0x9a>
 800aaea:	4621      	mov	r1, r4
 800aaec:	4630      	mov	r0, r6
 800aaee:	f000 fa35 	bl	800af5c <__smakebuf_r>
 800aaf2:	89a0      	ldrh	r0, [r4, #12]
 800aaf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf8:	f010 0301 	ands.w	r3, r0, #1
 800aafc:	d00a      	beq.n	800ab14 <__swsetup_r+0xbc>
 800aafe:	2300      	movs	r3, #0
 800ab00:	60a3      	str	r3, [r4, #8]
 800ab02:	6963      	ldr	r3, [r4, #20]
 800ab04:	425b      	negs	r3, r3
 800ab06:	61a3      	str	r3, [r4, #24]
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	b943      	cbnz	r3, 800ab1e <__swsetup_r+0xc6>
 800ab0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab10:	d1ba      	bne.n	800aa88 <__swsetup_r+0x30>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	0781      	lsls	r1, r0, #30
 800ab16:	bf58      	it	pl
 800ab18:	6963      	ldrpl	r3, [r4, #20]
 800ab1a:	60a3      	str	r3, [r4, #8]
 800ab1c:	e7f4      	b.n	800ab08 <__swsetup_r+0xb0>
 800ab1e:	2000      	movs	r0, #0
 800ab20:	e7f7      	b.n	800ab12 <__swsetup_r+0xba>
 800ab22:	bf00      	nop
 800ab24:	20000110 	.word	0x20000110
 800ab28:	0800bd48 	.word	0x0800bd48
 800ab2c:	0800bd68 	.word	0x0800bd68
 800ab30:	0800bd28 	.word	0x0800bd28

0800ab34 <abort>:
 800ab34:	b508      	push	{r3, lr}
 800ab36:	2006      	movs	r0, #6
 800ab38:	f000 fe30 	bl	800b79c <raise>
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	f7f8 fe9f 	bl	8003880 <_exit>
	...

0800ab44 <_close_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d06      	ldr	r5, [pc, #24]	; (800ab60 <_close_r+0x1c>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	602b      	str	r3, [r5, #0]
 800ab50:	f7f8 fed9 	bl	8003906 <_close>
 800ab54:	1c43      	adds	r3, r0, #1
 800ab56:	d102      	bne.n	800ab5e <_close_r+0x1a>
 800ab58:	682b      	ldr	r3, [r5, #0]
 800ab5a:	b103      	cbz	r3, 800ab5e <_close_r+0x1a>
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	20000d10 	.word	0x20000d10

0800ab64 <__env_lock>:
 800ab64:	4801      	ldr	r0, [pc, #4]	; (800ab6c <__env_lock+0x8>)
 800ab66:	f7ff b9ad 	b.w	8009ec4 <__retarget_lock_acquire_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	20000d08 	.word	0x20000d08

0800ab70 <__env_unlock>:
 800ab70:	4801      	ldr	r0, [pc, #4]	; (800ab78 <__env_unlock+0x8>)
 800ab72:	f7ff b9a9 	b.w	8009ec8 <__retarget_lock_release_recursive>
 800ab76:	bf00      	nop
 800ab78:	20000d08 	.word	0x20000d08

0800ab7c <__sflush_r>:
 800ab7c:	898a      	ldrh	r2, [r1, #12]
 800ab7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	4605      	mov	r5, r0
 800ab84:	0710      	lsls	r0, r2, #28
 800ab86:	460c      	mov	r4, r1
 800ab88:	d458      	bmi.n	800ac3c <__sflush_r+0xc0>
 800ab8a:	684b      	ldr	r3, [r1, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dc05      	bgt.n	800ab9c <__sflush_r+0x20>
 800ab90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	dc02      	bgt.n	800ab9c <__sflush_r+0x20>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab9e:	2e00      	cmp	r6, #0
 800aba0:	d0f9      	beq.n	800ab96 <__sflush_r+0x1a>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aba8:	682f      	ldr	r7, [r5, #0]
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	d032      	beq.n	800ac14 <__sflush_r+0x98>
 800abae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	075a      	lsls	r2, r3, #29
 800abb4:	d505      	bpl.n	800abc2 <__sflush_r+0x46>
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	1ac0      	subs	r0, r0, r3
 800abba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abbc:	b10b      	cbz	r3, 800abc2 <__sflush_r+0x46>
 800abbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abc0:	1ac0      	subs	r0, r0, r3
 800abc2:	2300      	movs	r3, #0
 800abc4:	4602      	mov	r2, r0
 800abc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abc8:	6a21      	ldr	r1, [r4, #32]
 800abca:	4628      	mov	r0, r5
 800abcc:	47b0      	blx	r6
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	d106      	bne.n	800abe2 <__sflush_r+0x66>
 800abd4:	6829      	ldr	r1, [r5, #0]
 800abd6:	291d      	cmp	r1, #29
 800abd8:	d82c      	bhi.n	800ac34 <__sflush_r+0xb8>
 800abda:	4a2a      	ldr	r2, [pc, #168]	; (800ac84 <__sflush_r+0x108>)
 800abdc:	40ca      	lsrs	r2, r1
 800abde:	07d6      	lsls	r6, r2, #31
 800abe0:	d528      	bpl.n	800ac34 <__sflush_r+0xb8>
 800abe2:	2200      	movs	r2, #0
 800abe4:	6062      	str	r2, [r4, #4]
 800abe6:	04d9      	lsls	r1, r3, #19
 800abe8:	6922      	ldr	r2, [r4, #16]
 800abea:	6022      	str	r2, [r4, #0]
 800abec:	d504      	bpl.n	800abf8 <__sflush_r+0x7c>
 800abee:	1c42      	adds	r2, r0, #1
 800abf0:	d101      	bne.n	800abf6 <__sflush_r+0x7a>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b903      	cbnz	r3, 800abf8 <__sflush_r+0x7c>
 800abf6:	6560      	str	r0, [r4, #84]	; 0x54
 800abf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfa:	602f      	str	r7, [r5, #0]
 800abfc:	2900      	cmp	r1, #0
 800abfe:	d0ca      	beq.n	800ab96 <__sflush_r+0x1a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__sflush_r+0x92>
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7fe fce9 	bl	80095e0 <_free_r>
 800ac0e:	2000      	movs	r0, #0
 800ac10:	6360      	str	r0, [r4, #52]	; 0x34
 800ac12:	e7c1      	b.n	800ab98 <__sflush_r+0x1c>
 800ac14:	6a21      	ldr	r1, [r4, #32]
 800ac16:	2301      	movs	r3, #1
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b0      	blx	r6
 800ac1c:	1c41      	adds	r1, r0, #1
 800ac1e:	d1c7      	bne.n	800abb0 <__sflush_r+0x34>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0c4      	beq.n	800abb0 <__sflush_r+0x34>
 800ac26:	2b1d      	cmp	r3, #29
 800ac28:	d001      	beq.n	800ac2e <__sflush_r+0xb2>
 800ac2a:	2b16      	cmp	r3, #22
 800ac2c:	d101      	bne.n	800ac32 <__sflush_r+0xb6>
 800ac2e:	602f      	str	r7, [r5, #0]
 800ac30:	e7b1      	b.n	800ab96 <__sflush_r+0x1a>
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac38:	81a3      	strh	r3, [r4, #12]
 800ac3a:	e7ad      	b.n	800ab98 <__sflush_r+0x1c>
 800ac3c:	690f      	ldr	r7, [r1, #16]
 800ac3e:	2f00      	cmp	r7, #0
 800ac40:	d0a9      	beq.n	800ab96 <__sflush_r+0x1a>
 800ac42:	0793      	lsls	r3, r2, #30
 800ac44:	680e      	ldr	r6, [r1, #0]
 800ac46:	bf08      	it	eq
 800ac48:	694b      	ldreq	r3, [r1, #20]
 800ac4a:	600f      	str	r7, [r1, #0]
 800ac4c:	bf18      	it	ne
 800ac4e:	2300      	movne	r3, #0
 800ac50:	eba6 0807 	sub.w	r8, r6, r7
 800ac54:	608b      	str	r3, [r1, #8]
 800ac56:	f1b8 0f00 	cmp.w	r8, #0
 800ac5a:	dd9c      	ble.n	800ab96 <__sflush_r+0x1a>
 800ac5c:	6a21      	ldr	r1, [r4, #32]
 800ac5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac60:	4643      	mov	r3, r8
 800ac62:	463a      	mov	r2, r7
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b0      	blx	r6
 800ac68:	2800      	cmp	r0, #0
 800ac6a:	dc06      	bgt.n	800ac7a <__sflush_r+0xfe>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	e78e      	b.n	800ab98 <__sflush_r+0x1c>
 800ac7a:	4407      	add	r7, r0
 800ac7c:	eba8 0800 	sub.w	r8, r8, r0
 800ac80:	e7e9      	b.n	800ac56 <__sflush_r+0xda>
 800ac82:	bf00      	nop
 800ac84:	20400001 	.word	0x20400001

0800ac88 <_fflush_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	690b      	ldr	r3, [r1, #16]
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	b913      	cbnz	r3, 800ac98 <_fflush_r+0x10>
 800ac92:	2500      	movs	r5, #0
 800ac94:	4628      	mov	r0, r5
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	b118      	cbz	r0, 800aca2 <_fflush_r+0x1a>
 800ac9a:	6983      	ldr	r3, [r0, #24]
 800ac9c:	b90b      	cbnz	r3, 800aca2 <_fflush_r+0x1a>
 800ac9e:	f000 f887 	bl	800adb0 <__sinit>
 800aca2:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <_fflush_r+0x6c>)
 800aca4:	429c      	cmp	r4, r3
 800aca6:	d11b      	bne.n	800ace0 <_fflush_r+0x58>
 800aca8:	686c      	ldr	r4, [r5, #4]
 800acaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0ef      	beq.n	800ac92 <_fflush_r+0xa>
 800acb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acb4:	07d0      	lsls	r0, r2, #31
 800acb6:	d404      	bmi.n	800acc2 <_fflush_r+0x3a>
 800acb8:	0599      	lsls	r1, r3, #22
 800acba:	d402      	bmi.n	800acc2 <_fflush_r+0x3a>
 800acbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acbe:	f7ff f901 	bl	8009ec4 <__retarget_lock_acquire_recursive>
 800acc2:	4628      	mov	r0, r5
 800acc4:	4621      	mov	r1, r4
 800acc6:	f7ff ff59 	bl	800ab7c <__sflush_r>
 800acca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800accc:	07da      	lsls	r2, r3, #31
 800acce:	4605      	mov	r5, r0
 800acd0:	d4e0      	bmi.n	800ac94 <_fflush_r+0xc>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	059b      	lsls	r3, r3, #22
 800acd6:	d4dd      	bmi.n	800ac94 <_fflush_r+0xc>
 800acd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acda:	f7ff f8f5 	bl	8009ec8 <__retarget_lock_release_recursive>
 800acde:	e7d9      	b.n	800ac94 <_fflush_r+0xc>
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <_fflush_r+0x70>)
 800ace2:	429c      	cmp	r4, r3
 800ace4:	d101      	bne.n	800acea <_fflush_r+0x62>
 800ace6:	68ac      	ldr	r4, [r5, #8]
 800ace8:	e7df      	b.n	800acaa <_fflush_r+0x22>
 800acea:	4b04      	ldr	r3, [pc, #16]	; (800acfc <_fflush_r+0x74>)
 800acec:	429c      	cmp	r4, r3
 800acee:	bf08      	it	eq
 800acf0:	68ec      	ldreq	r4, [r5, #12]
 800acf2:	e7da      	b.n	800acaa <_fflush_r+0x22>
 800acf4:	0800bd48 	.word	0x0800bd48
 800acf8:	0800bd68 	.word	0x0800bd68
 800acfc:	0800bd28 	.word	0x0800bd28

0800ad00 <std>:
 800ad00:	2300      	movs	r3, #0
 800ad02:	b510      	push	{r4, lr}
 800ad04:	4604      	mov	r4, r0
 800ad06:	e9c0 3300 	strd	r3, r3, [r0]
 800ad0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad0e:	6083      	str	r3, [r0, #8]
 800ad10:	8181      	strh	r1, [r0, #12]
 800ad12:	6643      	str	r3, [r0, #100]	; 0x64
 800ad14:	81c2      	strh	r2, [r0, #14]
 800ad16:	6183      	str	r3, [r0, #24]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	305c      	adds	r0, #92	; 0x5c
 800ad1e:	f7fe fc57 	bl	80095d0 <memset>
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <std+0x38>)
 800ad24:	6263      	str	r3, [r4, #36]	; 0x24
 800ad26:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <std+0x3c>)
 800ad28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad2a:	4b05      	ldr	r3, [pc, #20]	; (800ad40 <std+0x40>)
 800ad2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad2e:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <std+0x44>)
 800ad30:	6224      	str	r4, [r4, #32]
 800ad32:	6323      	str	r3, [r4, #48]	; 0x30
 800ad34:	bd10      	pop	{r4, pc}
 800ad36:	bf00      	nop
 800ad38:	0800a7d1 	.word	0x0800a7d1
 800ad3c:	0800a7f7 	.word	0x0800a7f7
 800ad40:	0800a82f 	.word	0x0800a82f
 800ad44:	0800a853 	.word	0x0800a853

0800ad48 <_cleanup_r>:
 800ad48:	4901      	ldr	r1, [pc, #4]	; (800ad50 <_cleanup_r+0x8>)
 800ad4a:	f000 b8af 	b.w	800aeac <_fwalk_reent>
 800ad4e:	bf00      	nop
 800ad50:	0800ac89 	.word	0x0800ac89

0800ad54 <__sfmoreglue>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	2268      	movs	r2, #104	; 0x68
 800ad58:	1e4d      	subs	r5, r1, #1
 800ad5a:	4355      	muls	r5, r2
 800ad5c:	460e      	mov	r6, r1
 800ad5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad62:	f7fe fca9 	bl	80096b8 <_malloc_r>
 800ad66:	4604      	mov	r4, r0
 800ad68:	b140      	cbz	r0, 800ad7c <__sfmoreglue+0x28>
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ad70:	300c      	adds	r0, #12
 800ad72:	60a0      	str	r0, [r4, #8]
 800ad74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad78:	f7fe fc2a 	bl	80095d0 <memset>
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}

0800ad80 <__sfp_lock_acquire>:
 800ad80:	4801      	ldr	r0, [pc, #4]	; (800ad88 <__sfp_lock_acquire+0x8>)
 800ad82:	f7ff b89f 	b.w	8009ec4 <__retarget_lock_acquire_recursive>
 800ad86:	bf00      	nop
 800ad88:	20000d0a 	.word	0x20000d0a

0800ad8c <__sfp_lock_release>:
 800ad8c:	4801      	ldr	r0, [pc, #4]	; (800ad94 <__sfp_lock_release+0x8>)
 800ad8e:	f7ff b89b 	b.w	8009ec8 <__retarget_lock_release_recursive>
 800ad92:	bf00      	nop
 800ad94:	20000d0a 	.word	0x20000d0a

0800ad98 <__sinit_lock_acquire>:
 800ad98:	4801      	ldr	r0, [pc, #4]	; (800ada0 <__sinit_lock_acquire+0x8>)
 800ad9a:	f7ff b893 	b.w	8009ec4 <__retarget_lock_acquire_recursive>
 800ad9e:	bf00      	nop
 800ada0:	20000d0b 	.word	0x20000d0b

0800ada4 <__sinit_lock_release>:
 800ada4:	4801      	ldr	r0, [pc, #4]	; (800adac <__sinit_lock_release+0x8>)
 800ada6:	f7ff b88f 	b.w	8009ec8 <__retarget_lock_release_recursive>
 800adaa:	bf00      	nop
 800adac:	20000d0b 	.word	0x20000d0b

0800adb0 <__sinit>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	4604      	mov	r4, r0
 800adb4:	f7ff fff0 	bl	800ad98 <__sinit_lock_acquire>
 800adb8:	69a3      	ldr	r3, [r4, #24]
 800adba:	b11b      	cbz	r3, 800adc4 <__sinit+0x14>
 800adbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc0:	f7ff bff0 	b.w	800ada4 <__sinit_lock_release>
 800adc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adc8:	6523      	str	r3, [r4, #80]	; 0x50
 800adca:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <__sinit+0x68>)
 800adcc:	4a13      	ldr	r2, [pc, #76]	; (800ae1c <__sinit+0x6c>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	62a2      	str	r2, [r4, #40]	; 0x28
 800add2:	42a3      	cmp	r3, r4
 800add4:	bf04      	itt	eq
 800add6:	2301      	moveq	r3, #1
 800add8:	61a3      	streq	r3, [r4, #24]
 800adda:	4620      	mov	r0, r4
 800addc:	f000 f820 	bl	800ae20 <__sfp>
 800ade0:	6060      	str	r0, [r4, #4]
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 f81c 	bl	800ae20 <__sfp>
 800ade8:	60a0      	str	r0, [r4, #8]
 800adea:	4620      	mov	r0, r4
 800adec:	f000 f818 	bl	800ae20 <__sfp>
 800adf0:	2200      	movs	r2, #0
 800adf2:	60e0      	str	r0, [r4, #12]
 800adf4:	2104      	movs	r1, #4
 800adf6:	6860      	ldr	r0, [r4, #4]
 800adf8:	f7ff ff82 	bl	800ad00 <std>
 800adfc:	68a0      	ldr	r0, [r4, #8]
 800adfe:	2201      	movs	r2, #1
 800ae00:	2109      	movs	r1, #9
 800ae02:	f7ff ff7d 	bl	800ad00 <std>
 800ae06:	68e0      	ldr	r0, [r4, #12]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	2112      	movs	r1, #18
 800ae0c:	f7ff ff78 	bl	800ad00 <std>
 800ae10:	2301      	movs	r3, #1
 800ae12:	61a3      	str	r3, [r4, #24]
 800ae14:	e7d2      	b.n	800adbc <__sinit+0xc>
 800ae16:	bf00      	nop
 800ae18:	0800baa4 	.word	0x0800baa4
 800ae1c:	0800ad49 	.word	0x0800ad49

0800ae20 <__sfp>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	4607      	mov	r7, r0
 800ae24:	f7ff ffac 	bl	800ad80 <__sfp_lock_acquire>
 800ae28:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <__sfp+0x84>)
 800ae2a:	681e      	ldr	r6, [r3, #0]
 800ae2c:	69b3      	ldr	r3, [r6, #24]
 800ae2e:	b913      	cbnz	r3, 800ae36 <__sfp+0x16>
 800ae30:	4630      	mov	r0, r6
 800ae32:	f7ff ffbd 	bl	800adb0 <__sinit>
 800ae36:	3648      	adds	r6, #72	; 0x48
 800ae38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	d503      	bpl.n	800ae48 <__sfp+0x28>
 800ae40:	6833      	ldr	r3, [r6, #0]
 800ae42:	b30b      	cbz	r3, 800ae88 <__sfp+0x68>
 800ae44:	6836      	ldr	r6, [r6, #0]
 800ae46:	e7f7      	b.n	800ae38 <__sfp+0x18>
 800ae48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae4c:	b9d5      	cbnz	r5, 800ae84 <__sfp+0x64>
 800ae4e:	4b16      	ldr	r3, [pc, #88]	; (800aea8 <__sfp+0x88>)
 800ae50:	60e3      	str	r3, [r4, #12]
 800ae52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae56:	6665      	str	r5, [r4, #100]	; 0x64
 800ae58:	f7ff f832 	bl	8009ec0 <__retarget_lock_init_recursive>
 800ae5c:	f7ff ff96 	bl	800ad8c <__sfp_lock_release>
 800ae60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae68:	6025      	str	r5, [r4, #0]
 800ae6a:	61a5      	str	r5, [r4, #24]
 800ae6c:	2208      	movs	r2, #8
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae74:	f7fe fbac 	bl	80095d0 <memset>
 800ae78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae80:	4620      	mov	r0, r4
 800ae82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae84:	3468      	adds	r4, #104	; 0x68
 800ae86:	e7d9      	b.n	800ae3c <__sfp+0x1c>
 800ae88:	2104      	movs	r1, #4
 800ae8a:	4638      	mov	r0, r7
 800ae8c:	f7ff ff62 	bl	800ad54 <__sfmoreglue>
 800ae90:	4604      	mov	r4, r0
 800ae92:	6030      	str	r0, [r6, #0]
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d1d5      	bne.n	800ae44 <__sfp+0x24>
 800ae98:	f7ff ff78 	bl	800ad8c <__sfp_lock_release>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	e7ee      	b.n	800ae80 <__sfp+0x60>
 800aea2:	bf00      	nop
 800aea4:	0800baa4 	.word	0x0800baa4
 800aea8:	ffff0001 	.word	0xffff0001

0800aeac <_fwalk_reent>:
 800aeac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	4688      	mov	r8, r1
 800aeb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aeb8:	2700      	movs	r7, #0
 800aeba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aebe:	f1b9 0901 	subs.w	r9, r9, #1
 800aec2:	d505      	bpl.n	800aed0 <_fwalk_reent+0x24>
 800aec4:	6824      	ldr	r4, [r4, #0]
 800aec6:	2c00      	cmp	r4, #0
 800aec8:	d1f7      	bne.n	800aeba <_fwalk_reent+0xe>
 800aeca:	4638      	mov	r0, r7
 800aecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aed0:	89ab      	ldrh	r3, [r5, #12]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d907      	bls.n	800aee6 <_fwalk_reent+0x3a>
 800aed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeda:	3301      	adds	r3, #1
 800aedc:	d003      	beq.n	800aee6 <_fwalk_reent+0x3a>
 800aede:	4629      	mov	r1, r5
 800aee0:	4630      	mov	r0, r6
 800aee2:	47c0      	blx	r8
 800aee4:	4307      	orrs	r7, r0
 800aee6:	3568      	adds	r5, #104	; 0x68
 800aee8:	e7e9      	b.n	800aebe <_fwalk_reent+0x12>
	...

0800aeec <_lseek_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d07      	ldr	r5, [pc, #28]	; (800af0c <_lseek_r+0x20>)
 800aef0:	4604      	mov	r4, r0
 800aef2:	4608      	mov	r0, r1
 800aef4:	4611      	mov	r1, r2
 800aef6:	2200      	movs	r2, #0
 800aef8:	602a      	str	r2, [r5, #0]
 800aefa:	461a      	mov	r2, r3
 800aefc:	f7f8 fd2a 	bl	8003954 <_lseek>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_lseek_r+0x1e>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_lseek_r+0x1e>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	20000d10 	.word	0x20000d10

0800af10 <__swhatbuf_r>:
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	460e      	mov	r6, r1
 800af14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af18:	2900      	cmp	r1, #0
 800af1a:	b096      	sub	sp, #88	; 0x58
 800af1c:	4614      	mov	r4, r2
 800af1e:	461d      	mov	r5, r3
 800af20:	da08      	bge.n	800af34 <__swhatbuf_r+0x24>
 800af22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	602a      	str	r2, [r5, #0]
 800af2a:	061a      	lsls	r2, r3, #24
 800af2c:	d410      	bmi.n	800af50 <__swhatbuf_r+0x40>
 800af2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af32:	e00e      	b.n	800af52 <__swhatbuf_r+0x42>
 800af34:	466a      	mov	r2, sp
 800af36:	f000 fd0b 	bl	800b950 <_fstat_r>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	dbf1      	blt.n	800af22 <__swhatbuf_r+0x12>
 800af3e:	9a01      	ldr	r2, [sp, #4]
 800af40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af48:	425a      	negs	r2, r3
 800af4a:	415a      	adcs	r2, r3
 800af4c:	602a      	str	r2, [r5, #0]
 800af4e:	e7ee      	b.n	800af2e <__swhatbuf_r+0x1e>
 800af50:	2340      	movs	r3, #64	; 0x40
 800af52:	2000      	movs	r0, #0
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	b016      	add	sp, #88	; 0x58
 800af58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af5c <__smakebuf_r>:
 800af5c:	898b      	ldrh	r3, [r1, #12]
 800af5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af60:	079d      	lsls	r5, r3, #30
 800af62:	4606      	mov	r6, r0
 800af64:	460c      	mov	r4, r1
 800af66:	d507      	bpl.n	800af78 <__smakebuf_r+0x1c>
 800af68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af6c:	6023      	str	r3, [r4, #0]
 800af6e:	6123      	str	r3, [r4, #16]
 800af70:	2301      	movs	r3, #1
 800af72:	6163      	str	r3, [r4, #20]
 800af74:	b002      	add	sp, #8
 800af76:	bd70      	pop	{r4, r5, r6, pc}
 800af78:	ab01      	add	r3, sp, #4
 800af7a:	466a      	mov	r2, sp
 800af7c:	f7ff ffc8 	bl	800af10 <__swhatbuf_r>
 800af80:	9900      	ldr	r1, [sp, #0]
 800af82:	4605      	mov	r5, r0
 800af84:	4630      	mov	r0, r6
 800af86:	f7fe fb97 	bl	80096b8 <_malloc_r>
 800af8a:	b948      	cbnz	r0, 800afa0 <__smakebuf_r+0x44>
 800af8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af90:	059a      	lsls	r2, r3, #22
 800af92:	d4ef      	bmi.n	800af74 <__smakebuf_r+0x18>
 800af94:	f023 0303 	bic.w	r3, r3, #3
 800af98:	f043 0302 	orr.w	r3, r3, #2
 800af9c:	81a3      	strh	r3, [r4, #12]
 800af9e:	e7e3      	b.n	800af68 <__smakebuf_r+0xc>
 800afa0:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <__smakebuf_r+0x7c>)
 800afa2:	62b3      	str	r3, [r6, #40]	; 0x28
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	6020      	str	r0, [r4, #0]
 800afa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	9b00      	ldr	r3, [sp, #0]
 800afb0:	6163      	str	r3, [r4, #20]
 800afb2:	9b01      	ldr	r3, [sp, #4]
 800afb4:	6120      	str	r0, [r4, #16]
 800afb6:	b15b      	cbz	r3, 800afd0 <__smakebuf_r+0x74>
 800afb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afbc:	4630      	mov	r0, r6
 800afbe:	f000 fcd9 	bl	800b974 <_isatty_r>
 800afc2:	b128      	cbz	r0, 800afd0 <__smakebuf_r+0x74>
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	f023 0303 	bic.w	r3, r3, #3
 800afca:	f043 0301 	orr.w	r3, r3, #1
 800afce:	81a3      	strh	r3, [r4, #12]
 800afd0:	89a0      	ldrh	r0, [r4, #12]
 800afd2:	4305      	orrs	r5, r0
 800afd4:	81a5      	strh	r5, [r4, #12]
 800afd6:	e7cd      	b.n	800af74 <__smakebuf_r+0x18>
 800afd8:	0800ad49 	.word	0x0800ad49

0800afdc <memmove>:
 800afdc:	4288      	cmp	r0, r1
 800afde:	b510      	push	{r4, lr}
 800afe0:	eb01 0402 	add.w	r4, r1, r2
 800afe4:	d902      	bls.n	800afec <memmove+0x10>
 800afe6:	4284      	cmp	r4, r0
 800afe8:	4623      	mov	r3, r4
 800afea:	d807      	bhi.n	800affc <memmove+0x20>
 800afec:	1e43      	subs	r3, r0, #1
 800afee:	42a1      	cmp	r1, r4
 800aff0:	d008      	beq.n	800b004 <memmove+0x28>
 800aff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800affa:	e7f8      	b.n	800afee <memmove+0x12>
 800affc:	4402      	add	r2, r0
 800affe:	4601      	mov	r1, r0
 800b000:	428a      	cmp	r2, r1
 800b002:	d100      	bne.n	800b006 <memmove+0x2a>
 800b004:	bd10      	pop	{r4, pc}
 800b006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b00a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b00e:	e7f7      	b.n	800b000 <memmove+0x24>

0800b010 <_realloc_r>:
 800b010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b014:	4680      	mov	r8, r0
 800b016:	4614      	mov	r4, r2
 800b018:	460e      	mov	r6, r1
 800b01a:	b921      	cbnz	r1, 800b026 <_realloc_r+0x16>
 800b01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	4611      	mov	r1, r2
 800b022:	f7fe bb49 	b.w	80096b8 <_malloc_r>
 800b026:	b92a      	cbnz	r2, 800b034 <_realloc_r+0x24>
 800b028:	f7fe fada 	bl	80095e0 <_free_r>
 800b02c:	4625      	mov	r5, r4
 800b02e:	4628      	mov	r0, r5
 800b030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b034:	f000 fcae 	bl	800b994 <_malloc_usable_size_r>
 800b038:	4284      	cmp	r4, r0
 800b03a:	4607      	mov	r7, r0
 800b03c:	d802      	bhi.n	800b044 <_realloc_r+0x34>
 800b03e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b042:	d812      	bhi.n	800b06a <_realloc_r+0x5a>
 800b044:	4621      	mov	r1, r4
 800b046:	4640      	mov	r0, r8
 800b048:	f7fe fb36 	bl	80096b8 <_malloc_r>
 800b04c:	4605      	mov	r5, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	d0ed      	beq.n	800b02e <_realloc_r+0x1e>
 800b052:	42bc      	cmp	r4, r7
 800b054:	4622      	mov	r2, r4
 800b056:	4631      	mov	r1, r6
 800b058:	bf28      	it	cs
 800b05a:	463a      	movcs	r2, r7
 800b05c:	f7fe faaa 	bl	80095b4 <memcpy>
 800b060:	4631      	mov	r1, r6
 800b062:	4640      	mov	r0, r8
 800b064:	f7fe fabc 	bl	80095e0 <_free_r>
 800b068:	e7e1      	b.n	800b02e <_realloc_r+0x1e>
 800b06a:	4635      	mov	r5, r6
 800b06c:	e7df      	b.n	800b02e <_realloc_r+0x1e>

0800b06e <_sungetc_r>:
 800b06e:	b538      	push	{r3, r4, r5, lr}
 800b070:	1c4b      	adds	r3, r1, #1
 800b072:	4614      	mov	r4, r2
 800b074:	d103      	bne.n	800b07e <_sungetc_r+0x10>
 800b076:	f04f 35ff 	mov.w	r5, #4294967295
 800b07a:	4628      	mov	r0, r5
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	8993      	ldrh	r3, [r2, #12]
 800b080:	f023 0320 	bic.w	r3, r3, #32
 800b084:	8193      	strh	r3, [r2, #12]
 800b086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b088:	6852      	ldr	r2, [r2, #4]
 800b08a:	b2cd      	uxtb	r5, r1
 800b08c:	b18b      	cbz	r3, 800b0b2 <_sungetc_r+0x44>
 800b08e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b090:	4293      	cmp	r3, r2
 800b092:	dd08      	ble.n	800b0a6 <_sungetc_r+0x38>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	1e5a      	subs	r2, r3, #1
 800b098:	6022      	str	r2, [r4, #0]
 800b09a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b09e:	6863      	ldr	r3, [r4, #4]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	6063      	str	r3, [r4, #4]
 800b0a4:	e7e9      	b.n	800b07a <_sungetc_r+0xc>
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	f000 fc18 	bl	800b8dc <__submore>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d0f1      	beq.n	800b094 <_sungetc_r+0x26>
 800b0b0:	e7e1      	b.n	800b076 <_sungetc_r+0x8>
 800b0b2:	6921      	ldr	r1, [r4, #16]
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	b151      	cbz	r1, 800b0ce <_sungetc_r+0x60>
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	d208      	bcs.n	800b0ce <_sungetc_r+0x60>
 800b0bc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b0c0:	42a9      	cmp	r1, r5
 800b0c2:	d104      	bne.n	800b0ce <_sungetc_r+0x60>
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	3201      	adds	r2, #1
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	6062      	str	r2, [r4, #4]
 800b0cc:	e7d5      	b.n	800b07a <_sungetc_r+0xc>
 800b0ce:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b0d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0d6:	6363      	str	r3, [r4, #52]	; 0x34
 800b0d8:	2303      	movs	r3, #3
 800b0da:	63a3      	str	r3, [r4, #56]	; 0x38
 800b0dc:	4623      	mov	r3, r4
 800b0de:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e7dc      	b.n	800b0a2 <_sungetc_r+0x34>

0800b0e8 <__ssrefill_r>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b0ee:	b169      	cbz	r1, 800b10c <__ssrefill_r+0x24>
 800b0f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0f4:	4299      	cmp	r1, r3
 800b0f6:	d001      	beq.n	800b0fc <__ssrefill_r+0x14>
 800b0f8:	f7fe fa72 	bl	80095e0 <_free_r>
 800b0fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0fe:	6063      	str	r3, [r4, #4]
 800b100:	2000      	movs	r0, #0
 800b102:	6360      	str	r0, [r4, #52]	; 0x34
 800b104:	b113      	cbz	r3, 800b10c <__ssrefill_r+0x24>
 800b106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	6923      	ldr	r3, [r4, #16]
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	2300      	movs	r3, #0
 800b112:	6063      	str	r3, [r4, #4]
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	f043 0320 	orr.w	r3, r3, #32
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	e7f3      	b.n	800b10a <__ssrefill_r+0x22>
	...

0800b124 <__ssvfiscanf_r>:
 800b124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b128:	460c      	mov	r4, r1
 800b12a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b12e:	2100      	movs	r1, #0
 800b130:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b134:	49a6      	ldr	r1, [pc, #664]	; (800b3d0 <__ssvfiscanf_r+0x2ac>)
 800b136:	91a0      	str	r1, [sp, #640]	; 0x280
 800b138:	f10d 0804 	add.w	r8, sp, #4
 800b13c:	49a5      	ldr	r1, [pc, #660]	; (800b3d4 <__ssvfiscanf_r+0x2b0>)
 800b13e:	4fa6      	ldr	r7, [pc, #664]	; (800b3d8 <__ssvfiscanf_r+0x2b4>)
 800b140:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b3dc <__ssvfiscanf_r+0x2b8>
 800b144:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b148:	4606      	mov	r6, r0
 800b14a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	7813      	ldrb	r3, [r2, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 815a 	beq.w	800b40a <__ssvfiscanf_r+0x2e6>
 800b156:	5dd9      	ldrb	r1, [r3, r7]
 800b158:	f011 0108 	ands.w	r1, r1, #8
 800b15c:	f102 0501 	add.w	r5, r2, #1
 800b160:	d019      	beq.n	800b196 <__ssvfiscanf_r+0x72>
 800b162:	6863      	ldr	r3, [r4, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd0f      	ble.n	800b188 <__ssvfiscanf_r+0x64>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	781a      	ldrb	r2, [r3, #0]
 800b16c:	5cba      	ldrb	r2, [r7, r2]
 800b16e:	0712      	lsls	r2, r2, #28
 800b170:	d401      	bmi.n	800b176 <__ssvfiscanf_r+0x52>
 800b172:	462a      	mov	r2, r5
 800b174:	e7eb      	b.n	800b14e <__ssvfiscanf_r+0x2a>
 800b176:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b178:	3201      	adds	r2, #1
 800b17a:	9245      	str	r2, [sp, #276]	; 0x114
 800b17c:	6862      	ldr	r2, [r4, #4]
 800b17e:	3301      	adds	r3, #1
 800b180:	3a01      	subs	r2, #1
 800b182:	6062      	str	r2, [r4, #4]
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	e7ec      	b.n	800b162 <__ssvfiscanf_r+0x3e>
 800b188:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b18a:	4621      	mov	r1, r4
 800b18c:	4630      	mov	r0, r6
 800b18e:	4798      	blx	r3
 800b190:	2800      	cmp	r0, #0
 800b192:	d0e9      	beq.n	800b168 <__ssvfiscanf_r+0x44>
 800b194:	e7ed      	b.n	800b172 <__ssvfiscanf_r+0x4e>
 800b196:	2b25      	cmp	r3, #37	; 0x25
 800b198:	d012      	beq.n	800b1c0 <__ssvfiscanf_r+0x9c>
 800b19a:	469a      	mov	sl, r3
 800b19c:	6863      	ldr	r3, [r4, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f340 8091 	ble.w	800b2c6 <__ssvfiscanf_r+0x1a2>
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	7813      	ldrb	r3, [r2, #0]
 800b1a8:	4553      	cmp	r3, sl
 800b1aa:	f040 812e 	bne.w	800b40a <__ssvfiscanf_r+0x2e6>
 800b1ae:	6863      	ldr	r3, [r4, #4]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	6063      	str	r3, [r4, #4]
 800b1b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b1b6:	3201      	adds	r2, #1
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	6022      	str	r2, [r4, #0]
 800b1bc:	9345      	str	r3, [sp, #276]	; 0x114
 800b1be:	e7d8      	b.n	800b172 <__ssvfiscanf_r+0x4e>
 800b1c0:	9141      	str	r1, [sp, #260]	; 0x104
 800b1c2:	9143      	str	r1, [sp, #268]	; 0x10c
 800b1c4:	7853      	ldrb	r3, [r2, #1]
 800b1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c8:	bf02      	ittt	eq
 800b1ca:	2310      	moveq	r3, #16
 800b1cc:	1c95      	addeq	r5, r2, #2
 800b1ce:	9341      	streq	r3, [sp, #260]	; 0x104
 800b1d0:	220a      	movs	r2, #10
 800b1d2:	46aa      	mov	sl, r5
 800b1d4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b1d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	d91d      	bls.n	800b21c <__ssvfiscanf_r+0xf8>
 800b1e0:	487e      	ldr	r0, [pc, #504]	; (800b3dc <__ssvfiscanf_r+0x2b8>)
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	f7f5 f80c 	bl	8000200 <memchr>
 800b1e8:	b140      	cbz	r0, 800b1fc <__ssvfiscanf_r+0xd8>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	eba0 0009 	sub.w	r0, r0, r9
 800b1f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b1f6:	4318      	orrs	r0, r3
 800b1f8:	9041      	str	r0, [sp, #260]	; 0x104
 800b1fa:	4655      	mov	r5, sl
 800b1fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b200:	2b78      	cmp	r3, #120	; 0x78
 800b202:	d806      	bhi.n	800b212 <__ssvfiscanf_r+0xee>
 800b204:	2b57      	cmp	r3, #87	; 0x57
 800b206:	d810      	bhi.n	800b22a <__ssvfiscanf_r+0x106>
 800b208:	2b25      	cmp	r3, #37	; 0x25
 800b20a:	d0c6      	beq.n	800b19a <__ssvfiscanf_r+0x76>
 800b20c:	d856      	bhi.n	800b2bc <__ssvfiscanf_r+0x198>
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d064      	beq.n	800b2dc <__ssvfiscanf_r+0x1b8>
 800b212:	2303      	movs	r3, #3
 800b214:	9347      	str	r3, [sp, #284]	; 0x11c
 800b216:	230a      	movs	r3, #10
 800b218:	9342      	str	r3, [sp, #264]	; 0x108
 800b21a:	e071      	b.n	800b300 <__ssvfiscanf_r+0x1dc>
 800b21c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b21e:	fb02 1103 	mla	r1, r2, r3, r1
 800b222:	3930      	subs	r1, #48	; 0x30
 800b224:	9143      	str	r1, [sp, #268]	; 0x10c
 800b226:	4655      	mov	r5, sl
 800b228:	e7d3      	b.n	800b1d2 <__ssvfiscanf_r+0xae>
 800b22a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b22e:	2a20      	cmp	r2, #32
 800b230:	d8ef      	bhi.n	800b212 <__ssvfiscanf_r+0xee>
 800b232:	a101      	add	r1, pc, #4	; (adr r1, 800b238 <__ssvfiscanf_r+0x114>)
 800b234:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b238:	0800b2eb 	.word	0x0800b2eb
 800b23c:	0800b213 	.word	0x0800b213
 800b240:	0800b213 	.word	0x0800b213
 800b244:	0800b349 	.word	0x0800b349
 800b248:	0800b213 	.word	0x0800b213
 800b24c:	0800b213 	.word	0x0800b213
 800b250:	0800b213 	.word	0x0800b213
 800b254:	0800b213 	.word	0x0800b213
 800b258:	0800b213 	.word	0x0800b213
 800b25c:	0800b213 	.word	0x0800b213
 800b260:	0800b213 	.word	0x0800b213
 800b264:	0800b35f 	.word	0x0800b35f
 800b268:	0800b335 	.word	0x0800b335
 800b26c:	0800b2c3 	.word	0x0800b2c3
 800b270:	0800b2c3 	.word	0x0800b2c3
 800b274:	0800b2c3 	.word	0x0800b2c3
 800b278:	0800b213 	.word	0x0800b213
 800b27c:	0800b339 	.word	0x0800b339
 800b280:	0800b213 	.word	0x0800b213
 800b284:	0800b213 	.word	0x0800b213
 800b288:	0800b213 	.word	0x0800b213
 800b28c:	0800b213 	.word	0x0800b213
 800b290:	0800b36f 	.word	0x0800b36f
 800b294:	0800b341 	.word	0x0800b341
 800b298:	0800b2e3 	.word	0x0800b2e3
 800b29c:	0800b213 	.word	0x0800b213
 800b2a0:	0800b213 	.word	0x0800b213
 800b2a4:	0800b36b 	.word	0x0800b36b
 800b2a8:	0800b213 	.word	0x0800b213
 800b2ac:	0800b335 	.word	0x0800b335
 800b2b0:	0800b213 	.word	0x0800b213
 800b2b4:	0800b213 	.word	0x0800b213
 800b2b8:	0800b2eb 	.word	0x0800b2eb
 800b2bc:	3b45      	subs	r3, #69	; 0x45
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d8a7      	bhi.n	800b212 <__ssvfiscanf_r+0xee>
 800b2c2:	2305      	movs	r3, #5
 800b2c4:	e01b      	b.n	800b2fe <__ssvfiscanf_r+0x1da>
 800b2c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	4798      	blx	r3
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f af68 	beq.w	800b1a4 <__ssvfiscanf_r+0x80>
 800b2d4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f040 808d 	bne.w	800b3f6 <__ssvfiscanf_r+0x2d2>
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	e08f      	b.n	800b402 <__ssvfiscanf_r+0x2de>
 800b2e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b2e4:	f042 0220 	orr.w	r2, r2, #32
 800b2e8:	9241      	str	r2, [sp, #260]	; 0x104
 800b2ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b2ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2f0:	9241      	str	r2, [sp, #260]	; 0x104
 800b2f2:	2210      	movs	r2, #16
 800b2f4:	2b6f      	cmp	r3, #111	; 0x6f
 800b2f6:	9242      	str	r2, [sp, #264]	; 0x108
 800b2f8:	bf34      	ite	cc
 800b2fa:	2303      	movcc	r3, #3
 800b2fc:	2304      	movcs	r3, #4
 800b2fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dd42      	ble.n	800b38c <__ssvfiscanf_r+0x268>
 800b306:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b308:	0659      	lsls	r1, r3, #25
 800b30a:	d404      	bmi.n	800b316 <__ssvfiscanf_r+0x1f2>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	5cba      	ldrb	r2, [r7, r2]
 800b312:	0712      	lsls	r2, r2, #28
 800b314:	d441      	bmi.n	800b39a <__ssvfiscanf_r+0x276>
 800b316:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b318:	2b02      	cmp	r3, #2
 800b31a:	dc50      	bgt.n	800b3be <__ssvfiscanf_r+0x29a>
 800b31c:	466b      	mov	r3, sp
 800b31e:	4622      	mov	r2, r4
 800b320:	a941      	add	r1, sp, #260	; 0x104
 800b322:	4630      	mov	r0, r6
 800b324:	f000 f876 	bl	800b414 <_scanf_chars>
 800b328:	2801      	cmp	r0, #1
 800b32a:	d06e      	beq.n	800b40a <__ssvfiscanf_r+0x2e6>
 800b32c:	2802      	cmp	r0, #2
 800b32e:	f47f af20 	bne.w	800b172 <__ssvfiscanf_r+0x4e>
 800b332:	e7cf      	b.n	800b2d4 <__ssvfiscanf_r+0x1b0>
 800b334:	220a      	movs	r2, #10
 800b336:	e7dd      	b.n	800b2f4 <__ssvfiscanf_r+0x1d0>
 800b338:	2300      	movs	r3, #0
 800b33a:	9342      	str	r3, [sp, #264]	; 0x108
 800b33c:	2303      	movs	r3, #3
 800b33e:	e7de      	b.n	800b2fe <__ssvfiscanf_r+0x1da>
 800b340:	2308      	movs	r3, #8
 800b342:	9342      	str	r3, [sp, #264]	; 0x108
 800b344:	2304      	movs	r3, #4
 800b346:	e7da      	b.n	800b2fe <__ssvfiscanf_r+0x1da>
 800b348:	4629      	mov	r1, r5
 800b34a:	4640      	mov	r0, r8
 800b34c:	f000 f9c6 	bl	800b6dc <__sccl>
 800b350:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b356:	9341      	str	r3, [sp, #260]	; 0x104
 800b358:	4605      	mov	r5, r0
 800b35a:	2301      	movs	r3, #1
 800b35c:	e7cf      	b.n	800b2fe <__ssvfiscanf_r+0x1da>
 800b35e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b364:	9341      	str	r3, [sp, #260]	; 0x104
 800b366:	2300      	movs	r3, #0
 800b368:	e7c9      	b.n	800b2fe <__ssvfiscanf_r+0x1da>
 800b36a:	2302      	movs	r3, #2
 800b36c:	e7c7      	b.n	800b2fe <__ssvfiscanf_r+0x1da>
 800b36e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b370:	06c3      	lsls	r3, r0, #27
 800b372:	f53f aefe 	bmi.w	800b172 <__ssvfiscanf_r+0x4e>
 800b376:	9b00      	ldr	r3, [sp, #0]
 800b378:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b37a:	1d19      	adds	r1, r3, #4
 800b37c:	9100      	str	r1, [sp, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f010 0f01 	tst.w	r0, #1
 800b384:	bf14      	ite	ne
 800b386:	801a      	strhne	r2, [r3, #0]
 800b388:	601a      	streq	r2, [r3, #0]
 800b38a:	e6f2      	b.n	800b172 <__ssvfiscanf_r+0x4e>
 800b38c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b38e:	4621      	mov	r1, r4
 800b390:	4630      	mov	r0, r6
 800b392:	4798      	blx	r3
 800b394:	2800      	cmp	r0, #0
 800b396:	d0b6      	beq.n	800b306 <__ssvfiscanf_r+0x1e2>
 800b398:	e79c      	b.n	800b2d4 <__ssvfiscanf_r+0x1b0>
 800b39a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b39c:	3201      	adds	r2, #1
 800b39e:	9245      	str	r2, [sp, #276]	; 0x114
 800b3a0:	6862      	ldr	r2, [r4, #4]
 800b3a2:	3a01      	subs	r2, #1
 800b3a4:	2a00      	cmp	r2, #0
 800b3a6:	6062      	str	r2, [r4, #4]
 800b3a8:	dd02      	ble.n	800b3b0 <__ssvfiscanf_r+0x28c>
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	e7ad      	b.n	800b30c <__ssvfiscanf_r+0x1e8>
 800b3b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	4798      	blx	r3
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d0a7      	beq.n	800b30c <__ssvfiscanf_r+0x1e8>
 800b3bc:	e78a      	b.n	800b2d4 <__ssvfiscanf_r+0x1b0>
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	dc0e      	bgt.n	800b3e0 <__ssvfiscanf_r+0x2bc>
 800b3c2:	466b      	mov	r3, sp
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	a941      	add	r1, sp, #260	; 0x104
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f000 f87d 	bl	800b4c8 <_scanf_i>
 800b3ce:	e7ab      	b.n	800b328 <__ssvfiscanf_r+0x204>
 800b3d0:	0800b06f 	.word	0x0800b06f
 800b3d4:	0800b0e9 	.word	0x0800b0e9
 800b3d8:	0800bc28 	.word	0x0800bc28
 800b3dc:	0800bbfa 	.word	0x0800bbfa
 800b3e0:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <__ssvfiscanf_r+0x2ec>)
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f43f aec5 	beq.w	800b172 <__ssvfiscanf_r+0x4e>
 800b3e8:	466b      	mov	r3, sp
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	a941      	add	r1, sp, #260	; 0x104
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f3af 8000 	nop.w
 800b3f4:	e798      	b.n	800b328 <__ssvfiscanf_r+0x204>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b3fc:	bf18      	it	ne
 800b3fe:	f04f 30ff 	movne.w	r0, #4294967295
 800b402:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b40c:	e7f9      	b.n	800b402 <__ssvfiscanf_r+0x2de>
 800b40e:	bf00      	nop
 800b410:	00000000 	.word	0x00000000

0800b414 <_scanf_chars>:
 800b414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b418:	4615      	mov	r5, r2
 800b41a:	688a      	ldr	r2, [r1, #8]
 800b41c:	4680      	mov	r8, r0
 800b41e:	460c      	mov	r4, r1
 800b420:	b932      	cbnz	r2, 800b430 <_scanf_chars+0x1c>
 800b422:	698a      	ldr	r2, [r1, #24]
 800b424:	2a00      	cmp	r2, #0
 800b426:	bf0c      	ite	eq
 800b428:	2201      	moveq	r2, #1
 800b42a:	f04f 32ff 	movne.w	r2, #4294967295
 800b42e:	608a      	str	r2, [r1, #8]
 800b430:	6822      	ldr	r2, [r4, #0]
 800b432:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b4c4 <_scanf_chars+0xb0>
 800b436:	06d1      	lsls	r1, r2, #27
 800b438:	bf5f      	itttt	pl
 800b43a:	681a      	ldrpl	r2, [r3, #0]
 800b43c:	1d11      	addpl	r1, r2, #4
 800b43e:	6019      	strpl	r1, [r3, #0]
 800b440:	6816      	ldrpl	r6, [r2, #0]
 800b442:	2700      	movs	r7, #0
 800b444:	69a0      	ldr	r0, [r4, #24]
 800b446:	b188      	cbz	r0, 800b46c <_scanf_chars+0x58>
 800b448:	2801      	cmp	r0, #1
 800b44a:	d107      	bne.n	800b45c <_scanf_chars+0x48>
 800b44c:	682a      	ldr	r2, [r5, #0]
 800b44e:	7811      	ldrb	r1, [r2, #0]
 800b450:	6962      	ldr	r2, [r4, #20]
 800b452:	5c52      	ldrb	r2, [r2, r1]
 800b454:	b952      	cbnz	r2, 800b46c <_scanf_chars+0x58>
 800b456:	2f00      	cmp	r7, #0
 800b458:	d031      	beq.n	800b4be <_scanf_chars+0xaa>
 800b45a:	e022      	b.n	800b4a2 <_scanf_chars+0x8e>
 800b45c:	2802      	cmp	r0, #2
 800b45e:	d120      	bne.n	800b4a2 <_scanf_chars+0x8e>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b468:	071b      	lsls	r3, r3, #28
 800b46a:	d41a      	bmi.n	800b4a2 <_scanf_chars+0x8e>
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	06da      	lsls	r2, r3, #27
 800b470:	bf5e      	ittt	pl
 800b472:	682b      	ldrpl	r3, [r5, #0]
 800b474:	781b      	ldrbpl	r3, [r3, #0]
 800b476:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b47a:	682a      	ldr	r2, [r5, #0]
 800b47c:	686b      	ldr	r3, [r5, #4]
 800b47e:	3201      	adds	r2, #1
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	68a2      	ldr	r2, [r4, #8]
 800b484:	3b01      	subs	r3, #1
 800b486:	3a01      	subs	r2, #1
 800b488:	606b      	str	r3, [r5, #4]
 800b48a:	3701      	adds	r7, #1
 800b48c:	60a2      	str	r2, [r4, #8]
 800b48e:	b142      	cbz	r2, 800b4a2 <_scanf_chars+0x8e>
 800b490:	2b00      	cmp	r3, #0
 800b492:	dcd7      	bgt.n	800b444 <_scanf_chars+0x30>
 800b494:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b498:	4629      	mov	r1, r5
 800b49a:	4640      	mov	r0, r8
 800b49c:	4798      	blx	r3
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d0d0      	beq.n	800b444 <_scanf_chars+0x30>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	f013 0310 	ands.w	r3, r3, #16
 800b4a8:	d105      	bne.n	800b4b6 <_scanf_chars+0xa2>
 800b4aa:	68e2      	ldr	r2, [r4, #12]
 800b4ac:	3201      	adds	r2, #1
 800b4ae:	60e2      	str	r2, [r4, #12]
 800b4b0:	69a2      	ldr	r2, [r4, #24]
 800b4b2:	b102      	cbz	r2, 800b4b6 <_scanf_chars+0xa2>
 800b4b4:	7033      	strb	r3, [r6, #0]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	443b      	add	r3, r7
 800b4ba:	6123      	str	r3, [r4, #16]
 800b4bc:	2000      	movs	r0, #0
 800b4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0800bc28 	.word	0x0800bc28

0800b4c8 <_scanf_i>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	4698      	mov	r8, r3
 800b4ce:	4b76      	ldr	r3, [pc, #472]	; (800b6a8 <_scanf_i+0x1e0>)
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	4682      	mov	sl, r0
 800b4d4:	4616      	mov	r6, r2
 800b4d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	ab03      	add	r3, sp, #12
 800b4de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b4e2:	4b72      	ldr	r3, [pc, #456]	; (800b6ac <_scanf_i+0x1e4>)
 800b4e4:	69a1      	ldr	r1, [r4, #24]
 800b4e6:	4a72      	ldr	r2, [pc, #456]	; (800b6b0 <_scanf_i+0x1e8>)
 800b4e8:	2903      	cmp	r1, #3
 800b4ea:	bf18      	it	ne
 800b4ec:	461a      	movne	r2, r3
 800b4ee:	68a3      	ldr	r3, [r4, #8]
 800b4f0:	9201      	str	r2, [sp, #4]
 800b4f2:	1e5a      	subs	r2, r3, #1
 800b4f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b4f8:	bf88      	it	hi
 800b4fa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b4fe:	4627      	mov	r7, r4
 800b500:	bf82      	ittt	hi
 800b502:	eb03 0905 	addhi.w	r9, r3, r5
 800b506:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b50a:	60a3      	strhi	r3, [r4, #8]
 800b50c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b510:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b514:	bf98      	it	ls
 800b516:	f04f 0900 	movls.w	r9, #0
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	463d      	mov	r5, r7
 800b51e:	f04f 0b00 	mov.w	fp, #0
 800b522:	6831      	ldr	r1, [r6, #0]
 800b524:	ab03      	add	r3, sp, #12
 800b526:	7809      	ldrb	r1, [r1, #0]
 800b528:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b52c:	2202      	movs	r2, #2
 800b52e:	f7f4 fe67 	bl	8000200 <memchr>
 800b532:	b328      	cbz	r0, 800b580 <_scanf_i+0xb8>
 800b534:	f1bb 0f01 	cmp.w	fp, #1
 800b538:	d159      	bne.n	800b5ee <_scanf_i+0x126>
 800b53a:	6862      	ldr	r2, [r4, #4]
 800b53c:	b92a      	cbnz	r2, 800b54a <_scanf_i+0x82>
 800b53e:	6822      	ldr	r2, [r4, #0]
 800b540:	2308      	movs	r3, #8
 800b542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	6022      	str	r2, [r4, #0]
 800b54a:	6822      	ldr	r2, [r4, #0]
 800b54c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b550:	6022      	str	r2, [r4, #0]
 800b552:	68a2      	ldr	r2, [r4, #8]
 800b554:	1e51      	subs	r1, r2, #1
 800b556:	60a1      	str	r1, [r4, #8]
 800b558:	b192      	cbz	r2, 800b580 <_scanf_i+0xb8>
 800b55a:	6832      	ldr	r2, [r6, #0]
 800b55c:	1c51      	adds	r1, r2, #1
 800b55e:	6031      	str	r1, [r6, #0]
 800b560:	7812      	ldrb	r2, [r2, #0]
 800b562:	f805 2b01 	strb.w	r2, [r5], #1
 800b566:	6872      	ldr	r2, [r6, #4]
 800b568:	3a01      	subs	r2, #1
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	6072      	str	r2, [r6, #4]
 800b56e:	dc07      	bgt.n	800b580 <_scanf_i+0xb8>
 800b570:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b574:	4631      	mov	r1, r6
 800b576:	4650      	mov	r0, sl
 800b578:	4790      	blx	r2
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f040 8085 	bne.w	800b68a <_scanf_i+0x1c2>
 800b580:	f10b 0b01 	add.w	fp, fp, #1
 800b584:	f1bb 0f03 	cmp.w	fp, #3
 800b588:	d1cb      	bne.n	800b522 <_scanf_i+0x5a>
 800b58a:	6863      	ldr	r3, [r4, #4]
 800b58c:	b90b      	cbnz	r3, 800b592 <_scanf_i+0xca>
 800b58e:	230a      	movs	r3, #10
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	6863      	ldr	r3, [r4, #4]
 800b594:	4947      	ldr	r1, [pc, #284]	; (800b6b4 <_scanf_i+0x1ec>)
 800b596:	6960      	ldr	r0, [r4, #20]
 800b598:	1ac9      	subs	r1, r1, r3
 800b59a:	f000 f89f 	bl	800b6dc <__sccl>
 800b59e:	f04f 0b00 	mov.w	fp, #0
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	6822      	ldr	r2, [r4, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d03d      	beq.n	800b626 <_scanf_i+0x15e>
 800b5aa:	6831      	ldr	r1, [r6, #0]
 800b5ac:	6960      	ldr	r0, [r4, #20]
 800b5ae:	f891 c000 	ldrb.w	ip, [r1]
 800b5b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d035      	beq.n	800b626 <_scanf_i+0x15e>
 800b5ba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b5be:	d124      	bne.n	800b60a <_scanf_i+0x142>
 800b5c0:	0510      	lsls	r0, r2, #20
 800b5c2:	d522      	bpl.n	800b60a <_scanf_i+0x142>
 800b5c4:	f10b 0b01 	add.w	fp, fp, #1
 800b5c8:	f1b9 0f00 	cmp.w	r9, #0
 800b5cc:	d003      	beq.n	800b5d6 <_scanf_i+0x10e>
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b5d4:	60a3      	str	r3, [r4, #8]
 800b5d6:	6873      	ldr	r3, [r6, #4]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	6073      	str	r3, [r6, #4]
 800b5de:	dd1b      	ble.n	800b618 <_scanf_i+0x150>
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	60a3      	str	r3, [r4, #8]
 800b5ec:	e7d9      	b.n	800b5a2 <_scanf_i+0xda>
 800b5ee:	f1bb 0f02 	cmp.w	fp, #2
 800b5f2:	d1ae      	bne.n	800b552 <_scanf_i+0x8a>
 800b5f4:	6822      	ldr	r2, [r4, #0]
 800b5f6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b5fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b5fe:	d1bf      	bne.n	800b580 <_scanf_i+0xb8>
 800b600:	2310      	movs	r3, #16
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b608:	e7a2      	b.n	800b550 <_scanf_i+0x88>
 800b60a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b60e:	6022      	str	r2, [r4, #0]
 800b610:	780b      	ldrb	r3, [r1, #0]
 800b612:	f805 3b01 	strb.w	r3, [r5], #1
 800b616:	e7de      	b.n	800b5d6 <_scanf_i+0x10e>
 800b618:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b61c:	4631      	mov	r1, r6
 800b61e:	4650      	mov	r0, sl
 800b620:	4798      	blx	r3
 800b622:	2800      	cmp	r0, #0
 800b624:	d0df      	beq.n	800b5e6 <_scanf_i+0x11e>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	05db      	lsls	r3, r3, #23
 800b62a:	d50d      	bpl.n	800b648 <_scanf_i+0x180>
 800b62c:	42bd      	cmp	r5, r7
 800b62e:	d909      	bls.n	800b644 <_scanf_i+0x17c>
 800b630:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b634:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b638:	4632      	mov	r2, r6
 800b63a:	4650      	mov	r0, sl
 800b63c:	4798      	blx	r3
 800b63e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b642:	464d      	mov	r5, r9
 800b644:	42bd      	cmp	r5, r7
 800b646:	d02d      	beq.n	800b6a4 <_scanf_i+0x1dc>
 800b648:	6822      	ldr	r2, [r4, #0]
 800b64a:	f012 0210 	ands.w	r2, r2, #16
 800b64e:	d113      	bne.n	800b678 <_scanf_i+0x1b0>
 800b650:	702a      	strb	r2, [r5, #0]
 800b652:	6863      	ldr	r3, [r4, #4]
 800b654:	9e01      	ldr	r6, [sp, #4]
 800b656:	4639      	mov	r1, r7
 800b658:	4650      	mov	r0, sl
 800b65a:	47b0      	blx	r6
 800b65c:	6821      	ldr	r1, [r4, #0]
 800b65e:	f8d8 3000 	ldr.w	r3, [r8]
 800b662:	f011 0f20 	tst.w	r1, #32
 800b666:	d013      	beq.n	800b690 <_scanf_i+0x1c8>
 800b668:	1d1a      	adds	r2, r3, #4
 800b66a:	f8c8 2000 	str.w	r2, [r8]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6018      	str	r0, [r3, #0]
 800b672:	68e3      	ldr	r3, [r4, #12]
 800b674:	3301      	adds	r3, #1
 800b676:	60e3      	str	r3, [r4, #12]
 800b678:	1bed      	subs	r5, r5, r7
 800b67a:	44ab      	add	fp, r5
 800b67c:	6925      	ldr	r5, [r4, #16]
 800b67e:	445d      	add	r5, fp
 800b680:	6125      	str	r5, [r4, #16]
 800b682:	2000      	movs	r0, #0
 800b684:	b007      	add	sp, #28
 800b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	f04f 0b00 	mov.w	fp, #0
 800b68e:	e7ca      	b.n	800b626 <_scanf_i+0x15e>
 800b690:	1d1a      	adds	r2, r3, #4
 800b692:	f8c8 2000 	str.w	r2, [r8]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f011 0f01 	tst.w	r1, #1
 800b69c:	bf14      	ite	ne
 800b69e:	8018      	strhne	r0, [r3, #0]
 800b6a0:	6018      	streq	r0, [r3, #0]
 800b6a2:	e7e6      	b.n	800b672 <_scanf_i+0x1aa>
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	e7ed      	b.n	800b684 <_scanf_i+0x1bc>
 800b6a8:	0800ba58 	.word	0x0800ba58
 800b6ac:	0800a979 	.word	0x0800a979
 800b6b0:	0800b8d9 	.word	0x0800b8d9
 800b6b4:	0800bda1 	.word	0x0800bda1

0800b6b8 <_read_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d07      	ldr	r5, [pc, #28]	; (800b6d8 <_read_r+0x20>)
 800b6bc:	4604      	mov	r4, r0
 800b6be:	4608      	mov	r0, r1
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	602a      	str	r2, [r5, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	f7f8 f8e4 	bl	8003894 <_read>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_read_r+0x1e>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_read_r+0x1e>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	20000d10 	.word	0x20000d10

0800b6dc <__sccl>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	780b      	ldrb	r3, [r1, #0]
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	2b5e      	cmp	r3, #94	; 0x5e
 800b6e4:	bf0b      	itete	eq
 800b6e6:	784b      	ldrbeq	r3, [r1, #1]
 800b6e8:	1c48      	addne	r0, r1, #1
 800b6ea:	1c88      	addeq	r0, r1, #2
 800b6ec:	2200      	movne	r2, #0
 800b6ee:	bf08      	it	eq
 800b6f0:	2201      	moveq	r2, #1
 800b6f2:	1e61      	subs	r1, r4, #1
 800b6f4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b6f8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b6fc:	42a9      	cmp	r1, r5
 800b6fe:	d1fb      	bne.n	800b6f8 <__sccl+0x1c>
 800b700:	b90b      	cbnz	r3, 800b706 <__sccl+0x2a>
 800b702:	3801      	subs	r0, #1
 800b704:	bd70      	pop	{r4, r5, r6, pc}
 800b706:	f082 0201 	eor.w	r2, r2, #1
 800b70a:	54e2      	strb	r2, [r4, r3]
 800b70c:	4605      	mov	r5, r0
 800b70e:	4628      	mov	r0, r5
 800b710:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b714:	292d      	cmp	r1, #45	; 0x2d
 800b716:	d006      	beq.n	800b726 <__sccl+0x4a>
 800b718:	295d      	cmp	r1, #93	; 0x5d
 800b71a:	d0f3      	beq.n	800b704 <__sccl+0x28>
 800b71c:	b909      	cbnz	r1, 800b722 <__sccl+0x46>
 800b71e:	4628      	mov	r0, r5
 800b720:	e7f0      	b.n	800b704 <__sccl+0x28>
 800b722:	460b      	mov	r3, r1
 800b724:	e7f1      	b.n	800b70a <__sccl+0x2e>
 800b726:	786e      	ldrb	r6, [r5, #1]
 800b728:	2e5d      	cmp	r6, #93	; 0x5d
 800b72a:	d0fa      	beq.n	800b722 <__sccl+0x46>
 800b72c:	42b3      	cmp	r3, r6
 800b72e:	dcf8      	bgt.n	800b722 <__sccl+0x46>
 800b730:	3502      	adds	r5, #2
 800b732:	4619      	mov	r1, r3
 800b734:	3101      	adds	r1, #1
 800b736:	428e      	cmp	r6, r1
 800b738:	5462      	strb	r2, [r4, r1]
 800b73a:	dcfb      	bgt.n	800b734 <__sccl+0x58>
 800b73c:	1af1      	subs	r1, r6, r3
 800b73e:	3901      	subs	r1, #1
 800b740:	1c58      	adds	r0, r3, #1
 800b742:	42b3      	cmp	r3, r6
 800b744:	bfa8      	it	ge
 800b746:	2100      	movge	r1, #0
 800b748:	1843      	adds	r3, r0, r1
 800b74a:	e7e0      	b.n	800b70e <__sccl+0x32>

0800b74c <_raise_r>:
 800b74c:	291f      	cmp	r1, #31
 800b74e:	b538      	push	{r3, r4, r5, lr}
 800b750:	4604      	mov	r4, r0
 800b752:	460d      	mov	r5, r1
 800b754:	d904      	bls.n	800b760 <_raise_r+0x14>
 800b756:	2316      	movs	r3, #22
 800b758:	6003      	str	r3, [r0, #0]
 800b75a:	f04f 30ff 	mov.w	r0, #4294967295
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b762:	b112      	cbz	r2, 800b76a <_raise_r+0x1e>
 800b764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b768:	b94b      	cbnz	r3, 800b77e <_raise_r+0x32>
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 f830 	bl	800b7d0 <_getpid_r>
 800b770:	462a      	mov	r2, r5
 800b772:	4601      	mov	r1, r0
 800b774:	4620      	mov	r0, r4
 800b776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b77a:	f000 b817 	b.w	800b7ac <_kill_r>
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d00a      	beq.n	800b798 <_raise_r+0x4c>
 800b782:	1c59      	adds	r1, r3, #1
 800b784:	d103      	bne.n	800b78e <_raise_r+0x42>
 800b786:	2316      	movs	r3, #22
 800b788:	6003      	str	r3, [r0, #0]
 800b78a:	2001      	movs	r0, #1
 800b78c:	e7e7      	b.n	800b75e <_raise_r+0x12>
 800b78e:	2400      	movs	r4, #0
 800b790:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b794:	4628      	mov	r0, r5
 800b796:	4798      	blx	r3
 800b798:	2000      	movs	r0, #0
 800b79a:	e7e0      	b.n	800b75e <_raise_r+0x12>

0800b79c <raise>:
 800b79c:	4b02      	ldr	r3, [pc, #8]	; (800b7a8 <raise+0xc>)
 800b79e:	4601      	mov	r1, r0
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	f7ff bfd3 	b.w	800b74c <_raise_r>
 800b7a6:	bf00      	nop
 800b7a8:	20000110 	.word	0x20000110

0800b7ac <_kill_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d07      	ldr	r5, [pc, #28]	; (800b7cc <_kill_r+0x20>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	f7f8 f851 	bl	8003860 <_kill>
 800b7be:	1c43      	adds	r3, r0, #1
 800b7c0:	d102      	bne.n	800b7c8 <_kill_r+0x1c>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b103      	cbz	r3, 800b7c8 <_kill_r+0x1c>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20000d10 	.word	0x20000d10

0800b7d0 <_getpid_r>:
 800b7d0:	f7f8 b83e 	b.w	8003850 <_getpid>

0800b7d4 <_strtol_l.constprop.0>:
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7da:	d001      	beq.n	800b7e0 <_strtol_l.constprop.0+0xc>
 800b7dc:	2b24      	cmp	r3, #36	; 0x24
 800b7de:	d906      	bls.n	800b7ee <_strtol_l.constprop.0+0x1a>
 800b7e0:	f7fd fd9c 	bl	800931c <__errno>
 800b7e4:	2316      	movs	r3, #22
 800b7e6:	6003      	str	r3, [r0, #0]
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b8d4 <_strtol_l.constprop.0+0x100>
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	462e      	mov	r6, r5
 800b7f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b7fe:	f017 0708 	ands.w	r7, r7, #8
 800b802:	d1f7      	bne.n	800b7f4 <_strtol_l.constprop.0+0x20>
 800b804:	2c2d      	cmp	r4, #45	; 0x2d
 800b806:	d132      	bne.n	800b86e <_strtol_l.constprop.0+0x9a>
 800b808:	782c      	ldrb	r4, [r5, #0]
 800b80a:	2701      	movs	r7, #1
 800b80c:	1cb5      	adds	r5, r6, #2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d05b      	beq.n	800b8ca <_strtol_l.constprop.0+0xf6>
 800b812:	2b10      	cmp	r3, #16
 800b814:	d109      	bne.n	800b82a <_strtol_l.constprop.0+0x56>
 800b816:	2c30      	cmp	r4, #48	; 0x30
 800b818:	d107      	bne.n	800b82a <_strtol_l.constprop.0+0x56>
 800b81a:	782c      	ldrb	r4, [r5, #0]
 800b81c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b820:	2c58      	cmp	r4, #88	; 0x58
 800b822:	d14d      	bne.n	800b8c0 <_strtol_l.constprop.0+0xec>
 800b824:	786c      	ldrb	r4, [r5, #1]
 800b826:	2310      	movs	r3, #16
 800b828:	3502      	adds	r5, #2
 800b82a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b82e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b832:	f04f 0c00 	mov.w	ip, #0
 800b836:	fbb8 f9f3 	udiv	r9, r8, r3
 800b83a:	4666      	mov	r6, ip
 800b83c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b840:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b844:	f1be 0f09 	cmp.w	lr, #9
 800b848:	d816      	bhi.n	800b878 <_strtol_l.constprop.0+0xa4>
 800b84a:	4674      	mov	r4, lr
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	dd24      	ble.n	800b89a <_strtol_l.constprop.0+0xc6>
 800b850:	f1bc 0f00 	cmp.w	ip, #0
 800b854:	db1e      	blt.n	800b894 <_strtol_l.constprop.0+0xc0>
 800b856:	45b1      	cmp	r9, r6
 800b858:	d31c      	bcc.n	800b894 <_strtol_l.constprop.0+0xc0>
 800b85a:	d101      	bne.n	800b860 <_strtol_l.constprop.0+0x8c>
 800b85c:	45a2      	cmp	sl, r4
 800b85e:	db19      	blt.n	800b894 <_strtol_l.constprop.0+0xc0>
 800b860:	fb06 4603 	mla	r6, r6, r3, r4
 800b864:	f04f 0c01 	mov.w	ip, #1
 800b868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b86c:	e7e8      	b.n	800b840 <_strtol_l.constprop.0+0x6c>
 800b86e:	2c2b      	cmp	r4, #43	; 0x2b
 800b870:	bf04      	itt	eq
 800b872:	782c      	ldrbeq	r4, [r5, #0]
 800b874:	1cb5      	addeq	r5, r6, #2
 800b876:	e7ca      	b.n	800b80e <_strtol_l.constprop.0+0x3a>
 800b878:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b87c:	f1be 0f19 	cmp.w	lr, #25
 800b880:	d801      	bhi.n	800b886 <_strtol_l.constprop.0+0xb2>
 800b882:	3c37      	subs	r4, #55	; 0x37
 800b884:	e7e2      	b.n	800b84c <_strtol_l.constprop.0+0x78>
 800b886:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b88a:	f1be 0f19 	cmp.w	lr, #25
 800b88e:	d804      	bhi.n	800b89a <_strtol_l.constprop.0+0xc6>
 800b890:	3c57      	subs	r4, #87	; 0x57
 800b892:	e7db      	b.n	800b84c <_strtol_l.constprop.0+0x78>
 800b894:	f04f 3cff 	mov.w	ip, #4294967295
 800b898:	e7e6      	b.n	800b868 <_strtol_l.constprop.0+0x94>
 800b89a:	f1bc 0f00 	cmp.w	ip, #0
 800b89e:	da05      	bge.n	800b8ac <_strtol_l.constprop.0+0xd8>
 800b8a0:	2322      	movs	r3, #34	; 0x22
 800b8a2:	6003      	str	r3, [r0, #0]
 800b8a4:	4646      	mov	r6, r8
 800b8a6:	b942      	cbnz	r2, 800b8ba <_strtol_l.constprop.0+0xe6>
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	e79e      	b.n	800b7ea <_strtol_l.constprop.0+0x16>
 800b8ac:	b107      	cbz	r7, 800b8b0 <_strtol_l.constprop.0+0xdc>
 800b8ae:	4276      	negs	r6, r6
 800b8b0:	2a00      	cmp	r2, #0
 800b8b2:	d0f9      	beq.n	800b8a8 <_strtol_l.constprop.0+0xd4>
 800b8b4:	f1bc 0f00 	cmp.w	ip, #0
 800b8b8:	d000      	beq.n	800b8bc <_strtol_l.constprop.0+0xe8>
 800b8ba:	1e69      	subs	r1, r5, #1
 800b8bc:	6011      	str	r1, [r2, #0]
 800b8be:	e7f3      	b.n	800b8a8 <_strtol_l.constprop.0+0xd4>
 800b8c0:	2430      	movs	r4, #48	; 0x30
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1b1      	bne.n	800b82a <_strtol_l.constprop.0+0x56>
 800b8c6:	2308      	movs	r3, #8
 800b8c8:	e7af      	b.n	800b82a <_strtol_l.constprop.0+0x56>
 800b8ca:	2c30      	cmp	r4, #48	; 0x30
 800b8cc:	d0a5      	beq.n	800b81a <_strtol_l.constprop.0+0x46>
 800b8ce:	230a      	movs	r3, #10
 800b8d0:	e7ab      	b.n	800b82a <_strtol_l.constprop.0+0x56>
 800b8d2:	bf00      	nop
 800b8d4:	0800bc28 	.word	0x0800bc28

0800b8d8 <_strtol_r>:
 800b8d8:	f7ff bf7c 	b.w	800b7d4 <_strtol_l.constprop.0>

0800b8dc <__submore>:
 800b8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	d11d      	bne.n	800b928 <__submore+0x4c>
 800b8ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b8f0:	f7fd fee2 	bl	80096b8 <_malloc_r>
 800b8f4:	b918      	cbnz	r0, 800b8fe <__submore+0x22>
 800b8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b902:	63a3      	str	r3, [r4, #56]	; 0x38
 800b904:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b908:	6360      	str	r0, [r4, #52]	; 0x34
 800b90a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b90e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b912:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b916:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b91a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b91e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b922:	6020      	str	r0, [r4, #0]
 800b924:	2000      	movs	r0, #0
 800b926:	e7e8      	b.n	800b8fa <__submore+0x1e>
 800b928:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b92a:	0077      	lsls	r7, r6, #1
 800b92c:	463a      	mov	r2, r7
 800b92e:	f7ff fb6f 	bl	800b010 <_realloc_r>
 800b932:	4605      	mov	r5, r0
 800b934:	2800      	cmp	r0, #0
 800b936:	d0de      	beq.n	800b8f6 <__submore+0x1a>
 800b938:	eb00 0806 	add.w	r8, r0, r6
 800b93c:	4601      	mov	r1, r0
 800b93e:	4632      	mov	r2, r6
 800b940:	4640      	mov	r0, r8
 800b942:	f7fd fe37 	bl	80095b4 <memcpy>
 800b946:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b94a:	f8c4 8000 	str.w	r8, [r4]
 800b94e:	e7e9      	b.n	800b924 <__submore+0x48>

0800b950 <_fstat_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	4d07      	ldr	r5, [pc, #28]	; (800b970 <_fstat_r+0x20>)
 800b954:	2300      	movs	r3, #0
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	4611      	mov	r1, r2
 800b95c:	602b      	str	r3, [r5, #0]
 800b95e:	f7f7 ffde 	bl	800391e <_fstat>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d102      	bne.n	800b96c <_fstat_r+0x1c>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b103      	cbz	r3, 800b96c <_fstat_r+0x1c>
 800b96a:	6023      	str	r3, [r4, #0]
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	bf00      	nop
 800b970:	20000d10 	.word	0x20000d10

0800b974 <_isatty_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4d06      	ldr	r5, [pc, #24]	; (800b990 <_isatty_r+0x1c>)
 800b978:	2300      	movs	r3, #0
 800b97a:	4604      	mov	r4, r0
 800b97c:	4608      	mov	r0, r1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	f7f7 ffdd 	bl	800393e <_isatty>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_isatty_r+0x1a>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_isatty_r+0x1a>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	20000d10 	.word	0x20000d10

0800b994 <_malloc_usable_size_r>:
 800b994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b998:	1f18      	subs	r0, r3, #4
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	bfbc      	itt	lt
 800b99e:	580b      	ldrlt	r3, [r1, r0]
 800b9a0:	18c0      	addlt	r0, r0, r3
 800b9a2:	4770      	bx	lr

0800b9a4 <_init>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	bf00      	nop
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr

0800b9b0 <_fini>:
 800b9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b2:	bf00      	nop
 800b9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b6:	bc08      	pop	{r3}
 800b9b8:	469e      	mov	lr, r3
 800b9ba:	4770      	bx	lr
