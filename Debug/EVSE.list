
EVSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800bce0  0800bce0  0001bce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0cc  0800c0cc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0d4  0800c0d4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0d4  0800c0d4  0001c0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d8  0800c0d8  0001c0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c0dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  200001d8  0800c2b4  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d50  0800c2b4  00020d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aee3  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004646  00000000  00000000  0003b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  0003f738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00041050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284a1  00000000  00000000  00042730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6e6  00000000  00000000  0006abd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f5c  00000000  00000000  000892b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000792c  00000000  00000000  00172264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcc8 	.word	0x0800bcc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bcc8 	.word	0x0800bcc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__gedf2>:
 800086c:	f04f 3cff 	mov.w	ip, #4294967295
 8000870:	e006      	b.n	8000880 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__ledf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	e002      	b.n	8000880 <__cmpdf2+0x4>
 800087a:	bf00      	nop

0800087c <__cmpdf2>:
 800087c:	f04f 0c01 	mov.w	ip, #1
 8000880:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800088c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000896:	d01b      	beq.n	80008d0 <__cmpdf2+0x54>
 8000898:	b001      	add	sp, #4
 800089a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800089e:	bf0c      	ite	eq
 80008a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008a4:	ea91 0f03 	teqne	r1, r3
 80008a8:	bf02      	ittt	eq
 80008aa:	ea90 0f02 	teqeq	r0, r2
 80008ae:	2000      	moveq	r0, #0
 80008b0:	4770      	bxeq	lr
 80008b2:	f110 0f00 	cmn.w	r0, #0
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf58      	it	pl
 80008bc:	4299      	cmppl	r1, r3
 80008be:	bf08      	it	eq
 80008c0:	4290      	cmpeq	r0, r2
 80008c2:	bf2c      	ite	cs
 80008c4:	17d8      	asrcs	r0, r3, #31
 80008c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	4770      	bx	lr
 80008d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d102      	bne.n	80008e0 <__cmpdf2+0x64>
 80008da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008de:	d107      	bne.n	80008f0 <__cmpdf2+0x74>
 80008e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d1d6      	bne.n	8000898 <__cmpdf2+0x1c>
 80008ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ee:	d0d3      	beq.n	8000898 <__cmpdf2+0x1c>
 80008f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdrcmple>:
 80008f8:	4684      	mov	ip, r0
 80008fa:	4610      	mov	r0, r2
 80008fc:	4662      	mov	r2, ip
 80008fe:	468c      	mov	ip, r1
 8000900:	4619      	mov	r1, r3
 8000902:	4663      	mov	r3, ip
 8000904:	e000      	b.n	8000908 <__aeabi_cdcmpeq>
 8000906:	bf00      	nop

08000908 <__aeabi_cdcmpeq>:
 8000908:	b501      	push	{r0, lr}
 800090a:	f7ff ffb7 	bl	800087c <__cmpdf2>
 800090e:	2800      	cmp	r0, #0
 8000910:	bf48      	it	mi
 8000912:	f110 0f00 	cmnmi.w	r0, #0
 8000916:	bd01      	pop	{r0, pc}

08000918 <__aeabi_dcmpeq>:
 8000918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800091c:	f7ff fff4 	bl	8000908 <__aeabi_cdcmpeq>
 8000920:	bf0c      	ite	eq
 8000922:	2001      	moveq	r0, #1
 8000924:	2000      	movne	r0, #0
 8000926:	f85d fb08 	ldr.w	pc, [sp], #8
 800092a:	bf00      	nop

0800092c <__aeabi_dcmplt>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff ffea 	bl	8000908 <__aeabi_cdcmpeq>
 8000934:	bf34      	ite	cc
 8000936:	2001      	movcc	r0, #1
 8000938:	2000      	movcs	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmple>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffe0 	bl	8000908 <__aeabi_cdcmpeq>
 8000948:	bf94      	ite	ls
 800094a:	2001      	movls	r0, #1
 800094c:	2000      	movhi	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmpge>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffce 	bl	80008f8 <__aeabi_cdrcmple>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpgt>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffc4 	bl	80008f8 <__aeabi_cdrcmple>
 8000970:	bf34      	ite	cc
 8000972:	2001      	movcc	r0, #1
 8000974:	2000      	movcs	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_ldivmod>:
 800097c:	b97b      	cbnz	r3, 800099e <__aeabi_ldivmod+0x22>
 800097e:	b972      	cbnz	r2, 800099e <__aeabi_ldivmod+0x22>
 8000980:	2900      	cmp	r1, #0
 8000982:	bfbe      	ittt	lt
 8000984:	2000      	movlt	r0, #0
 8000986:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800098a:	e006      	blt.n	800099a <__aeabi_ldivmod+0x1e>
 800098c:	bf08      	it	eq
 800098e:	2800      	cmpeq	r0, #0
 8000990:	bf1c      	itt	ne
 8000992:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000996:	f04f 30ff 	movne.w	r0, #4294967295
 800099a:	f000 b9a7 	b.w	8000cec <__aeabi_idiv0>
 800099e:	f1ad 0c08 	sub.w	ip, sp, #8
 80009a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a6:	2900      	cmp	r1, #0
 80009a8:	db09      	blt.n	80009be <__aeabi_ldivmod+0x42>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db1a      	blt.n	80009e4 <__aeabi_ldivmod+0x68>
 80009ae:	f000 f835 	bl	8000a1c <__udivmoddi4>
 80009b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ba:	b004      	add	sp, #16
 80009bc:	4770      	bx	lr
 80009be:	4240      	negs	r0, r0
 80009c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db1b      	blt.n	8000a00 <__aeabi_ldivmod+0x84>
 80009c8:	f000 f828 	bl	8000a1c <__udivmoddi4>
 80009cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d4:	b004      	add	sp, #16
 80009d6:	4240      	negs	r0, r0
 80009d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009dc:	4252      	negs	r2, r2
 80009de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009e2:	4770      	bx	lr
 80009e4:	4252      	negs	r2, r2
 80009e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ea:	f000 f817 	bl	8000a1c <__udivmoddi4>
 80009ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f6:	b004      	add	sp, #16
 80009f8:	4240      	negs	r0, r0
 80009fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009fe:	4770      	bx	lr
 8000a00:	4252      	negs	r2, r2
 8000a02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a06:	f000 f809 	bl	8000a1c <__udivmoddi4>
 8000a0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a12:	b004      	add	sp, #16
 8000a14:	4252      	negs	r2, r2
 8000a16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468e      	mov	lr, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d14d      	bne.n	8000ac6 <__udivmoddi4+0xaa>
 8000a2a:	428a      	cmp	r2, r1
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	d969      	bls.n	8000b04 <__udivmoddi4+0xe8>
 8000a30:	fab2 f282 	clz	r2, r2
 8000a34:	b152      	cbz	r2, 8000a4c <__udivmoddi4+0x30>
 8000a36:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3a:	f1c2 0120 	rsb	r1, r2, #32
 8000a3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a46:	ea41 0e03 	orr.w	lr, r1, r3
 8000a4a:	4094      	lsls	r4, r2
 8000a4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a50:	0c21      	lsrs	r1, r4, #16
 8000a52:	fbbe f6f8 	udiv	r6, lr, r8
 8000a56:	fa1f f78c 	uxth.w	r7, ip
 8000a5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a62:	fb06 f107 	mul.w	r1, r6, r7
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x64>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a72:	f080 811f 	bcs.w	8000cb4 <__udivmoddi4+0x298>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 811c 	bls.w	8000cb4 <__udivmoddi4+0x298>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a88:	fb08 3310 	mls	r3, r8, r0, r3
 8000a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a90:	fb00 f707 	mul.w	r7, r0, r7
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x92>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa0:	f080 810a 	bcs.w	8000cb8 <__udivmoddi4+0x29c>
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	f240 8107 	bls.w	8000cb8 <__udivmoddi4+0x29c>
 8000aaa:	4464      	add	r4, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab2:	1be4      	subs	r4, r4, r7
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	b11d      	cbz	r5, 8000ac0 <__udivmoddi4+0xa4>
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	2300      	movs	r3, #0
 8000abc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0xc2>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	f000 80ef 	beq.w	8000cae <__udivmoddi4+0x292>
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	fab3 f683 	clz	r6, r3
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d14a      	bne.n	8000b7c <__udivmoddi4+0x160>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xd4>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	f200 80f9 	bhi.w	8000ce2 <__udivmoddi4+0x2c6>
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0303 	sbc.w	r3, r1, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	469e      	mov	lr, r3
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d0e0      	beq.n	8000ac0 <__udivmoddi4+0xa4>
 8000afe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b02:	e7dd      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000b04:	b902      	cbnz	r2, 8000b08 <__udivmoddi4+0xec>
 8000b06:	deff      	udf	#255	; 0xff
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f040 8092 	bne.w	8000c36 <__udivmoddi4+0x21a>
 8000b12:	eba1 010c 	sub.w	r1, r1, ip
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2601      	movs	r6, #1
 8000b20:	0c20      	lsrs	r0, r4, #16
 8000b22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b26:	fb07 1113 	mls	r1, r7, r3, r1
 8000b2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2e:	fb0e f003 	mul.w	r0, lr, r3
 8000b32:	4288      	cmp	r0, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x12c>
 8000b36:	eb1c 0101 	adds.w	r1, ip, r1
 8000b3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x12a>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2c0>
 8000b46:	4643      	mov	r3, r8
 8000b48:	1a09      	subs	r1, r1, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b50:	fb07 1110 	mls	r1, r7, r0, r1
 8000b54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x156>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x154>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b70:	4608      	mov	r0, r1
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7a:	e79c      	b.n	8000ab6 <__udivmoddi4+0x9a>
 8000b7c:	f1c6 0720 	rsb	r7, r6, #32
 8000b80:	40b3      	lsls	r3, r6
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b92:	431c      	orrs	r4, r3
 8000b94:	40f9      	lsrs	r1, r7
 8000b96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ba2:	0c20      	lsrs	r0, r4, #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb4:	4288      	cmp	r0, r1
 8000bb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b8>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bc8:	4288      	cmp	r0, r1
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000be0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	458e      	cmp	lr, r1
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1e2>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bf6:	458e      	cmp	lr, r1
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4461      	add	r1, ip
 8000bfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c02:	fba0 9402 	umull	r9, r4, r0, r2
 8000c06:	eba1 010e 	sub.w	r1, r1, lr
 8000c0a:	42a1      	cmp	r1, r4
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46a6      	mov	lr, r4
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x2a4>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x2a0>
 8000c14:	b15d      	cbz	r5, 8000c2e <__udivmoddi4+0x212>
 8000c16:	ebb3 0208 	subs.w	r2, r3, r8
 8000c1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c22:	fa22 f306 	lsr.w	r3, r2, r6
 8000c26:	40f1      	lsrs	r1, r6
 8000c28:	431f      	orrs	r7, r3
 8000c2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c2e:	2600      	movs	r6, #0
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa21 f303 	lsr.w	r3, r1, r3
 8000c44:	4091      	lsls	r1, r2
 8000c46:	4301      	orrs	r1, r0
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c54:	fb07 3610 	mls	r6, r7, r0, r3
 8000c58:	0c0b      	lsrs	r3, r1, #16
 8000c5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c62:	429e      	cmp	r6, r3
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x260>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c74:	429e      	cmp	r6, r3
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	b289      	uxth	r1, r1
 8000c80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c84:	fb07 3316 	mls	r3, r7, r6, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x28a>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000ca2:	3e02      	subs	r6, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0x104>
 8000cae:	462e      	mov	r6, r5
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e705      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	e6e3      	b.n	8000a80 <__udivmoddi4+0x64>
 8000cb8:	4618      	mov	r0, r3
 8000cba:	e6f8      	b.n	8000aae <__udivmoddi4+0x92>
 8000cbc:	454b      	cmp	r3, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f8>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f8>
 8000ccc:	4646      	mov	r6, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x28a>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1e2>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b8>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x12c>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e709      	b.n	8000afa <__udivmoddi4+0xde>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x156>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <ADC_Init>:
uint8_t mNumOfChannels;
uint16_t* mResults = NULL;


void ADC_Init(ADC_HandleTypeDef*  hADC, DMA_HandleTypeDef* hDMA, uint8_t numOfChannels)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
	adc = hADC;
 8000cfe:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <ADC_Init+0x48>)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6013      	str	r3, [r2, #0]
	dma = hDMA;
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <ADC_Init+0x4c>)
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	6013      	str	r3, [r2, #0]
	mNumOfChannels = numOfChannels;
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <ADC_Init+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	7013      	strb	r3, [r2, #0]
#ifdef STM32L4    // calibration supported only by STM32L4xx family
	HAL_ADCEx_Calibration_Start(adc, ADC_SINGLE_ENDED);
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <ADC_Init+0x48>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	217f      	movs	r1, #127	; 0x7f
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 fcf4 	bl	8005704 <HAL_ADCEx_Calibration_Start>
#endif
	mResults = malloc(mNumOfChannels * sizeof(uint16_t));
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <ADC_Init+0x50>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 fdc8 	bl	80098b8 <malloc>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <ADC_Init+0x54>)
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001f4 	.word	0x200001f4
 8000d3c:	200001f8 	.word	0x200001f8
 8000d40:	200001fc 	.word	0x200001fc
 8000d44:	20000200 	.word	0x20000200

08000d48 <ADC_StartConversion>:


void ADC_StartConversion(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	if (mResults != NULL)
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <ADC_StartConversion+0x24>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <ADC_StartConversion+0x1e>
	{
		HAL_ADC_Start_DMA(adc, (uint32_t*)mResults, mNumOfChannels);
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <ADC_StartConversion+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <ADC_StartConversion+0x24>)
 8000d5a:	6811      	ldr	r1, [r2, #0]
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <ADC_StartConversion+0x2c>)
 8000d5e:	7812      	ldrb	r2, [r2, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fbf9 	bl	8004558 <HAL_ADC_Start_DMA>
	}
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000200 	.word	0x20000200
 8000d70:	200001f4 	.word	0x200001f4
 8000d74:	200001fc 	.word	0x200001fc

08000d78 <ADC_GetValue>:

uint16_t ADC_GetValue(uint8_t channel)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	if (channel < mNumOfChannels && mResults != NULL)
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <ADC_GetValue+0x38>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d20a      	bcs.n	8000da2 <ADC_GetValue+0x2a>
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <ADC_GetValue+0x3c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <ADC_GetValue+0x2a>
	{
		return mResults[channel];
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <ADC_GetValue+0x3c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	e000      	b.n	8000da4 <ADC_GetValue+0x2c>
	}
	else
	{
		return 0;
 8000da2:	2300      	movs	r3, #0
	}
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	200001fc 	.word	0x200001fc
 8000db4:	20000200 	.word	0x20000200

08000db8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(adc);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fc4b 	bl	8004660 <HAL_ADC_Stop_DMA>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200001f4 	.word	0x200001f4

08000dd8 <COM_Init>:

static void SendVariable(uint16_t id);


void COM_Init(uint8_t nodeId)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	mNodeId = nodeId;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <COM_Init+0x1c>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	7013      	strb	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	2000054c 	.word	0x2000054c

08000df8 <COM_GetRxMessage>:
	return ns;
}

// just wrapper to MCAN
uint8_t COM_GetRxMessage( s_CanRxMsg* msg)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	return MCAN_GetRxMessage(msg);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fbeb 	bl	80015dc <MCAN_GetRxMessage>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <COM_Update_10ms>:

void COM_Update_10ms(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

	// stream the variables to CAN
	int i;
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e017      	b.n	8000e4c <COM_Update_10ms+0x3c>
	{
		mStreamList[i].timer+=10;
 8000e1c:	4934      	ldr	r1, [pc, #208]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	330a      	adds	r3, #10
 8000e30:	b298      	uxth	r0, r3
 8000e32:	492f      	ldr	r1, [pc, #188]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	3306      	adds	r3, #6
 8000e42:	4602      	mov	r2, r0
 8000e44:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b45      	cmp	r3, #69	; 0x45
 8000e50:	dde4      	ble.n	8000e1c <COM_Update_10ms+0xc>
	}
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	e042      	b.n	8000ede <COM_Update_10ms+0xce>
	{
		if (mStreamList[i].enable == 1 && mStreamList[i].sendPeriod != 0)
 8000e58:	4925      	ldr	r1, [pc, #148]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d135      	bne.n	8000ed8 <COM_Update_10ms+0xc8>
 8000e6c:	4920      	ldr	r1, [pc, #128]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d02a      	beq.n	8000ed8 <COM_Update_10ms+0xc8>
		{
			if (mStreamList[i].timer >= mStreamList[i].sendPeriod)
 8000e82:	491b      	ldr	r1, [pc, #108]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	3306      	adds	r3, #6
 8000e92:	8819      	ldrh	r1, [r3, #0]
 8000e94:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	4299      	cmp	r1, r3
 8000ea8:	d316      	bcc.n	8000ed8 <COM_Update_10ms+0xc8>
			{
				SendVariable(mStreamList[i].varId);
 8000eaa:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3302      	adds	r3, #2
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f819 	bl	8000ef4 <SendVariable>
				mStreamList[i].timer = 0;
 8000ec2:	490b      	ldr	r1, [pc, #44]	; (8000ef0 <COM_Update_10ms+0xe0>)
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	3306      	adds	r3, #6
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
				break;  // send just 1 value every 10ms
 8000ed6:	e006      	b.n	8000ee6 <COM_Update_10ms+0xd6>
	for(i = 0; i < STREAM_LIST_SIZE; i++)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b45      	cmp	r3, #69	; 0x45
 8000ee2:	ddb9      	ble.n	8000e58 <COM_Update_10ms+0x48>
			}
		}
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <SendVariable>:
	}
}

/*Private methods*/
static void SendVariable(uint16_t id)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	uint16_t invalid = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	827b      	strh	r3, [r7, #18]
	uint16_t validflag = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	82fb      	strh	r3, [r7, #22]
	int16_t tmp = VAR_GetVariable(id, &invalid);
 8000f06:	f107 0212 	add.w	r2, r7, #18
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 f832 	bl	8001f78 <VAR_GetVariable>
 8000f14:	4603      	mov	r3, r0
 8000f16:	82bb      	strh	r3, [r7, #20]
	validflag = (invalid == INVALID_FLAG ? 0 : 1);
 8000f18:	8a7b      	ldrh	r3, [r7, #18]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	bf14      	ite	ne
 8000f1e:	2301      	movne	r3, #1
 8000f20:	2300      	moveq	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	82fb      	strh	r3, [r7, #22]
	uint8_t data[8];
	data[0] = id >> 8;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	723b      	strb	r3, [r7, #8]
	data[1] = id  & 0xFF;
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	727b      	strb	r3, [r7, #9]
	data[2] = tmp >> 8;
 8000f36:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f3a:	121b      	asrs	r3, r3, #8
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72bb      	strb	r3, [r7, #10]
	data[3] = tmp & 0xFF;
 8000f42:	8abb      	ldrh	r3, [r7, #20]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
	data[4] = validflag >> 8;
 8000f48:	8afb      	ldrh	r3, [r7, #22]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	733b      	strb	r3, [r7, #12]
	data[5] = validflag & 0xFF;
 8000f52:	8afb      	ldrh	r3, [r7, #22]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	737b      	strb	r3, [r7, #13]
	data[6] = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73bb      	strb	r3, [r7, #14]
	data[7] = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	MCAN_SendFrame(CMD_VAR_VALUE + mNodeId, data, 8);
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <SendVariable+0x8c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f107 0108 	add.w	r1, r7, #8
 8000f70:	2208      	movs	r2, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fb48 	bl	8001608 <MCAN_SendFrame>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000054c 	.word	0x2000054c

08000f84 <ELM_Init>:
sElMeter*  mMeters;
uint8_t mNumOfMeters;


void ELM_Init(uint8_t numOfMeters)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	mNumOfMeters = numOfMeters;
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <ELM_Init+0x3c>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	7013      	strb	r3, [r2, #0]
	mMeters = malloc(numOfMeters * sizeof(sElMeter));
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 fc8a 	bl	80098b8 <malloc>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <ELM_Init+0x40>)
 8000faa:	601a      	str	r2, [r3, #0]
	if (mMeters == NULL)
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <ELM_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <ELM_Init+0x34>
	{
	  Error_Handler();
 8000fb4:	f002 faa2 	bl	80034fc <Error_Handler>
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000554 	.word	0x20000554
 8000fc4:	20000550 	.word	0x20000550

08000fc8 <ELM_AddMeter>:

void ELM_AddMeter(uint8_t ElmId, uint32_t pin, uint16_t VarId)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	80bb      	strh	r3, [r7, #4]
	if(ElmId < mNumOfMeters)
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <ELM_AddMeter+0xa0>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d23b      	bcs.n	800105a <ELM_AddMeter+0x92>
	{
		mMeters[ElmId].id = ElmId;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <ELM_AddMeter+0xa4>)
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	79fa      	ldrb	r2, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	701a      	strb	r2, [r3, #0]
		mMeters[ElmId].Pin = pin;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <ELM_AddMeter+0xa4>)
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	79fa      	ldrb	r2, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	60da      	str	r2, [r3, #12]
		mMeters[ElmId].VarId = VarId;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <ELM_AddMeter+0xa4>)
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	88ba      	ldrh	r2, [r7, #4]
 800101c:	821a      	strh	r2, [r3, #16]
		mMeters[ElmId].W = 0;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <ELM_AddMeter+0xa4>)
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	2200      	movs	r2, #0
 8001030:	809a      	strh	r2, [r3, #4]
		mMeters[ElmId].Wh = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <ELM_AddMeter+0xa4>)
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	2200      	movs	r2, #0
 8001044:	805a      	strh	r2, [r3, #2]
		mMeters[ElmId].LastPulse = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <ELM_AddMeter+0xa4>)
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	}
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000554 	.word	0x20000554
 800106c:	20000550 	.word	0x20000550

08001070 <ELM_Update_1s>:

void ELM_Update_1s(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
	// copy the values to variables
	uint8_t i;
	uint32_t tick = HAL_GetTick();
 8001076:	f002 fecf 	bl	8003e18 <HAL_GetTick>
 800107a:	60b8      	str	r0, [r7, #8]
	uint32_t period;
	uint16_t estimatedPower;
	for(i = 0 ; i < mNumOfMeters; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e06f      	b.n	8001162 <ELM_Update_1s+0xf2>
	{
		period = tick - mMeters[i].LastPulse;
 8001082:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <ELM_Update_1s+0x108>)
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	607b      	str	r3, [r7, #4]
		if (period >  (3600000 / MIN_MEASURABLE_POWER_W))  // power decreased under measurable threshold
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a37      	ldr	r2, [pc, #220]	; (800117c <ELM_Update_1s+0x10c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d90a      	bls.n	80010b8 <ELM_Update_1s+0x48>
		{
			mMeters[i].W = 0;  // set power to zero
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <ELM_Update_1s+0x108>)
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	809a      	strh	r2, [r3, #4]
 80010b6:	e01f      	b.n	80010f8 <ELM_Update_1s+0x88>
		}
		else if (period >  10000)  // after 10 seconds from last S0 pulse start decreasing measured power (worstcase estimation)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80010be:	4293      	cmp	r3, r2
 80010c0:	d91a      	bls.n	80010f8 <ELM_Update_1s+0x88>
		{
			estimatedPower = 3600000 / period;  // actual estimated power
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <ELM_Update_1s+0x110>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	807b      	strh	r3, [r7, #2]
			if (mMeters[i].W > estimatedPower)
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <ELM_Update_1s+0x108>)
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d209      	bcs.n	80010f8 <ELM_Update_1s+0x88>
			{
				mMeters[i].W = estimatedPower;
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <ELM_Update_1s+0x108>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	887a      	ldrh	r2, [r7, #2]
 80010f6:	809a      	strh	r2, [r3, #4]
			}
		}

		VAR_SetVariable(mMeters[i].VarId, mMeters[i].Wh, 1);
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <ELM_Update_1s+0x108>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	8a1b      	ldrh	r3, [r3, #16]
 800110a:	b2d8      	uxtb	r0, r3
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <ELM_Update_1s+0x108>)
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	885b      	ldrh	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	f000 ff5c 	bl	8001fe0 <VAR_SetVariable>
		VAR_SetVariable(mMeters[i].VarId + 10, mMeters[i].W, 1);
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <ELM_Update_1s+0x108>)
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	8a1b      	ldrh	r3, [r3, #16]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	330a      	adds	r3, #10
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <ELM_Update_1s+0x108>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	b21b      	sxth	r3, r3
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f000 ff42 	bl	8001fe0 <VAR_SetVariable>
	for(i = 0 ; i < mNumOfMeters; i++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <ELM_Update_1s+0x114>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	429a      	cmp	r2, r3
 800116a:	d38a      	bcc.n	8001082 <ELM_Update_1s+0x12>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000550 	.word	0x20000550
 800117c:	00057e40 	.word	0x00057e40
 8001180:	0036ee80 	.word	0x0036ee80
 8001184:	20000554 	.word	0x20000554

08001188 <ELM_GetConsumptionWh>:

uint16_t ELM_GetConsumptionWh(uint8_t ElmId)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if(ElmId < mNumOfMeters)
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <ELM_GetConsumptionWh+0x38>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	429a      	cmp	r2, r3
 800119a:	d209      	bcs.n	80011b0 <ELM_GetConsumptionWh+0x28>
	{
		return mMeters[ElmId].Wh;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <ELM_GetConsumptionWh+0x3c>)
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	885b      	ldrh	r3, [r3, #2]
 80011ae:	e000      	b.n	80011b2 <ELM_GetConsumptionWh+0x2a>
	}
	else
	{
		return 0;
 80011b0:	2300      	movs	r3, #0
	}
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000554 	.word	0x20000554
 80011c4:	20000550 	.word	0x20000550

080011c8 <ELM_GetPowerW>:


uint16_t ELM_GetPowerW(uint8_t ElmId)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if(ElmId < mNumOfMeters)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <ELM_GetPowerW+0x38>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	79fa      	ldrb	r2, [r7, #7]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d209      	bcs.n	80011f0 <ELM_GetPowerW+0x28>
	{
		return mMeters[ElmId].W;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <ELM_GetPowerW+0x3c>)
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	79fa      	ldrb	r2, [r7, #7]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	e000      	b.n	80011f2 <ELM_GetPowerW+0x2a>
	}
	return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000554 	.word	0x20000554
 8001204:	20000550 	.word	0x20000550

08001208 <ELM_ResetConsumption>:


void ELM_ResetConsumption(uint8_t ElmId)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	if(ElmId < mNumOfMeters)
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <ELM_ResetConsumption+0x34>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d209      	bcs.n	8001230 <ELM_ResetConsumption+0x28>
	{
		mMeters[ElmId].Wh = 0;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <ELM_ResetConsumption+0x38>)
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	2200      	movs	r2, #0
 800122e:	805a      	strh	r2, [r3, #2]
	}
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000554 	.word	0x20000554
 8001240:	20000550 	.word	0x20000550

08001244 <ELM_ExtiCallback>:

// exti interrupt callback


void ELM_ExtiCallback(uint16_t GPIO_Pin)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	uint8_t i;
	uint32_t period;
	uint32_t tick = HAL_GetTick();
 800124e:	f002 fde3 	bl	8003e18 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]
	for(i = 0 ; i < mNumOfMeters; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e03e      	b.n	80012d8 <ELM_ExtiCallback+0x94>
	{
		if (mMeters[i].Pin == GPIO_Pin)
 800125a:	4b24      	ldr	r3, [pc, #144]	; (80012ec <ELM_ExtiCallback+0xa8>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	7dfa      	ldrb	r2, [r7, #23]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	88fb      	ldrh	r3, [r7, #6]
 800126e:	429a      	cmp	r2, r3
 8001270:	d12f      	bne.n	80012d2 <ELM_ExtiCallback+0x8e>
		{
			mMeters[i].Wh ++;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <ELM_ExtiCallback+0xa8>)
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	7dfa      	ldrb	r2, [r7, #23]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	440b      	add	r3, r1
 8001282:	885a      	ldrh	r2, [r3, #2]
 8001284:	3201      	adds	r2, #1
 8001286:	b292      	uxth	r2, r2
 8001288:	805a      	strh	r2, [r3, #2]
			period = tick - mMeters[i].LastPulse;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <ELM_ExtiCallback+0xa8>)
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	60fb      	str	r3, [r7, #12]
			mMeters[i].W = 3600000/period;
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <ELM_ExtiCallback+0xac>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	fbb2 f0f3 	udiv	r0, r2, r3
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <ELM_ExtiCallback+0xa8>)
 80012ac:	6819      	ldr	r1, [r3, #0]
 80012ae:	7dfa      	ldrb	r2, [r7, #23]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	b282      	uxth	r2, r0
 80012bc:	809a      	strh	r2, [r3, #4]
			mMeters[i].LastPulse = tick;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <ELM_ExtiCallback+0xa8>)
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	609a      	str	r2, [r3, #8]
	for(i = 0 ; i < mNumOfMeters; i++)
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	3301      	adds	r3, #1
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <ELM_ExtiCallback+0xb0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	7dfa      	ldrb	r2, [r7, #23]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3bb      	bcc.n	800125a <ELM_ExtiCallback+0x16>
		}
	}
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000550 	.word	0x20000550
 80012f0:	0036ee80 	.word	0x0036ee80
 80012f4:	20000554 	.word	0x20000554

080012f8 <MCAN_Init>:



// initialization of CAN node, and buffers
void MCAN_Init(CAN_HandleTypeDef	* can, uint8_t id)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af04      	add	r7, sp, #16
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
	uint8_t bank_offset = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	mMcan.Rx0Buf = CB_Create(sizeof(s_CanRxMsg),RX_NMT_BUFF_SIZE);
 8001308:	21c8      	movs	r1, #200	; 0xc8
 800130a:	2024      	movs	r0, #36	; 0x24
 800130c:	f000 fe88 	bl	8002020 <CB_Create>
 8001310:	4603      	mov	r3, r0
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <MCAN_Init+0x140>)
 8001314:	60d3      	str	r3, [r2, #12]
	mMcan.Rx1Buf = CB_Create(sizeof(s_CanRxMsg),RX_BUFF_SIZE);
 8001316:	2150      	movs	r1, #80	; 0x50
 8001318:	2024      	movs	r0, #36	; 0x24
 800131a:	f000 fe81 	bl	8002020 <CB_Create>
 800131e:	4603      	mov	r3, r0
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <MCAN_Init+0x140>)
 8001322:	6113      	str	r3, [r2, #16]
	mMcan.TxBuf = CB_Create(sizeof(s_CanTxMsg),TX_BUFF_SIZE);
 8001324:	2164      	movs	r1, #100	; 0x64
 8001326:	2020      	movs	r0, #32
 8001328:	f000 fe7a 	bl	8002020 <CB_Create>
 800132c:	4603      	mov	r3, r0
 800132e:	4a42      	ldr	r2, [pc, #264]	; (8001438 <MCAN_Init+0x140>)
 8001330:	6153      	str	r3, [r2, #20]
	if (mMcan.Rx0Buf == NULL || mMcan.Rx1Buf == NULL ||mMcan.TxBuf == NULL)
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <MCAN_Init+0x140>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <MCAN_Init+0x48>
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <MCAN_Init+0x140>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b00      	cmp	r3, #0
	{
		// TBD
	}

	mMcan.CanHw = can;
 8001340:	4a3d      	ldr	r2, [pc, #244]	; (8001438 <MCAN_Init+0x140>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6093      	str	r3, [r2, #8]
		bank_offset = 15;
	}
	#endif


	mMcan.Node.nodeId = id;
 8001346:	4a3c      	ldr	r2, [pc, #240]	; (8001438 <MCAN_Init+0x140>)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	7013      	strb	r3, [r2, #0]
	mMcan.Node.timeout = CO_DEFAULT_HB_TO/2;
 800134c:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <MCAN_Init+0x140>)
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	809a      	strh	r2, [r3, #4]
	mMcan.Node.timeout_cnt = 0;
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MCAN_Init+0x140>)
 8001356:	2200      	movs	r2, #0
 8001358:	805a      	strh	r2, [r3, #2]

	mMcan.HbMsg.header.DLC = 1;
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MCAN_Init+0x140>)
 800135c:	2201      	movs	r2, #1
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
	mMcan.HbMsg.header.StdId = HB + mMcan.Node.nodeId;
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MCAN_Init+0x140>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001368:	461a      	mov	r2, r3
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <MCAN_Init+0x140>)
 800136c:	619a      	str	r2, [r3, #24]
	mMcan.HbMsg.header.ExtId = 0x00;
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MCAN_Init+0x140>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
	mMcan.HbMsg.header.RTR = CAN_RTR_DATA;
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <MCAN_Init+0x140>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
	mMcan.HbMsg.header.IDE = CAN_ID_STD;
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <MCAN_Init+0x140>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]

	// init network
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e014      	b.n	80013b0 <MCAN_Init+0xb8>
	{
		mNodes[i].timeout = CO_DEFAULT_HB_TO;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <MCAN_Init+0x144>)
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001392:	809a      	strh	r2, [r3, #4]
		mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	4a29      	ldr	r2, [pc, #164]	; (800143c <MCAN_Init+0x144>)
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	719a      	strb	r2, [r3, #6]
		mNodes[i].nodeId = i;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4926      	ldr	r1, [pc, #152]	; (800143c <MCAN_Init+0x144>)
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (i = 0; i < MAX_NUM_OF_NODES; i++)
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d9e7      	bls.n	8001386 <MCAN_Init+0x8e>
	}
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MCAN_Init+0x140>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MCAN_Init+0x140>)
 80013be:	7999      	ldrb	r1, [r3, #6]
 80013c0:	4a1e      	ldr	r2, [pc, #120]	; (800143c <MCAN_Init+0x144>)
 80013c2:	00c3      	lsls	r3, r0, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	460a      	mov	r2, r1
 80013c8:	719a      	strb	r2, [r3, #6]



	// set the filter of FIFO0 for hearbeats (0x700 - 0x70F)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO0, 1 + bank_offset , HB, HB+ID_RANGE, 0,0); // HeartBeats from all devices => FMI = 0/4
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MCAN_Init+0x140>)
 80013cc:	6898      	ldr	r0, [r3, #8]
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	2300      	movs	r3, #0
 80013d6:	9302      	str	r3, [sp, #8]
 80013d8:	2300      	movs	r3, #0
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f240 730f 	movw	r3, #1807	; 0x70f
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013e6:	2100      	movs	r1, #0
 80013e8:	f000 f990 	bl	800170c <Set_Filter_Id_Mask>

	// set the filter of FIFO1 for all other messages (0x000 - 0x6FF)
	Set_Filter_Id_Mask(mMcan.CanHw, CAN_FILTER_FIFO1, 2 + bank_offset , 0x000, 0x6FF, 0,0);
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MCAN_Init+0x140>)
 80013ee:	6898      	ldr	r0, [r3, #8]
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	3302      	adds	r3, #2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2300      	movs	r3, #0
 8001406:	2101      	movs	r1, #1
 8001408:	f000 f980 	bl	800170c <Set_Filter_Id_Mask>


	HAL_CAN_ActivateNotification(mMcan.CanHw, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_LAST_ERROR_CODE| CAN_IT_ERROR);
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MCAN_Init+0x140>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f648 0112 	movw	r1, #34834	; 0x8812
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fdfd 	bl	8006014 <HAL_CAN_ActivateNotification>

	mMcan.CanHw->Instance->MCR &= ~0x00010000;	// enable CAN in debug mode (clear DBF bit)
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MCAN_Init+0x140>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <MCAN_Init+0x140>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000558 	.word	0x20000558
 800143c:	20000594 	.word	0x20000594

08001440 <MCAN_Start>:



// Start CANOPEN protocols
void MCAN_Start(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_CAN_Start(mMcan.CanHw);  // start can
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MCAN_Start+0x2c>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f004 fbb2 	bl	8005bb2 <HAL_CAN_Start>
	mMcan.Node.canStatus = eNS_NMT_RUN;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <MCAN_Start+0x2c>)
 8001450:	2201      	movs	r2, #1
 8001452:	719a      	strb	r2, [r3, #6]
	mNodes[mMcan.Node.nodeId].canStatus = mMcan.Node.canStatus;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <MCAN_Start+0x2c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <MCAN_Start+0x2c>)
 800145c:	7999      	ldrb	r1, [r3, #6]
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <MCAN_Start+0x30>)
 8001460:	00c3      	lsls	r3, r0, #3
 8001462:	4413      	add	r3, r2
 8001464:	460a      	mov	r2, r1
 8001466:	719a      	strb	r2, [r3, #6]
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000558 	.word	0x20000558
 8001470:	20000594 	.word	0x20000594

08001474 <MCAN_Update_10ms>:
	return mNodes;
}

// Periodic update function for synchronous CAN handling
void MCAN_Update_10ms(void)
{
 8001474:	b5b0      	push	{r4, r5, r7, lr}
 8001476:	b098      	sub	sp, #96	; 0x60
 8001478:	af04      	add	r7, sp, #16
	uint32_t	TxMailbox;


	// Check messages from FIFO 0 (NMT, HB)

	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 800147a:	e01e      	b.n	80014ba <MCAN_Update_10ms+0x46>
	{
		if (msg.header.StdId >= HB && msg.header.StdId <= HB + ID_RANGE) // received HB
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001482:	d31a      	bcc.n	80014ba <MCAN_Update_10ms+0x46>
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f5b3 6fe2 	cmp.w	r3, #1808	; 0x710
 800148a:	d216      	bcs.n	80014ba <MCAN_Update_10ms+0x46>
		{
			uint8_t nodeId = msg.header.StdId - HB;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			if (nodeId < MAX_NUM_OF_NODES)  // valid heartbeat received
 8001492:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001496:	2b07      	cmp	r3, #7
 8001498:	d80f      	bhi.n	80014ba <MCAN_Update_10ms+0x46>
			{
				mNodes[nodeId].canStatus = (e_NodeStatus)msg.data[0];
 800149a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800149e:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 80014a2:	4a38      	ldr	r2, [pc, #224]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	460a      	mov	r2, r1
 80014aa:	719a      	strb	r2, [r3, #6]
				mNodes[nodeId].timeout_cnt = 0;
 80014ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80014b0:	4a34      	ldr	r2, [pc, #208]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	2200      	movs	r2, #0
 80014b8:	805a      	strh	r2, [r3, #2]
	while(0 == CB_Get(mMcan.Rx0Buf,(uint8_t*)&msg))  // process all messages in buffer
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <MCAN_Update_10ms+0x114>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fe4d 	bl	8002164 <CB_Get>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0d5      	beq.n	800147c <MCAN_Update_10ms+0x8>
			}
		}
	}

	// Check timeout of all nodes
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014d4:	e02e      	b.n	8001534 <MCAN_Update_10ms+0xc0>
	{
		mNodes[i].timeout_cnt += 10;  // 10ms period of execution of this fcn
 80014d6:	4a2b      	ldr	r2, [pc, #172]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	330a      	adds	r3, #10
 80014e2:	b299      	uxth	r1, r3
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	805a      	strh	r2, [r3, #2]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	885a      	ldrh	r2, [r3, #2]
 80014fa:	4922      	ldr	r1, [pc, #136]	; (8001584 <MCAN_Update_10ms+0x110>)
 80014fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	d912      	bls.n	800152e <MCAN_Update_10ms+0xba>
				mNodes[i].canStatus != eNS_NMT_UNKNOWN)
 8001508:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <MCAN_Update_10ms+0x110>)
 800150a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4413      	add	r3, r2
 8001510:	799b      	ldrb	r3, [r3, #6]
		if (mNodes[i].timeout_cnt > mNodes[i].timeout &&  // HB period elapsed
 8001512:	2bff      	cmp	r3, #255	; 0xff
 8001514:	d00b      	beq.n	800152e <MCAN_Update_10ms+0xba>
		{
			mNodes[i].timeout_cnt = 0;
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MCAN_Update_10ms+0x110>)
 8001518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	2200      	movs	r2, #0
 8001520:	805a      	strh	r2, [r3, #2]
			mNodes[i].canStatus = eNS_NMT_UNKNOWN;
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MCAN_Update_10ms+0x110>)
 8001524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	22ff      	movs	r2, #255	; 0xff
 800152c:	719a      	strb	r2, [r3, #6]
	for(i = 0; i < MAX_NUM_OF_NODES; i++)
 800152e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001530:	3301      	adds	r3, #1
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	2b07      	cmp	r3, #7
 8001538:	ddcd      	ble.n	80014d6 <MCAN_Update_10ms+0x62>
		}
	}

	// Send heartbeat if it's time
	mMcan.Node.timeout_cnt += 10;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MCAN_Update_10ms+0x114>)
 800153c:	885b      	ldrh	r3, [r3, #2]
 800153e:	330a      	adds	r3, #10
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001544:	805a      	strh	r2, [r3, #2]
	if (mMcan.Node.timeout_cnt >= mMcan.Node.timeout)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001548:	885a      	ldrh	r2, [r3, #2]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MCAN_Update_10ms+0x114>)
 800154c:	889b      	ldrh	r3, [r3, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d313      	bcc.n	800157a <MCAN_Update_10ms+0x106>
	{
		mMcan.Node.timeout_cnt = 0;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001554:	2200      	movs	r2, #0
 8001556:	805a      	strh	r2, [r3, #2]
		mMcan.HbMsg.data[0] = mMcan.Node.canStatus;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MCAN_Update_10ms+0x114>)
 800155a:	799a      	ldrb	r2, [r3, #6]
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MCAN_Update_10ms+0x114>)
 800155e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		Send(mMcan.HbMsg);
 8001562:	4d09      	ldr	r5, [pc, #36]	; (8001588 <MCAN_Update_10ms+0x114>)
 8001564:	466c      	mov	r4, sp
 8001566:	f105 0328 	add.w	r3, r5, #40	; 0x28
 800156a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001570:	f105 0318 	add.w	r3, r5, #24
 8001574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001576:	f000 f871 	bl	800165c <Send>
	}

}
 800157a:	bf00      	nop
 800157c:	3750      	adds	r7, #80	; 0x50
 800157e:	46bd      	mov	sp, r7
 8001580:	bdb0      	pop	{r4, r5, r7, pc}
 8001582:	bf00      	nop
 8001584:	20000594 	.word	0x20000594
 8001588:	20000558 	.word	0x20000558

0800158c <MCAN_Transmit>:


// function to be called periodically at a rate of transmitting can messages. (for example every 5 ms)
// One CAN message is is sent if TX buffer is not empty
void MCAN_Transmit(void)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08b      	sub	sp, #44	; 0x2c
 8001590:	af00      	add	r7, sp, #0
	s_CanTxMsg TxMsg;
	s_CanNode* tmp;
	uint32_t	TxMailbox;

	if  (0 == CB_Probe(mMcan.TxBuf,(uint8_t*)&TxMsg))  // fetch the message from the buffer
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MCAN_Transmit+0x4c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f107 0208 	add.w	r2, r7, #8
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fd88 	bl	80020b2 <CB_Probe>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d113      	bne.n	80015d0 <MCAN_Transmit+0x44>
	{
		if (HAL_OK == HAL_CAN_AddTxMessage(mMcan.CanHw, &TxMsg.header, TxMsg.data, &TxMailbox))  // transmit the message
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MCAN_Transmit+0x4c>)
 80015aa:	6898      	ldr	r0, [r3, #8]
 80015ac:	1d3c      	adds	r4, r7, #4
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	f103 0218 	add.w	r2, r3, #24
 80015b6:	f107 0108 	add.w	r1, r7, #8
 80015ba:	4623      	mov	r3, r4
 80015bc:	f004 fb3d 	bl	8005c3a <HAL_CAN_AddTxMessage>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d104      	bne.n	80015d0 <MCAN_Transmit+0x44>
		{
			CB_Remove(mMcan.TxBuf);  // remove the message from the buffer only if transmission was succesfull
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <MCAN_Transmit+0x4c>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fd9e 	bl	800210c <CB_Remove>
		}
	}
}
 80015d0:	bf00      	nop
 80015d2:	372c      	adds	r7, #44	; 0x2c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000558 	.word	0x20000558

080015dc <MCAN_GetRxMessage>:

// Gets a message from receive buffer to be processed by application
// returns 1 if message is available, otherwise return 0
uint8_t MCAN_GetRxMessage( s_CanRxMsg* msg)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (0 == CB_Get(mMcan.Rx1Buf,(uint8_t*)msg))
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MCAN_GetRxMessage+0x28>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fdba 	bl	8002164 <CB_Get>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <MCAN_GetRxMessage+0x1e>
	{
		return 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <MCAN_GetRxMessage+0x20>
	}
	return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000558 	.word	0x20000558

08001608 <MCAN_SendFrame>:
}


// Sends general CAN data message
uint8_t MCAN_SendFrame(uint16_t cobid, uint8_t* data, uint8_t dlc)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b08f      	sub	sp, #60	; 0x3c
 800160c:	af04      	add	r7, sp, #16
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4613      	mov	r3, r2
 8001616:	717b      	strb	r3, [r7, #5]
	s_CanTxMsg msg;
	msg.header.DLC = dlc;
 8001618:	797b      	ldrb	r3, [r7, #5]
 800161a:	61bb      	str	r3, [r7, #24]
	msg.header.StdId = cobid;
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	60bb      	str	r3, [r7, #8]
	msg.header.ExtId = 0x00;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
	msg.header.RTR = CAN_RTR_DATA;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
	msg.header.IDE = CAN_ID_STD;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

	memcpy(&msg.data[0], data, dlc);
 800162c:	797a      	ldrb	r2, [r7, #5]
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	3318      	adds	r3, #24
 8001634:	6839      	ldr	r1, [r7, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f008 f94e 	bl	80098d8 <memcpy>
	return Send(msg);
 800163c:	466c      	mov	r4, sp
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164e:	f000 f805 	bl	800165c <Send>
 8001652:	4603      	mov	r3, r0
}
 8001654:	4618      	mov	r0, r3
 8001656:	372c      	adds	r7, #44	; 0x2c
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <Send>:

/*************** Private Fcns **************/

// CAN transmit
static uint8_t Send(s_CanTxMsg msg)
{
 800165c:	b084      	sub	sp, #16
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
 8001662:	f107 0c08 	add.w	ip, r7, #8
 8001666:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// instert to Tx buffer
	CB_Put(mMcan.TxBuf,(uint8_t*) &msg);
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <Send+0x2c>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f107 0108 	add.w	r1, r7, #8
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fdb3 	bl	80021de <CB_Put>
}
 8001678:	bf00      	nop
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001682:	b004      	add	sp, #16
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000558 	.word	0x20000558

0800168c <HAL_CAN_RxFifo0MsgPendingCallback>:


// interrupt handlers - callbacks
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
 {
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &tmp.header, tmp.data);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	331c      	adds	r3, #28
 800169a:	f107 020c 	add.w	r2, r7, #12
 800169e:	2100      	movs	r1, #0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f004 fba5 	bl	8005df0 <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx0Buf,(uint8_t*) &tmp);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f107 020c 	add.w	r2, r7, #12
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd8f 	bl	80021de <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 80016c0:	bf00      	nop
 80016c2:	3730      	adds	r7, #48	; 0x30
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000558 	.word	0x20000558

080016cc <HAL_CAN_RxFifo1MsgPendingCallback>:


void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	s_CanRxMsg tmp;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &tmp.header, tmp.data);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	331c      	adds	r3, #28
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	2101      	movs	r1, #1
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f004 fb85 	bl	8005df0 <HAL_CAN_GetRxMessage>
	if (mMcan.CanHw == hcan)
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d107      	bne.n	8001700 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CB_Put(mMcan.Rx1Buf,(uint8_t*) &tmp);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f107 020c 	add.w	r2, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fd6f 	bl	80021de <CB_Put>
		//UI_LED_B_SetMode(eUI_BLINK_ONCE);  // blue blink
	}

}
 8001700:	bf00      	nop
 8001702:	3730      	adds	r7, #48	; 0x30
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000558 	.word	0x20000558

0800170c <Set_Filter_Id_Mask>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
void Set_Filter_Id_Mask (CAN_HandleTypeDef *hcan, uint8_t fifo,  uint8_t bank, uint16_t id_1_from, uint16_t id_1_to, uint16_t id_2_from, uint16_t id_2_to)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	460b      	mov	r3, r1
 8001720:	70bb      	strb	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	803b      	strh	r3, [r7, #0]
	CAN_FilterTypeDef			 filterInitStructure;

	filterInitStructure.SlaveStartFilterBank  = 14;
 8001726:	230e      	movs	r3, #14
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c


	filterInitStructure.FilterBank									= bank;
 800172a:	78bb      	ldrb	r3, [r7, #2]
 800172c:	61fb      	str	r3, [r7, #28]


	filterInitStructure.FilterMode									=	CAN_FILTERMODE_IDMASK;
 800172e:	2300      	movs	r3, #0
 8001730:	623b      	str	r3, [r7, #32]
	filterInitStructure.FilterScale									=	CAN_FILTERSCALE_16BIT;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
	filterInitStructure.FilterFIFOAssignment				=	fifo;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	61bb      	str	r3, [r7, #24]

	filterInitStructure.FilterIdHigh								=	id_2_from << 5;
 800173a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	60bb      	str	r3, [r7, #8]
	filterInitStructure.FilterIdLow 								=	id_1_from << 5;
 8001740:	883b      	ldrh	r3, [r7, #0]
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	60fb      	str	r3, [r7, #12]
	filterInitStructure.FilterMaskIdHigh						= Filter_Calc_Mask_Code(id_2_from,id_2_to);
 8001746:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800174a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f816 	bl	8001780 <Filter_Calc_Mask_Code>
 8001754:	4603      	mov	r3, r0
 8001756:	613b      	str	r3, [r7, #16]
	filterInitStructure.FilterMaskIdLow 						= Filter_Calc_Mask_Code(id_1_from,id_1_to);
 8001758:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f80e 	bl	8001780 <Filter_Calc_Mask_Code>
 8001764:	4603      	mov	r3, r0
 8001766:	617b      	str	r3, [r7, #20]

	filterInitStructure.FilterActivation						=	ENABLE;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_CAN_ConfigFilter(hcan,&filterInitStructure);
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	4619      	mov	r1, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f004 f953 	bl	8005a1e <HAL_CAN_ConfigFilter>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <Filter_Calc_Mask_Code>:
  Input		 		: -
  Output	  	: -
  Description : -
************************************************************************/
uint16_t Filter_Calc_Mask_Code (uint16_t from,uint16_t to)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	4613      	mov	r3, r2
 800178e:	80bb      	strh	r3, [r7, #4]
	uint16_t	help			 	= 0x00;
 8001790:	2300      	movs	r3, #0
 8001792:	81fb      	strh	r3, [r7, #14]
	uint8_t		shift_cnt		= 0x00;
 8001794:	2300      	movs	r3, #0
 8001796:	737b      	strb	r3, [r7, #13]
	uint8_t			first			= FALSE;
 8001798:	2300      	movs	r3, #0
 800179a:	733b      	strb	r3, [r7, #12]

	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 800179c:	2300      	movs	r3, #0
 800179e:	737b      	strb	r3, [r7, #13]
 80017a0:	e022      	b.n	80017e8 <Filter_Calc_Mask_Code+0x68>
	{
		if(((from & 0x8000) == (to & 0x8000)) && (!first))
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	4053      	eors	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db09      	blt.n	80017c4 <Filter_Calc_Mask_Code+0x44>
 80017b0:	7b3b      	ldrb	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <Filter_Calc_Mask_Code+0x44>
		{
			from = from << 1;
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	e00e      	b.n	80017e2 <Filter_Calc_Mask_Code+0x62>
		}
		else
		{
			help = help << 1;
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	81fb      	strh	r3, [r7, #14]
			first = TRUE;
 80017ca:	2301      	movs	r3, #1
 80017cc:	733b      	strb	r3, [r7, #12]
			help |= 0x01;
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	81fb      	strh	r3, [r7, #14]

			from = from << 1;
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	80fb      	strh	r3, [r7, #6]
			to = to << 1;
 80017dc:	88bb      	ldrh	r3, [r7, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	80bb      	strh	r3, [r7, #4]
	for (shift_cnt = 0; shift_cnt < 16; shift_cnt++)
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	3301      	adds	r3, #1
 80017e6:	737b      	strb	r3, [r7, #13]
 80017e8:	7b7b      	ldrb	r3, [r7, #13]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d9d9      	bls.n	80017a2 <Filter_Calc_Mask_Code+0x22>
		}
	}
	help = (~help) << 5;
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	81fb      	strh	r3, [r7, #14]
	return help;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <RTC_GetTime>:

/* USER CODE END 0 */


sDateTime RTC_GetTime()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  sDateTime dt;
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <RTC_GetTime+0x6c>)
 800181a:	f006 fe3f 	bl	800849c <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	2200      	movs	r2, #0
 8001824:	4619      	mov	r1, r3
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <RTC_GetTime+0x6c>)
 8001828:	f006 ff1b 	bl	8008662 <HAL_RTC_GetDate>

  dt.Year = 2000 + sdatestructureget.Year;
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	b29b      	uxth	r3, r3
 8001830:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001834:	b29b      	uxth	r3, r3
 8001836:	84fb      	strh	r3, [r7, #38]	; 0x26
  dt.Month = sdatestructureget.Month;
 8001838:	7f7b      	ldrb	r3, [r7, #29]
 800183a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dt.Day = sdatestructureget.Date;
 800183e:	7fbb      	ldrb	r3, [r7, #30]
 8001840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  dt.Hour = stimestructureget.Hours;
 8001844:	7a3b      	ldrb	r3, [r7, #8]
 8001846:	f887 3020 	strb.w	r3, [r7, #32]
  dt.Minute = stimestructureget.Minutes;
 800184a:	7a7b      	ldrb	r3, [r7, #9]
 800184c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  dt.Second = stimestructureget.Seconds;
 8001850:	7abb      	ldrb	r3, [r7, #10]
 8001852:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dt.WeekDay = sdatestructureget.WeekDay;
 8001856:	7f3b      	ldrb	r3, [r7, #28]
 8001858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  return dt;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	cb03      	ldmia	r3!, {r0, r1}
 8001866:	6010      	str	r0, [r2, #0]
 8001868:	6051      	str	r1, [r2, #4]
}
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000c5c 	.word	0x20000c5c

08001878 <RTC_SetTime>:

void RTC_SetTime(sDateTime dt)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	463b      	mov	r3, r7
 8001880:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Configure RTC Calendar */
   RTC_DateTypeDef sdatestructure;
   RTC_TimeTypeDef stimestructure;

   /*##-1- Configure the Date #################################################*/
   sdatestructure.Year = dt.Year - 2000;
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	3330      	adds	r3, #48	; 0x30
 800188a:	b2db      	uxtb	r3, r3
 800188c:	77fb      	strb	r3, [r7, #31]
   sdatestructure.Month = dt.Month;
 800188e:	793b      	ldrb	r3, [r7, #4]
 8001890:	777b      	strb	r3, [r7, #29]
   sdatestructure.Date = dt.Day;
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	77bb      	strb	r3, [r7, #30]
   sdatestructure.WeekDay = dt.WeekDay;
 8001896:	797b      	ldrb	r3, [r7, #5]
 8001898:	773b      	strb	r3, [r7, #28]

   if(HAL_RTC_SetDate(&hrtc,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <RTC_SetTime+0x6c>)
 80018a4:	f006 fe56 	bl	8008554 <HAL_RTC_SetDate>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-2- Configure the Time #################################################*/
   stimestructure.Hours = dt.Hour;
 80018a8:	783b      	ldrb	r3, [r7, #0]
 80018aa:	723b      	strb	r3, [r7, #8]
   stimestructure.Minutes = dt.Minute;
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	727b      	strb	r3, [r7, #9]
   stimestructure.Seconds = dt.Second;
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	72bb      	strb	r3, [r7, #10]
   stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 80018b4:	2300      	movs	r3, #0
 80018b6:	72fb      	strb	r3, [r7, #11]
   stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
   stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]

   if(HAL_RTC_SetTime(&hrtc,&stimestructure,RTC_FORMAT_BIN) != HAL_OK)
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <RTC_SetTime+0x6c>)
 80018ca:	f006 fd4a 	bl	8008362 <HAL_RTC_SetTime>
     /* Initialization Error */
   //  Error_Handler();
   }

   /*##-3- Writes a data in a RTC Backup data Register1 #######################*/
   HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80018ce:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80018d2:	2101      	movs	r1, #1
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <RTC_SetTime+0x6c>)
 80018d6:	f006 ffe3 	bl	80088a0 <HAL_RTCEx_BKUPWrite>
	
	// LOG_InsertGeneralMessage("Real Time Clock changed !");
 }
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000c5c 	.word	0x20000c5c

080018e8 <RTC_SetUnixTime>:

 
 void RTC_SetUnixTime(uint32_t unixtime)
 {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	 struct tm * tm_now;
	 time_t unixnow = unixtime;
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	2000      	movs	r0, #0
 80018f4:	460a      	mov	r2, r1
 80018f6:	4603      	mov	r3, r0
 80018f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 tm_now = localtime(&unixnow);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fec7 	bl	8009694 <localtime>
 8001906:	61f8      	str	r0, [r7, #28]
	 sDateTime time;
	 time.Second = tm_now->tm_sec;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	72bb      	strb	r3, [r7, #10]
	 time.Minute = tm_now->tm_min;
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	727b      	strb	r3, [r7, #9]
	 time.Hour = tm_now->tm_hour;    
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	723b      	strb	r3, [r7, #8]
	 time.Day = tm_now->tm_mday;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	72fb      	strb	r3, [r7, #11]
	 time.Month = tm_now->tm_mon +1;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	733b      	strb	r3, [r7, #12]
	 time.Year = tm_now->tm_year + 1900;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	b29b      	uxth	r3, r3
 800193a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800193e:	b29b      	uxth	r3, r3
 8001940:	81fb      	strh	r3, [r7, #14]
	 RTC_SetTime(time);
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	e893 0003 	ldmia.w	r3, {r0, r1}
 800194a:	f7ff ff95 	bl	8001878 <RTC_SetTime>
 }
 800194e:	bf00      	nop
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <UI_Init>:
void UI_Struct_Initialisation (sUI init_struct, sUI *target);



void UI_Init (sUIHwInit* hw)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af02      	add	r7, sp, #8
 800195e:	6078      	str	r0, [r7, #4]
	sUI init_struct;
	
	init_struct.Status			= eUI_OFF;
 8001960:	2300      	movs	r3, #0
 8001962:	72bb      	strb	r3, [r7, #10]
	init_struct.Led_Cnt			= 0x00;
 8001964:	2300      	movs	r3, #0
 8001966:	813b      	strh	r3, [r7, #8]
	
	init_struct.Pin					= hw->Led_Life.Pin;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_Life.Port;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_Life.Logic;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7a1b      	ldrb	r3, [r3, #8]
 8001978:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_Life);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <UI_Init+0x58>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001984:	f000 f818 	bl	80019b8 <UI_Struct_Initialisation>
	
	init_struct.Pin					= hw->Led_R.Pin;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	613b      	str	r3, [r7, #16]
	init_struct.Port				= hw->Led_R.Port;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	60fb      	str	r3, [r7, #12]
	init_struct.Logic				= hw->Led_R.Logic;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7d1b      	ldrb	r3, [r3, #20]
 8001998:	753b      	strb	r3, [r7, #20]
	UI_Struct_Initialisation (init_struct, &LED_R);
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <UI_Init+0x5c>)
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f107 0308 	add.w	r3, r7, #8
 80019a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a4:	f000 f808 	bl	80019b8 <UI_Struct_Initialisation>
	init_struct.Pin					= hw->Buzzer.Pin;
	init_struct.Port				= hw->Buzzer.Port;
	init_struct.Logic				= hw->Buzzer.Logic;
  UI_Struct_Initialisation (init_struct, &Buzzer);
#endif
}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200005d4 	.word	0x200005d4
 80019b4:	200005e4 	.word	0x200005e4

080019b8 <UI_Struct_Initialisation>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
void UI_Struct_Initialisation (sUI init_struct, sUI *target)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	463c      	mov	r4, r7
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	*target = init_struct;
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	461c      	mov	r4, r3
 80019c8:	463b      	mov	r3, r7
 80019ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UI_Control(target,0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	6a38      	ldr	r0, [r7, #32]
 80019d4:	f000 f844 	bl	8001a60 <UI_Control>
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <UI_Update_10ms>:


// periodicaly scheduled updtae function
void UI_Update_10ms()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	UI_Control(&LED_Life, 	0x00);
 80019e4:	2100      	movs	r1, #0
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <UI_Update_10ms+0x18>)
 80019e8:	f000 f83a 	bl	8001a60 <UI_Control>
	UI_Control(&LED_R, 	0x00);
 80019ec:	2100      	movs	r1, #0
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <UI_Update_10ms+0x1c>)
 80019f0:	f000 f836 	bl	8001a60 <UI_Control>
#ifndef LIMITED_UI
	UI_Control(&LED_G, 	0x00);
	UI_Control(&LED_B, 	0x00);
	UI_Control(&Buzzer, 	0x00);
#endif
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200005d4 	.word	0x200005d4
 80019fc:	200005e4 	.word	0x200005e4

08001a00 <UI_LED_R_SetMode>:


void UI_LED_R_SetMode(eUI_Status status)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	if (LED_R.Status != status)
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <UI_LED_R_SetMode+0x2c>)
 8001a0c:	789b      	ldrb	r3, [r3, #2]
 8001a0e:	79fa      	ldrb	r2, [r7, #7]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d005      	beq.n	8001a20 <UI_LED_R_SetMode+0x20>
	{
		LED_R.Status = status;
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <UI_LED_R_SetMode+0x2c>)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	7093      	strb	r3, [r2, #2]
		LED_R.Led_Cnt = 0;
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <UI_LED_R_SetMode+0x2c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
	}
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200005e4 	.word	0x200005e4

08001a30 <UI_LED_Life_SetMode>:
		LED_B.Led_Cnt = 0;
	}
}

void UI_LED_Life_SetMode(eUI_Status status)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	if (LED_Life.Status != status)
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <UI_LED_Life_SetMode+0x2c>)
 8001a3c:	789b      	ldrb	r3, [r3, #2]
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d005      	beq.n	8001a50 <UI_LED_Life_SetMode+0x20>
	{
		LED_Life.Status = status;
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <UI_LED_Life_SetMode+0x2c>)
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	7093      	strb	r3, [r2, #2]
		LED_Life.Led_Cnt = 0;
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <UI_LED_Life_SetMode+0x2c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
	}
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	200005d4 	.word	0x200005d4

08001a60 <UI_Control>:
  * @brief  Controlling states of LED 
  * @param  led: Pointer to specific LED
  * @param  led_switch: If isn't this parameter null, the function inverts status of specific LED, but LED has to be in TOGGLE mode!
  */
static void UI_Control (sUI *led,uint8_t led_switch)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]

	switch(led->Status)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	f200 823f 	bhi.w	8001ef4 <UI_Control+0x494>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <UI_Control+0x1c>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001aa1 	.word	0x08001aa1
 8001a80:	08001ad1 	.word	0x08001ad1
 8001a84:	08001b01 	.word	0x08001b01
 8001a88:	08001b79 	.word	0x08001b79
 8001a8c:	08001bf1 	.word	0x08001bf1
 8001a90:	08001c65 	.word	0x08001c65
 8001a94:	08001cdb 	.word	0x08001cdb
 8001a98:	08001d6f 	.word	0x08001d6f
 8001a9c:	08001d53 	.word	0x08001d53
	{
		case eUI_OFF:
			if(led->Logic == eUIL_NEGATIVE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <UI_Control+0x5c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6858      	ldr	r0, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f005 f9d3 	bl	8006e60 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
			}
			break;
 8001aba:	e226      	b.n	8001f0a <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6858      	ldr	r0, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f005 f9c9 	bl	8006e60 <HAL_GPIO_WritePin>
			break;
 8001ace:	e21c      	b.n	8001f0a <UI_Control+0x4aa>
		case eUI_ON:
			if(led->Logic == eUIL_NEGATIVE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7b1b      	ldrb	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <UI_Control+0x8c>
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6858      	ldr	r0, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f005 f9bb 	bl	8006e60 <HAL_GPIO_WritePin>
			}
			else
			{
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
			}			
			break;
 8001aea:	e20e      	b.n	8001f0a <UI_Control+0x4aa>
				HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6858      	ldr	r0, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	4619      	mov	r1, r3
 8001afa:	f005 f9b1 	bl	8006e60 <HAL_GPIO_WritePin>
			break;
 8001afe:	e204      	b.n	8001f0a <UI_Control+0x4aa>
		case eUI_BLINKING_SLOW:
			if(led->Led_Cnt <= 50)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2b32      	cmp	r3, #50	; 0x32
 8001b06:	d817      	bhi.n	8001b38 <UI_Control+0xd8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7b1b      	ldrb	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <UI_Control+0xc4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6858      	ldr	r0, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f005 f99f 	bl	8006e60 <HAL_GPIO_WritePin>
 8001b22:	e020      	b.n	8001b66 <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6858      	ldr	r0, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	f005 f995 	bl	8006e60 <HAL_GPIO_WritePin>
 8001b36:	e016      	b.n	8001b66 <UI_Control+0x106>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7b1b      	ldrb	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <UI_Control+0xf4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6858      	ldr	r0, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f005 f987 	bl	8006e60 <HAL_GPIO_WritePin>
 8001b52:	e008      	b.n	8001b66 <UI_Control+0x106>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6858      	ldr	r0, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	f005 f97d 	bl	8006e60 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 100)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	2b63      	cmp	r3, #99	; 0x63
 8001b6c:	f240 81c4 	bls.w	8001ef8 <UI_Control+0x498>
			{
				led->Led_Cnt = 0;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	801a      	strh	r2, [r3, #0]
			}
			break;
 8001b76:	e1bf      	b.n	8001ef8 <UI_Control+0x498>
		case eUI_BLINKING_FAST:
			if(led->Led_Cnt <= 10 )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d817      	bhi.n	8001bb0 <UI_Control+0x150>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7b1b      	ldrb	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <UI_Control+0x13c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6858      	ldr	r0, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	f005 f963 	bl	8006e60 <HAL_GPIO_WritePin>
 8001b9a:	e020      	b.n	8001bde <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6858      	ldr	r0, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f005 f959 	bl	8006e60 <HAL_GPIO_WritePin>
 8001bae:	e016      	b.n	8001bde <UI_Control+0x17e>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b1b      	ldrb	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <UI_Control+0x16c>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6858      	ldr	r0, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f005 f94b 	bl	8006e60 <HAL_GPIO_WritePin>
 8001bca:	e008      	b.n	8001bde <UI_Control+0x17e>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f005 f941 	bl	8006e60 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 20)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	2b13      	cmp	r3, #19
 8001be4:	f240 818a 	bls.w	8001efc <UI_Control+0x49c>
			{
				led->Led_Cnt = 0;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8001bee:	e185      	b.n	8001efc <UI_Control+0x49c>
		case eUI_BLINK_ONCE:
			if(led->Led_Cnt <= 2)  // blink for 20ms
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d817      	bhi.n	8001c28 <UI_Control+0x1c8>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b1b      	ldrb	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <UI_Control+0x1b4>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6858      	ldr	r0, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f005 f927 	bl	8006e60 <HAL_GPIO_WritePin>
				}
				
				led->Status = eUI_OFF;   // go to permanent off state
				led->Led_Cnt = 0;
			}		
			break;
 8001c12:	e17a      	b.n	8001f0a <UI_Control+0x4aa>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6858      	ldr	r0, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4619      	mov	r1, r3
 8001c22:	f005 f91d 	bl	8006e60 <HAL_GPIO_WritePin>
			break;
 8001c26:	e170      	b.n	8001f0a <UI_Control+0x4aa>
				if(led->Logic == eUIL_NEGATIVE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b1b      	ldrb	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <UI_Control+0x1e4>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6858      	ldr	r0, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f005 f90f 	bl	8006e60 <HAL_GPIO_WritePin>
 8001c42:	e008      	b.n	8001c56 <UI_Control+0x1f6>
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6858      	ldr	r0, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	f005 f905 	bl	8006e60 <HAL_GPIO_WritePin>
				led->Status = eUI_OFF;   // go to permanent off state
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	709a      	strb	r2, [r3, #2]
				led->Led_Cnt = 0;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	801a      	strh	r2, [r3, #0]
			break;
 8001c62:	e152      	b.n	8001f0a <UI_Control+0x4aa>
		 case eUI_BEEP_ONCE:
					if(led->Led_Cnt <= 300)  // beep for 3 sec
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c6c:	d817      	bhi.n	8001c9e <UI_Control+0x23e>
					{
						if(led->Logic == eUIL_NEGATIVE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	7b1b      	ldrb	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <UI_Control+0x22a>
						{
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6858      	ldr	r0, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	f005 f8ec 	bl	8006e60 <HAL_GPIO_WritePin>
						}

						led->Status = eUI_OFF;   // go to permanent off state
						led->Led_Cnt = 0;
					}
					break;
 8001c88:	e13f      	b.n	8001f0a <UI_Control+0x4aa>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6858      	ldr	r0, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2201      	movs	r2, #1
 8001c96:	4619      	mov	r1, r3
 8001c98:	f005 f8e2 	bl	8006e60 <HAL_GPIO_WritePin>
					break;
 8001c9c:	e135      	b.n	8001f0a <UI_Control+0x4aa>
						if(led->Logic == eUIL_NEGATIVE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b1b      	ldrb	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <UI_Control+0x25a>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6858      	ldr	r0, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f005 f8d4 	bl	8006e60 <HAL_GPIO_WritePin>
 8001cb8:	e008      	b.n	8001ccc <UI_Control+0x26c>
							HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6858      	ldr	r0, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f005 f8ca 	bl	8006e60 <HAL_GPIO_WritePin>
						led->Status = eUI_OFF;   // go to permanent off state
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	709a      	strb	r2, [r3, #2]
						led->Led_Cnt = 0;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	801a      	strh	r2, [r3, #0]
					break;
 8001cd8:	e117      	b.n	8001f0a <UI_Control+0x4aa>
		case eUI_FLASH:
			if(led->Led_Cnt < 2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d817      	bhi.n	8001d12 <UI_Control+0x2b2>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b1b      	ldrb	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <UI_Control+0x29e>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6858      	ldr	r0, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f005 f8b2 	bl	8006e60 <HAL_GPIO_WritePin>
 8001cfc:	e020      	b.n	8001d40 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6858      	ldr	r0, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f005 f8a8 	bl	8006e60 <HAL_GPIO_WritePin>
 8001d10:	e016      	b.n	8001d40 <UI_Control+0x2e0>
				}	
			}
			else
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b1b      	ldrb	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <UI_Control+0x2ce>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6858      	ldr	r0, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2201      	movs	r2, #1
 8001d26:	4619      	mov	r1, r3
 8001d28:	f005 f89a 	bl	8006e60 <HAL_GPIO_WritePin>
 8001d2c:	e008      	b.n	8001d40 <UI_Control+0x2e0>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6858      	ldr	r0, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f005 f890 	bl	8006e60 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2bc7      	cmp	r3, #199	; 0xc7
 8001d46:	f240 80db 	bls.w	8001f00 <UI_Control+0x4a0>
			{
				led->Led_Cnt = 0;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
			}			
			break;
 8001d50:	e0d6      	b.n	8001f00 <UI_Control+0x4a0>
		case eUI_TOGGLE:
			if(led_switch)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80d5 	beq.w	8001f04 <UI_Control+0x4a4>
			{
				HAL_GPIO_TogglePin(led->Port,led->Pin);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f005 f892 	bl	8006e90 <HAL_GPIO_TogglePin>
			}
			break;
 8001d6c:	e0ca      	b.n	8001f04 <UI_Control+0x4a4>
		case eUI_COMBI_1:
			if(led->Led_Cnt < 10)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d817      	bhi.n	8001da6 <UI_Control+0x346>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b1b      	ldrb	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <UI_Control+0x332>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6858      	ldr	r0, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f005 f868 	bl	8006e60 <HAL_GPIO_WritePin>
 8001d90:	e0a8      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6858      	ldr	r0, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f005 f85e 	bl	8006e60 <HAL_GPIO_WritePin>
 8001da4:	e09e      	b.n	8001ee4 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 10)&&(led->Led_Cnt < 50))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2b09      	cmp	r3, #9
 8001dac:	d91b      	bls.n	8001de6 <UI_Control+0x386>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b31      	cmp	r3, #49	; 0x31
 8001db4:	d817      	bhi.n	8001de6 <UI_Control+0x386>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <UI_Control+0x372>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6858      	ldr	r0, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f005 f848 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001dd0:	e088      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6858      	ldr	r0, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	f005 f83e 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001de4:	e07e      	b.n	8001ee4 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 50)&&(led->Led_Cnt < 60))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	2b31      	cmp	r3, #49	; 0x31
 8001dec:	d91b      	bls.n	8001e26 <UI_Control+0x3c6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2b3b      	cmp	r3, #59	; 0x3b
 8001df4:	d817      	bhi.n	8001e26 <UI_Control+0x3c6>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7b1b      	ldrb	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <UI_Control+0x3b2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6858      	ldr	r0, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f005 f828 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e10:	e068      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6858      	ldr	r0, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f005 f81e 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e24:	e05e      	b.n	8001ee4 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 60)&&(led->Led_Cnt < 100))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001e2c:	d91b      	bls.n	8001e66 <UI_Control+0x406>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b63      	cmp	r3, #99	; 0x63
 8001e34:	d817      	bhi.n	8001e66 <UI_Control+0x406>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b1b      	ldrb	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <UI_Control+0x3f2>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6858      	ldr	r0, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f005 f808 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e50:	e048      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6858      	ldr	r0, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f004 fffe 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e64:	e03e      	b.n	8001ee4 <UI_Control+0x484>
				}
			}
			else if((led->Led_Cnt >= 100)&&(led->Led_Cnt < 150))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b63      	cmp	r3, #99	; 0x63
 8001e6c:	d91b      	bls.n	8001ea6 <UI_Control+0x446>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	2b95      	cmp	r3, #149	; 0x95
 8001e74:	d817      	bhi.n	8001ea6 <UI_Control+0x446>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7b1b      	ldrb	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <UI_Control+0x432>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6858      	ldr	r0, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f004 ffe8 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001e90:	e028      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6858      	ldr	r0, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f004 ffde 	bl	8006e60 <HAL_GPIO_WritePin>
				if(led->Logic == eUIL_NEGATIVE)
 8001ea4:	e01e      	b.n	8001ee4 <UI_Control+0x484>
				}	
			}
			else if((led->Led_Cnt >= 150)&&(led->Led_Cnt < 200))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	2b95      	cmp	r3, #149	; 0x95
 8001eac:	d91a      	bls.n	8001ee4 <UI_Control+0x484>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	2bc7      	cmp	r3, #199	; 0xc7
 8001eb4:	d816      	bhi.n	8001ee4 <UI_Control+0x484>
			{
				if(led->Logic == eUIL_NEGATIVE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7b1b      	ldrb	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <UI_Control+0x472>
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_SET);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6858      	ldr	r0, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f004 ffc8 	bl	8006e60 <HAL_GPIO_WritePin>
 8001ed0:	e008      	b.n	8001ee4 <UI_Control+0x484>
				}
				else
				{
					HAL_GPIO_WritePin(led->Port,led->Pin,GPIO_PIN_RESET);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6858      	ldr	r0, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f004 ffbe 	bl	8006e60 <HAL_GPIO_WritePin>
				}
			}

			if(led->Led_Cnt >= 200)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2bc7      	cmp	r3, #199	; 0xc7
 8001eea:	d90d      	bls.n	8001f08 <UI_Control+0x4a8>
			{
				led->Led_Cnt = 0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
			}			
			
			break;
 8001ef2:	e009      	b.n	8001f08 <UI_Control+0x4a8>
		default:
			break;
 8001ef4:	bf00      	nop
 8001ef6:	e008      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001ef8:	bf00      	nop
 8001efa:	e006      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001efc:	bf00      	nop
 8001efe:	e004      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001f00:	bf00      	nop
 8001f02:	e002      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001f04:	bf00      	nop
 8001f06:	e000      	b.n	8001f0a <UI_Control+0x4aa>
			break;
 8001f08:	bf00      	nop
	}
	
	if(led->Led_Cnt < 0xFFFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d005      	beq.n	8001f22 <UI_Control+0x4c2>
	{
		led->Led_Cnt++;		
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	801a      	strh	r2, [r3, #0]
	}	
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop

08001f2c <VAR_Init>:

int16_t mDummyVar = 0x8000;


void VAR_Init(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	e013      	b.n	8001f60 <VAR_Init+0x34>
	{
		Vars[i].valid = 0;
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <VAR_Init+0x48>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		Vars[i].local = 0;
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <VAR_Init+0x48>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
		Vars[i].value = 0;
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <VAR_Init+0x48>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	2200      	movs	r2, #0
 8001f58:	805a      	strh	r2, [r3, #2]
	for(i = 0; i < NUM_OF_VARIABLES; i++)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2bfe      	cmp	r3, #254	; 0xfe
 8001f64:	dde8      	ble.n	8001f38 <VAR_Init+0xc>
	}
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	200005f4 	.word	0x200005f4

08001f78 <VAR_GetVariable>:

int16_t VAR_GetVariable(uint16_t varId, uint16_t* invalid)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	80fb      	strh	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2bfe      	cmp	r3, #254	; 0xfe
 8001f88:	d816      	bhi.n	8001fb8 <VAR_GetVariable+0x40>
	{
		if(Vars[varId].valid == 0)
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <VAR_GetVariable+0x64>)
 8001f8e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <VAR_GetVariable+0x32>
		{
			if (invalid != NULL) *invalid |= INVALID_FLAG;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <VAR_GetVariable+0x32>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	801a      	strh	r2, [r3, #0]
		}
		return Vars[varId].value;
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <VAR_GetVariable+0x64>)
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fb6:	e00a      	b.n	8001fce <VAR_GetVariable+0x56>
	}
	else
	{
		if (invalid != NULL) *invalid |= INVALID_FLAG;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d006      	beq.n	8001fcc <VAR_GetVariable+0x54>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	801a      	strh	r2, [r3, #0]
		return 0;
 8001fcc:	2300      	movs	r3, #0
	}
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200005f4 	.word	0x200005f4

08001fe0 <VAR_SetVariable>:
		return &(Vars[varId].value);
	}
}

void VAR_SetVariable(uint8_t varId, int16_t value, uint8_t valid)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	460b      	mov	r3, r1
 8001fec:	80bb      	strh	r3, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71bb      	strb	r3, [r7, #6]
	if (varId < NUM_OF_VARIABLES)
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2bff      	cmp	r3, #255	; 0xff
 8001ff6:	d00a      	beq.n	800200e <VAR_SetVariable+0x2e>
	{
		Vars[varId].valid = valid;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <VAR_SetVariable+0x3c>)
 8001ffc:	79ba      	ldrb	r2, [r7, #6]
 8001ffe:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
		Vars[varId].value = value;
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <VAR_SetVariable+0x3c>)
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	805a      	strh	r2, [r3, #2]
	}
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200005f4 	.word	0x200005f4

08002020 <CB_Create>:
 // s_CanTxMsg Msg;

	

CB_handle CB_Create(uint8_t elementsize, uint16_t length)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	80bb      	strh	r3, [r7, #4]
	CB_handle cb = malloc(sizeof(s_CB)); 
 8002030:	2010      	movs	r0, #16
 8002032:	f007 fc41 	bl	80098b8 <malloc>
 8002036:	4603      	mov	r3, r0
 8002038:	60fb      	str	r3, [r7, #12]
	cb->buff = malloc (length * elementsize);  // TBD : check pointer
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f007 fc38 	bl	80098b8 <malloc>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]
	cb->length = length;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	88ba      	ldrh	r2, [r7, #4]
 8002054:	80da      	strh	r2, [r3, #6]
	cb->head = 0;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	811a      	strh	r2, [r3, #8]
	cb->tail = 0;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	815a      	strh	r2, [r3, #10]
	cb->full = 0;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	731a      	strb	r2, [r3, #12]
	cb->sizeOfElement = elementsize;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	79fa      	ldrb	r2, [r7, #7]
 800206c:	711a      	strb	r2, [r3, #4]
	
	
	return cb;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <CB_IsEmpty>:
	return noi;
	
}

uint8_t CB_IsEmpty(CB_handle cb)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <CB_IsEmpty+0x2c>
	{
		return (!cb->full && (cb->head == cb->tail));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7b1b      	ldrb	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d107      	bne.n	800209e <CB_IsEmpty+0x26>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	891a      	ldrh	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	895b      	ldrh	r3, [r3, #10]
 8002096:	429a      	cmp	r2, r3
 8002098:	d101      	bne.n	800209e <CB_IsEmpty+0x26>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <CB_IsEmpty+0x28>
 800209e:	2300      	movs	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e000      	b.n	80020a6 <CB_IsEmpty+0x2e>
	}
	return 1; 
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <CB_Probe>:

// Gets the item from the buffer, but do not remove it from the buffer
// To remove the intem, call CB_Probe() + CB_Remove(), or use CB_Get() to get and remove in one step 

uint8_t CB_Probe(CB_handle cb, uint8_t * item)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01f      	beq.n	8002102 <CB_Probe+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c2:	b672      	cpsid	i
}
 80020c4:	bf00      	nop
	{

		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffd6 	bl	8002078 <CB_IsEmpty>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d113      	bne.n	80020fa <CB_Probe+0x48>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	8952      	ldrh	r2, [r2, #10]
 80020da:	4611      	mov	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	7912      	ldrb	r2, [r2, #4]
 80020e0:	fb01 f202 	mul.w	r2, r1, r2
 80020e4:	1899      	adds	r1, r3, r2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	461a      	mov	r2, r3
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	f007 fbf3 	bl	80098d8 <memcpy>
  __ASM volatile ("cpsie i" : : : "memory");
 80020f2:	b662      	cpsie	i
}
 80020f4:	bf00      	nop
				//cb->tail = (cb->tail + 1) % cb->length;
				//cb->full = 0;
				__enable_irq();
				return 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e004      	b.n	8002104 <CB_Probe+0x52>
  __ASM volatile ("cpsie i" : : : "memory");
 80020fa:	b662      	cpsie	i
}
 80020fc:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <CB_Probe+0x52>
			}
		}

	// TBD assert
	return 1;
 8002102:	2301      	movs	r3, #1

}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <CB_Remove>:


// Removes the item from the buffer, use together with CB_Probe()
uint8_t CB_Remove(CB_handle cb)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	if (cb!= NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01f      	beq.n	800215a <CB_Remove+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 800211a:	b672      	cpsid	i
}
 800211c:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffaa 	bl	8002078 <CB_IsEmpty>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d113      	bne.n	8002152 <CB_Remove+0x46>
			{
				cb->tail = (cb->tail + 1) % cb->length;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	895b      	ldrh	r3, [r3, #10]
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	88d2      	ldrh	r2, [r2, #6]
 8002134:	fb93 f1f2 	sdiv	r1, r3, r2
 8002138:	fb01 f202 	mul.w	r2, r1, r2
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800214a:	b662      	cpsie	i
}
 800214c:	bf00      	nop
				__enable_irq();
				return 0;
 800214e:	2300      	movs	r3, #0
 8002150:	e004      	b.n	800215c <CB_Remove+0x50>
  __ASM volatile ("cpsie i" : : : "memory");
 8002152:	b662      	cpsie	i
}
 8002154:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <CB_Remove+0x50>
			}
		}

	// TBD assert
	return 1;
 800215a:	2301      	movs	r3, #1

}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <CB_Get>:


uint8_t CB_Get(CB_handle cb, uint8_t * item)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	if (cb!= NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d02f      	beq.n	80021d4 <CB_Get+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
}
 8002176:	bf00      	nop
	{
		
		__disable_irq();
			if(!CB_IsEmpty(cb))
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff7d 	bl	8002078 <CB_IsEmpty>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d123      	bne.n	80021cc <CB_Get+0x68>
			{
				
				memcpy(item, &cb->buff[cb->tail * cb->sizeOfElement], cb->sizeOfElement);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	8952      	ldrh	r2, [r2, #10]
 800218c:	4611      	mov	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	7912      	ldrb	r2, [r2, #4]
 8002192:	fb01 f202 	mul.w	r2, r1, r2
 8002196:	1899      	adds	r1, r3, r2
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	461a      	mov	r2, r3
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f007 fb9a 	bl	80098d8 <memcpy>
				cb->tail = (cb->tail + 1) % cb->length;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	895b      	ldrh	r3, [r3, #10]
 80021a8:	3301      	adds	r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	88d2      	ldrh	r2, [r2, #6]
 80021ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80021b2:	fb01 f202 	mul.w	r2, r1, r2
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	815a      	strh	r2, [r3, #10]
				cb->full = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	731a      	strb	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c4:	b662      	cpsie	i
}
 80021c6:	bf00      	nop
				__enable_irq();
				return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e004      	b.n	80021d6 <CB_Get+0x72>
  __ASM volatile ("cpsie i" : : : "memory");
 80021cc:	b662      	cpsie	i
}
 80021ce:	bf00      	nop

			}
			else  // empty buffer
			{
				__enable_irq();
				return 1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <CB_Get+0x72>
			}
		}

	// TBD assert
	return 1;
 80021d4:	2301      	movs	r3, #1

}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <CB_Put>:


uint8_t CB_Put(CB_handle cb, uint8_t* item)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
	
	if (cb != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d03b      	beq.n	8002266 <CB_Put+0x88>
	{	
		memcpy(&cb->buff[cb->head * cb->sizeOfElement],item, cb->sizeOfElement);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	8912      	ldrh	r2, [r2, #8]
 80021f6:	4611      	mov	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	7912      	ldrb	r2, [r2, #4]
 80021fc:	fb01 f202 	mul.w	r2, r1, r2
 8002200:	1898      	adds	r0, r3, r2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	791b      	ldrb	r3, [r3, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	f007 fb65 	bl	80098d8 <memcpy>
		if(cb->full)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7b1b      	ldrb	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00c      	beq.n	8002230 <CB_Put+0x52>
		{
			cb->tail = (cb->tail + 1) % cb->length;		
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	895b      	ldrh	r3, [r3, #10]
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	88d2      	ldrh	r2, [r2, #6]
 8002220:	fb93 f1f2 	sdiv	r1, r3, r2
 8002224:	fb01 f202 	mul.w	r2, r1, r2
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	b29a      	uxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	815a      	strh	r2, [r3, #10]
		}
		cb->head = (cb->head + 1) % cb->length;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	891b      	ldrh	r3, [r3, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	88d2      	ldrh	r2, [r2, #6]
 800223a:	fb93 f1f2 	sdiv	r1, r3, r2
 800223e:	fb01 f202 	mul.w	r2, r1, r2
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	811a      	strh	r2, [r3, #8]
		cb->full = (cb->head == cb->tail? 1 : 0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	891a      	ldrh	r2, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	895b      	ldrh	r3, [r3, #10]
 8002252:	429a      	cmp	r2, r3
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	731a      	strb	r2, [r3, #12]

		return 0;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <CB_Put+0x8a>
	}
	else
	{
		return 1;
 8002266:	2301      	movs	r3, #1
	}
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <WDG_Init>:
#include "main.h"
#include "watchdog.h"


void WDG_Init(uint32_t period_ms)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	__HAL_DBGMCU_FREEZE_IWDG();  // stop the watchdog in debug mode
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <WDG_Init+0x44>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <WDG_Init+0x44>)
 800227e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002282:	6093      	str	r3, [r2, #8]
	if (period_ms > 32000)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800228a:	d902      	bls.n	8002292 <WDG_Init+0x22>
	{
		period_ms = 32000;
 800228c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002290:	607b      	str	r3, [r7, #4]
	}
	hiwdg.Instance = IWDG;
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <WDG_Init+0x48>)
 8002294:	4a09      	ldr	r2, [pc, #36]	; (80022bc <WDG_Init+0x4c>)
 8002296:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <WDG_Init+0x48>)
 800229a:	2206      	movs	r2, #6
 800229c:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = period_ms/8;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <WDG_Init+0x48>)
 80022a4:	6093      	str	r3, [r2, #8]
	HAL_IWDG_Init(&hiwdg);
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <WDG_Init+0x48>)
 80022a8:	f004 fe24 	bl	8006ef4 <HAL_IWDG_Init>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	e0042000 	.word	0xe0042000
 80022b8:	20000c4c 	.word	0x20000c4c
 80022bc:	40003000 	.word	0x40003000

080022c0 <WDG_Refresh>:

void WDG_Refresh()
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <WDG_Refresh+0x10>)
 80022c6:	f004 fe64 	bl	8006f92 <HAL_IWDG_Refresh>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000c4c 	.word	0x20000c4c

080022d4 <APP_Init>:
static void ProcessMessage(s_CanRxMsg* msg);


// public methods
void APP_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b090      	sub	sp, #64	; 0x40
 80022d8:	af00      	add	r7, sp, #0

	sUIHwInit uihw;

	Scheduler_Init();
 80022da:	f001 f915 	bl	8003508 <Scheduler_Init>

	VAR_Init();
 80022de:	f7ff fe25 	bl	8001f2c <VAR_Init>
	MCAN_Init(&hcan1, THIS_NODE);
 80022e2:	2106      	movs	r1, #6
 80022e4:	4819      	ldr	r0, [pc, #100]	; (800234c <APP_Init+0x78>)
 80022e6:	f7ff f807 	bl	80012f8 <MCAN_Init>
    COM_Init(THIS_NODE);
 80022ea:	2006      	movs	r0, #6
 80022ec:	f7fe fd74 	bl	8000dd8 <COM_Init>
  	WDG_Init(3000);
 80022f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80022f4:	f7ff ffbc 	bl	8002270 <WDG_Init>
  	ELM_Init(NUM_OF_ELEMTERS);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe fe43 	bl	8000f84 <ELM_Init>
  	ADC_Init(&hadc1, &hdma_adc1, 1);
 80022fe:	2201      	movs	r2, #1
 8002300:	4913      	ldr	r1, [pc, #76]	; (8002350 <APP_Init+0x7c>)
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <APP_Init+0x80>)
 8002304:	f7fe fcf4 	bl	8000cf0 <ADC_Init>
  	DI_Init();
 8002308:	f000 fd58 	bl	8002dbc <DI_Init>



	/*Assign pins for onboard UI  */
	uihw.Led_Life.Pin = LED_Life_Pin;
 800230c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002310:	60bb      	str	r3, [r7, #8]
	uihw.Led_Life.Port = LED_Life_GPIO_Port;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <APP_Init+0x84>)
 8002314:	607b      	str	r3, [r7, #4]
	uihw.Led_Life.Logic = eUIL_POSITIVE;
 8002316:	2301      	movs	r3, #1
 8002318:	733b      	strb	r3, [r7, #12]

	uihw.Led_R.Pin = LED_Error_Pin;
 800231a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800231e:	617b      	str	r3, [r7, #20]
	uihw.Led_R.Port = LED_Error_GPIO_Port;
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <APP_Init+0x84>)
 8002322:	613b      	str	r3, [r7, #16]
	uihw.Led_R.Logic = eUIL_NEGATIVE;
 8002324:	2300      	movs	r3, #0
 8002326:	763b      	strb	r3, [r7, #24]
	uihw.Buzzer.Pin = LED_Error_Pin;
	uihw.Buzzer.Port = LED_Error_GPIO_Port;
	uihw.Buzzer.Logic = eUIL_NEGATIVE;*/


	UI_Init(&uihw);
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fb14 	bl	8001958 <UI_Init>
	UI_LED_Life_SetMode(eUI_BLINKING_SLOW);
 8002330:	2002      	movs	r0, #2
 8002332:	f7ff fb7d 	bl	8001a30 <UI_LED_Life_SetMode>
	/* Configure CAN streamed variables */


	/*configure elmeters*/

	ELM_AddMeter(ELM_EVSE, ELM1_Pin, VAR_CONS_EVSE_WH);
 8002336:	22aa      	movs	r2, #170	; 0xaa
 8002338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fe43 	bl	8000fc8 <ELM_AddMeter>

}
 8002342:	bf00      	nop
 8002344:	3740      	adds	r7, #64	; 0x40
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000c24 	.word	0x20000c24
 8002350:	20000bdc 	.word	0x20000bdc
 8002354:	20000b78 	.word	0x20000b78
 8002358:	48000400 	.word	0x48000400

0800235c <APP_Start>:

void APP_Start(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0

	UI_LED_R_SetMode(eUI_OFF);
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fb4c 	bl	8001a00 <UI_LED_R_SetMode>

	MCAN_Start();
 8002368:	f7ff f86a 	bl	8001440 <MCAN_Start>

	LCD_Init();
 800236c:	f000 fb5d 	bl	8002a2a <LCD_Init>
	LCD_Show_String("  UHA-EVSE 1.0  ", 0);
 8002370:	2100      	movs	r1, #0
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <APP_Start+0x48>)
 8002374:	f000 fcec 	bl	8002d50 <LCD_Insert_New_Text>
	LCD_Show_String("****************", 1);
 8002378:	2101      	movs	r1, #1
 800237a:	480b      	ldr	r0, [pc, #44]	; (80023a8 <APP_Start+0x4c>)
 800237c:	f000 fce8 	bl	8002d50 <LCD_Insert_New_Text>

	EVSE_Init();
 8002380:	f000 f97a 	bl	8002678 <EVSE_Init>

	while (1)   // endless loop
	{
		Scheduler_Check_Flag();
 8002384:	f001 f93a 	bl	80035fc <Scheduler_Check_Flag>

		// Process received COM messages

		s_CanRxMsg rmsg;
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002388:	e003      	b.n	8002392 <APP_Start+0x36>
		{
				ProcessMessage(&rmsg);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f000 f8f7 	bl	8002580 <ProcessMessage>
		while(1 == COM_GetRxMessage(&rmsg))  // process all messages in buffer
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fd2f 	bl	8000df8 <COM_GetRxMessage>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d0f4      	beq.n	800238a <APP_Start+0x2e>
	{
 80023a0:	e7f0      	b.n	8002384 <APP_Start+0x28>
 80023a2:	bf00      	nop
 80023a4:	0800bce0 	.word	0x0800bce0
 80023a8:	0800bcf4 	.word	0x0800bcf4

080023ac <APP_Update_100ms>:
	}

}

void APP_Update_100ms(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
	// check midnight
	char row[16];
	static uint8_t dayNumber = 0;
	uint8_t newDayNumber = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	77fb      	strb	r3, [r7, #31]
	newDayNumber = RTC_GetTime().Day;
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fa24 	bl	8001808 <RTC_GetTime>
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	77fb      	strb	r3, [r7, #31]
	if (dayNumber != newDayNumber)
 80023c4:	4b63      	ldr	r3, [pc, #396]	; (8002554 <APP_Update_100ms+0x1a8>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	7ffa      	ldrb	r2, [r7, #31]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d002      	beq.n	80023d4 <APP_Update_100ms+0x28>
	{
		dayNumber = newDayNumber;
 80023ce:	4a61      	ldr	r2, [pc, #388]	; (8002554 <APP_Update_100ms+0x1a8>)
 80023d0:	7ffb      	ldrb	r3, [r7, #31]
 80023d2:	7013      	strb	r3, [r2, #0]
		// TBD
	}



	switch(EVSE_GetStatus())
 80023d4:	f000 fa84 	bl	80028e0 <EVSE_GetStatus>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b06      	cmp	r3, #6
 80023dc:	f200 80b5 	bhi.w	800254a <APP_Update_100ms+0x19e>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <APP_Update_100ms+0x3c>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	08002405 	.word	0x08002405
 80023ec:	08002417 	.word	0x08002417
 80023f0:	08002449 	.word	0x08002449
 80023f4:	0800247b 	.word	0x0800247b
 80023f8:	080024b5 	.word	0x080024b5
 80023fc:	080024e7 	.word	0x080024e7
 8002400:	08002519 	.word	0x08002519
	{
	case evsInit:
		LCD_Show_String("  UHA-EVSE 1.0  ", 0);
 8002404:	2100      	movs	r1, #0
 8002406:	4854      	ldr	r0, [pc, #336]	; (8002558 <APP_Update_100ms+0x1ac>)
 8002408:	f000 fca2 	bl	8002d50 <LCD_Insert_New_Text>
		LCD_Show_String("****************", 1);
 800240c:	2101      	movs	r1, #1
 800240e:	4853      	ldr	r0, [pc, #332]	; (800255c <APP_Update_100ms+0x1b0>)
 8002410:	f000 fc9e 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 8002414:	e099      	b.n	800254a <APP_Update_100ms+0x19e>
	case evsNoCarDetected:
		sprintf(row,"No Vehicle");
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	4951      	ldr	r1, [pc, #324]	; (8002560 <APP_Update_100ms+0x1b4>)
 800241a:	4618      	mov	r0, r3
 800241c:	f007 fb62 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 0);
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fc93 	bl	8002d50 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 800242a:	f000 fa91 	bl	8002950 <EVSE_GetCurrentLimit>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	494b      	ldr	r1, [pc, #300]	; (8002564 <APP_Update_100ms+0x1b8>)
 8002436:	4618      	mov	r0, r3
 8002438:	f007 fb54 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 1);
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fc85 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 8002446:	e080      	b.n	800254a <APP_Update_100ms+0x19e>
	case evsCarFull:
		sprintf(row,"Vehicle charged");
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	4947      	ldr	r1, [pc, #284]	; (8002568 <APP_Update_100ms+0x1bc>)
 800244c:	4618      	mov	r0, r3
 800244e:	f007 fb49 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 0);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fc7a 	bl	8002d50 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 800245c:	f000 fa78 	bl	8002950 <EVSE_GetCurrentLimit>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	493f      	ldr	r1, [pc, #252]	; (8002564 <APP_Update_100ms+0x1b8>)
 8002468:	4618      	mov	r0, r3
 800246a:	f007 fb3b 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 1);
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fc6c 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 8002478:	e067      	b.n	800254a <APP_Update_100ms+0x19e>
	case evsCharging:
		sprintf(row,"Charging: %dW",EVSE_GetActualPower());
 800247a:	f000 fa5d 	bl	8002938 <EVSE_GetActualPower>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	1d3b      	adds	r3, r7, #4
 8002484:	4939      	ldr	r1, [pc, #228]	; (800256c <APP_Update_100ms+0x1c0>)
 8002486:	4618      	mov	r0, r3
 8002488:	f007 fb2c 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 0);
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fc5d 	bl	8002d50 <LCD_Insert_New_Text>
		sprintf(row,"Consumed: %dWh ",EVSE_GetThisCons());
 8002496:	f000 fa67 	bl	8002968 <EVSE_GetThisCons>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	4933      	ldr	r1, [pc, #204]	; (8002570 <APP_Update_100ms+0x1c4>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f007 fb1e 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 1);
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2101      	movs	r1, #1
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fc4f 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 80024b2:	e04a      	b.n	800254a <APP_Update_100ms+0x19e>
	case evsNoFreePower:
		sprintf(row,"No free power");
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	492f      	ldr	r1, [pc, #188]	; (8002574 <APP_Update_100ms+0x1c8>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f007 fb13 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 0);
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fc44 	bl	8002d50 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 80024c8:	f000 fa42 	bl	8002950 <EVSE_GetCurrentLimit>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4924      	ldr	r1, [pc, #144]	; (8002564 <APP_Update_100ms+0x1b8>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f007 fb05 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 1);
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2101      	movs	r1, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fc36 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 80024e4:	e031      	b.n	800254a <APP_Update_100ms+0x19e>
	case evsDisabled:
		sprintf(row,"Disabled by user");
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	4923      	ldr	r1, [pc, #140]	; (8002578 <APP_Update_100ms+0x1cc>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	f007 fafa 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 0);
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fc2b 	bl	8002d50 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 80024fa:	f000 fa29 	bl	8002950 <EVSE_GetCurrentLimit>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4917      	ldr	r1, [pc, #92]	; (8002564 <APP_Update_100ms+0x1b8>)
 8002506:	4618      	mov	r0, r3
 8002508:	f007 faec 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 1);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2101      	movs	r1, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fc1d 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 8002516:	e018      	b.n	800254a <APP_Update_100ms+0x19e>
	case evsError:
		sprintf(row,"EVSE ERROR!");
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	4918      	ldr	r1, [pc, #96]	; (800257c <APP_Update_100ms+0x1d0>)
 800251c:	4618      	mov	r0, r3
 800251e:	f007 fae1 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 0);
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fc12 	bl	8002d50 <LCD_Insert_New_Text>
		sprintf(row,"Limit: %dA ",EVSE_GetCurrentLimit());
 800252c:	f000 fa10 	bl	8002950 <EVSE_GetCurrentLimit>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	490b      	ldr	r1, [pc, #44]	; (8002564 <APP_Update_100ms+0x1b8>)
 8002538:	4618      	mov	r0, r3
 800253a:	f007 fad3 	bl	8009ae4 <siprintf>
		LCD_Show_String(row, 1);
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	2101      	movs	r1, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fc04 	bl	8002d50 <LCD_Insert_New_Text>
		break;
 8002548:	bf00      	nop
	}




}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200009f0 	.word	0x200009f0
 8002558:	0800bce0 	.word	0x0800bce0
 800255c:	0800bcf4 	.word	0x0800bcf4
 8002560:	0800bd08 	.word	0x0800bd08
 8002564:	0800bd14 	.word	0x0800bd14
 8002568:	0800bd20 	.word	0x0800bd20
 800256c:	0800bd30 	.word	0x0800bd30
 8002570:	0800bd40 	.word	0x0800bd40
 8002574:	0800bd50 	.word	0x0800bd50
 8002578:	0800bd60 	.word	0x0800bd60
 800257c:	0800bd74 	.word	0x0800bd74

08002580 <ProcessMessage>:


/*Private methods*/

static void ProcessMessage(s_CanRxMsg* msg)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	uint16_t cmd = msg->header.StdId & 0xFF0;  // maskout nodeid
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002592:	82fb      	strh	r3, [r7, #22]
//	uint8_t producer = msg->header.StdId & 0x00F;  // maskout cmd
	int16_t par1,par2,par3; //,par4;
	uint32_t unixtime = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
	par1 = (msg->data[0] << 8) | msg->data[1];
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7f1b      	ldrb	r3, [r3, #28]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	b21a      	sxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7f5b      	ldrb	r3, [r3, #29]
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	4313      	orrs	r3, r2
 80025a8:	81fb      	strh	r3, [r7, #14]
	par2 = (msg->data[2] << 8) | msg->data[3];
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	7f9b      	ldrb	r3, [r3, #30]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7fdb      	ldrb	r3, [r3, #31]
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	81bb      	strh	r3, [r7, #12]
	par3 = (msg->data[4] << 8) | msg->data[5];
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	4313      	orrs	r3, r2
 80025d0:	817b      	strh	r3, [r7, #10]
	// par4 = (msg->data[6] << 8) | msg->data[7];

	switch (cmd)
 80025d2:	8afb      	ldrh	r3, [r7, #22]
 80025d4:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80025d8:	d019      	beq.n	800260e <ProcessMessage+0x8e>
 80025da:	f5b3 6fa2 	cmp.w	r3, #1296	; 0x510
 80025de:	dc39      	bgt.n	8002654 <ProcessMessage+0xd4>
 80025e0:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80025e4:	d032      	beq.n	800264c <ProcessMessage+0xcc>
 80025e6:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80025ea:	dc33      	bgt.n	8002654 <ProcessMessage+0xd4>
 80025ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f0:	d02e      	beq.n	8002650 <ProcessMessage+0xd0>
 80025f2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80025f6:	d000      	beq.n	80025fa <ProcessMessage+0x7a>
			unixtime |= msg->data[2] << 8;
			unixtime |= msg->data[3];
			RTC_SetUnixTime(unixtime);
			break;
	}
	return;
 80025f8:	e02c      	b.n	8002654 <ProcessMessage+0xd4>
			VAR_SetVariable(par1, par2, par3);  // tbd check valid flag
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	897a      	ldrh	r2, [r7, #10]
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fcea 	bl	8001fe0 <VAR_SetVariable>
			break;
 800260c:	e021      	b.n	8002652 <ProcessMessage+0xd2>
			unixtime |= msg->data[0] << 24;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7f1b      	ldrb	r3, [r3, #28]
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	461a      	mov	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[1] << 16;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7f5b      	ldrb	r3, [r3, #29]
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	461a      	mov	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[2] << 8;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7f9b      	ldrb	r3, [r3, #30]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	461a      	mov	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
			unixtime |= msg->data[3];
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7fdb      	ldrb	r3, [r3, #31]
 800263c:	461a      	mov	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
			RTC_SetUnixTime(unixtime);
 8002644:	6938      	ldr	r0, [r7, #16]
 8002646:	f7ff f94f 	bl	80018e8 <RTC_SetUnixTime>
			break;
 800264a:	e002      	b.n	8002652 <ProcessMessage+0xd2>
			break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <ProcessMessage+0xd2>
			break;
 8002650:	bf00      	nop
	return;
 8002652:	bf00      	nop
 8002654:	bf00      	nop
}
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
	ELM_ExtiCallback(GPIO_Pin);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fdeb 	bl	8001244 <ELM_ExtiCallback>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <EVSE_Init>:


static TIM_OC_InitTypeDef sConfigOC;

void EVSE_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	mState = evsInit;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <EVSE_Init+0x60>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
	mLimitCurrent_A = 10;
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <EVSE_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	801a      	strh	r2, [r3, #0]
	mActualCurrent_A = 0;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <EVSE_Init+0x68>)
 800268a:	2200      	movs	r2, #0
 800268c:	801a      	strh	r2, [r3, #0]

	// prepare structure for configuring OC channels
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <EVSE_Init+0x6c>)
 8002690:	2260      	movs	r2, #96	; 0x60
 8002692:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <EVSE_Init+0x6c>)
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <EVSE_Init+0x6c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <EVSE_Init+0x6c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a6:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <EVSE_Init+0x6c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <EVSE_Init+0x6c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <EVSE_Init+0x6c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]



	ADC_StartConversion();
 80026b8:	f7fe fb46 	bl	8000d48 <ADC_StartConversion>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80026bc:	2100      	movs	r1, #0
 80026be:	480a      	ldr	r0, [pc, #40]	; (80026e8 <EVSE_Init+0x70>)
 80026c0:	f006 f95e 	bl	8008980 <HAL_TIM_PWM_Start>

	EVSE_SetCurrentLimit(mLimitCurrent_A);  // 10Amp default
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <EVSE_Init+0x64>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 f915 	bl	80028f8 <EVSE_SetCurrentLimit>
	mRelayState = 0;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <EVSE_Init+0x74>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200009fa 	.word	0x200009fa
 80026dc:	200009f2 	.word	0x200009f2
 80026e0:	200009f6 	.word	0x200009f6
 80026e4:	200009fc 	.word	0x200009fc
 80026e8:	20000c80 	.word	0x20000c80
 80026ec:	200009fb 	.word	0x200009fb

080026f0 <EVSE_Update_100ms>:

void EVSE_Update_100ms(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
	uint16_t adc_raw;
	double adcpin_mV;
	double pilotVoltage_mV;
	// detect car on control pilot pin

	adc_raw = ADC_GetValue(0);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fb3e 	bl	8000d78 <ADC_GetValue>
 80026fc:	4603      	mov	r3, r0
 80026fe:	82fb      	strh	r3, [r7, #22]
	adcpin_mV = (ADC_VREF_MV/4096.0 * adc_raw);  // convert to milivolts
 8002700:	8afb      	ldrh	r3, [r7, #22]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe f848 	bl	8000798 <__aeabi_i2d>
 8002708:	a371      	add	r3, pc, #452	; (adr r3, 80028d0 <EVSE_Update_100ms+0x1e0>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd fdc7 	bl	80002a0 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	e9c7 2302 	strd	r2, r3, [r7, #8]
	pilotVoltage_mV = adcpin_mV * 6.05;  // voltage divider 12k + 56k
 800271a:	a36f      	add	r3, pc, #444	; (adr r3, 80028d8 <EVSE_Update_100ms+0x1e8>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002724:	f7fd fdbc 	bl	80002a0 <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	e9c7 2300 	strd	r2, r3, [r7]
	ADC_StartConversion();
 8002730:	f7fe fb0a 	bl	8000d48 <ADC_StartConversion>

	if (mState == evsDisabled)
 8002734:	4b60      	ldr	r3, [pc, #384]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b05      	cmp	r3, #5
 800273a:	d103      	bne.n	8002744 <EVSE_Update_100ms+0x54>
	{
		mRelayState = 0;
 800273c:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e05d      	b.n	8002800 <EVSE_Update_100ms+0x110>
	}
	else
	{
		if(pilotVoltage_mV > EVSE_CPV_NOCAR_MV)
 8002744:	a358      	add	r3, pc, #352	; (adr r3, 80028a8 <EVSE_Update_100ms+0x1b8>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800274e:	f7fe f90b 	bl	8000968 <__aeabi_dcmpgt>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <EVSE_Update_100ms+0x76>
		{
			mState = evsNoCarDetected;
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
			mRelayState = 0;
 800275e:	4b57      	ldr	r3, [pc, #348]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e04c      	b.n	8002800 <EVSE_Update_100ms+0x110>
		}
		else if (pilotVoltage_mV > EVSE_CPV_CAR_DETECT_MV)
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b55      	ldr	r3, [pc, #340]	; (80028c0 <EVSE_Update_100ms+0x1d0>)
 800276c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002770:	f7fe f8fa 	bl	8000968 <__aeabi_dcmpgt>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <EVSE_Update_100ms+0x98>
		{
			mState = evsCarFull;
 800277a:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]
			mRelayState = 0;
 8002780:	4b4e      	ldr	r3, [pc, #312]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e03b      	b.n	8002800 <EVSE_Update_100ms+0x110>
		}
		else if (pilotVoltage_mV > EVSE_CPV_CAR_READY_MV)
 8002788:	a349      	add	r3, pc, #292	; (adr r3, 80028b0 <EVSE_Update_100ms+0x1c0>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002792:	f7fe f8e9 	bl	8000968 <__aeabi_dcmpgt>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <EVSE_Update_100ms+0xce>
		{
			mState = evsCharging;
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 800279e:	2203      	movs	r2, #3
 80027a0:	701a      	strb	r2, [r3, #0]
			if (mRelayState == 0)
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d12a      	bne.n	8002800 <EVSE_Update_100ms+0x110>
			{
				mRelayState = 1;
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
				mThisCharge_Wh = 0;
 80027b0:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <EVSE_Update_100ms+0x1d4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]
				ELM_ResetConsumption(ELM_EVSE);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fd26 	bl	8001208 <ELM_ResetConsumption>
 80027bc:	e020      	b.n	8002800 <EVSE_Update_100ms+0x110>
			}

		}
		else if (pilotVoltage_mV > EVSE_CPV_CAR_VENT_MV)
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <EVSE_Update_100ms+0x1d8>)
 80027c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027c8:	f7fe f8ce 	bl	8000968 <__aeabi_dcmpgt>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <EVSE_Update_100ms+0x104>
		{
			mState = evsCharging;
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
			if (mRelayState == 0)
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10f      	bne.n	8002800 <EVSE_Update_100ms+0x110>
			{
				mRelayState = 1;
 80027e0:	4b36      	ldr	r3, [pc, #216]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
				mThisCharge_Wh = 0;
 80027e6:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <EVSE_Update_100ms+0x1d4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	801a      	strh	r2, [r3, #0]
				ELM_ResetConsumption(ELM_EVSE);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fd0b 	bl	8001208 <ELM_ResetConsumption>
 80027f2:	e005      	b.n	8002800 <EVSE_Update_100ms+0x110>
			}
		}
		else
		{
			mState = evsError;
 80027f4:	4b30      	ldr	r3, [pc, #192]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 80027f6:	2206      	movs	r2, #6
 80027f8:	701a      	strb	r2, [r3, #0]
			mRelayState = 0;
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]



	// control relay

	if (mRelayState)
 8002800:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <EVSE_Update_100ms+0x1cc>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <EVSE_Update_100ms+0x128>
	{
		HAL_GPIO_WritePin(AC_RELAY_GPIO_Port, AC_RELAY_Pin, GPIO_PIN_SET);
 8002808:	2201      	movs	r2, #1
 800280a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002812:	f004 fb25 	bl	8006e60 <HAL_GPIO_WritePin>
 8002816:	e006      	b.n	8002826 <EVSE_Update_100ms+0x136>
	}
	else
	{
		HAL_GPIO_WritePin(AC_RELAY_GPIO_Port, AC_RELAY_Pin, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800281e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002822:	f004 fb1d 	bl	8006e60 <HAL_GPIO_WritePin>
	}

	// control the PWM output

	// measure actual charging current using standard elmeter
	mThisCharge_Wh = ELM_GetConsumptionWh(ELM_EVSE);
 8002826:	2000      	movs	r0, #0
 8002828:	f7fe fcae 	bl	8001188 <ELM_GetConsumptionWh>
 800282c:	4603      	mov	r3, r0
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <EVSE_Update_100ms+0x1d4>)
 8002832:	801a      	strh	r2, [r3, #0]
	mActualPower_W = ELM_GetPowerW(ELM_EVSE);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fcc7 	bl	80011c8 <ELM_GetPowerW>
 800283a:	4603      	mov	r3, r0
 800283c:	b29a      	uxth	r2, r3
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <EVSE_Update_100ms+0x1dc>)
 8002840:	801a      	strh	r2, [r3, #0]

	// process buttons

	if (DI_Get(UP) == eDI_LO)
 8002842:	2001      	movs	r0, #1
 8002844:	f000 fb70 	bl	8002f28 <DI_Get>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <EVSE_Update_100ms+0x16e>
	{
		EVSE_SetCurrentLimit(EVSE_GetCurrentLimit() + 1);
 800284e:	f000 f87f 	bl	8002950 <EVSE_GetCurrentLimit>
 8002852:	4603      	mov	r3, r0
 8002854:	3301      	adds	r3, #1
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f84d 	bl	80028f8 <EVSE_SetCurrentLimit>
	}
	if (DI_Get(DOWN) == eDI_LO)
 800285e:	2002      	movs	r0, #2
 8002860:	f000 fb62 	bl	8002f28 <DI_Get>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <EVSE_Update_100ms+0x18a>
	{
		EVSE_SetCurrentLimit(EVSE_GetCurrentLimit() - 1);
 800286a:	f000 f871 	bl	8002950 <EVSE_GetCurrentLimit>
 800286e:	4603      	mov	r3, r0
 8002870:	3b01      	subs	r3, #1
 8002872:	b29b      	uxth	r3, r3
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f83f 	bl	80028f8 <EVSE_SetCurrentLimit>
	}

	if (DI_Get(ENTER) == eDI_LO)
 800287a:	2000      	movs	r0, #0
 800287c:	f000 fb54 	bl	8002f28 <DI_Get>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <EVSE_Update_100ms+0x1ac>
	{
		if (mState != evsDisabled)
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d003      	beq.n	8002896 <EVSE_Update_100ms+0x1a6>
		{
			mState = evsDisabled;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 8002890:	2205      	movs	r2, #5
 8002892:	701a      	strb	r2, [r3, #0]
			mState = evsInit;
		}
	}


}
 8002894:	e002      	b.n	800289c <EVSE_Update_100ms+0x1ac>
			mState = evsInit;
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <EVSE_Update_100ms+0x1c8>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f3af 8000 	nop.w
 80028a8:	00000000 	.word	0x00000000
 80028ac:	40c38800 	.word	0x40c38800
 80028b0:	00000000 	.word	0x00000000
 80028b4:	40b38800 	.word	0x40b38800
 80028b8:	200009fa 	.word	0x200009fa
 80028bc:	200009fb 	.word	0x200009fb
 80028c0:	40bf4000 	.word	0x40bf4000
 80028c4:	200009f4 	.word	0x200009f4
 80028c8:	409f4000 	.word	0x409f4000
 80028cc:	200009f8 	.word	0x200009f8
 80028d0:	00000000 	.word	0x00000000
 80028d4:	3fe9e200 	.word	0x3fe9e200
 80028d8:	33333333 	.word	0x33333333
 80028dc:	40183333 	.word	0x40183333

080028e0 <EVSE_GetStatus>:
{
	return mActualCurrent_A;
}

eEvseState EVSE_GetStatus(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
	return mState;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <EVSE_GetStatus+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200009fa 	.word	0x200009fa

080028f8 <EVSE_SetCurrentLimit>:

void EVSE_SetCurrentLimit(uint16_t chargingCurrent)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
	if (chargingCurrent <= EVSE_MAX_CURRENT)
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b10      	cmp	r3, #16
 8002906:	d803      	bhi.n	8002910 <EVSE_SetCurrentLimit+0x18>
	{
		mLimitCurrent_A = chargingCurrent;
 8002908:	4a0a      	ldr	r2, [pc, #40]	; (8002934 <EVSE_SetCurrentLimit+0x3c>)
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	8013      	strh	r3, [r2, #0]
 800290e:	e002      	b.n	8002916 <EVSE_SetCurrentLimit+0x1e>
	}
	else
	{
		mLimitCurrent_A = EVSE_MAX_CURRENT;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <EVSE_SetCurrentLimit+0x3c>)
 8002912:	2210      	movs	r2, #16
 8002914:	801a      	strh	r2, [r3, #0]
	}
	if (chargingCurrent < 6)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d802      	bhi.n	8002922 <EVSE_SetCurrentLimit+0x2a>
	{
		mLimitCurrent_A = 6;
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <EVSE_SetCurrentLimit+0x3c>)
 800291e:	2206      	movs	r2, #6
 8002920:	801a      	strh	r2, [r3, #0]
	}
	SetCurrent(mLimitCurrent_A);
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <EVSE_SetCurrentLimit+0x3c>)
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f82a 	bl	8002980 <SetCurrent>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200009f2 	.word	0x200009f2

08002938 <EVSE_GetActualPower>:

uint16_t EVSE_GetActualPower(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
	return mActualPower_W;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <EVSE_GetActualPower+0x14>)
 800293e:	881b      	ldrh	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	200009f8 	.word	0x200009f8

08002950 <EVSE_GetCurrentLimit>:

uint16_t EVSE_GetCurrentLimit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
	return mLimitCurrent_A;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <EVSE_GetCurrentLimit+0x14>)
 8002956:	881b      	ldrh	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	200009f2 	.word	0x200009f2

08002968 <EVSE_GetThisCons>:

uint16_t EVSE_GetThisCons(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	return mThisCharge_Wh;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <EVSE_GetThisCons+0x14>)
 800296e:	881b      	ldrh	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200009f4 	.word	0x200009f4

08002980 <SetCurrent>:


static void SetCurrent(uint16_t amps)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
	// safety range check
	if (amps < 6)
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d801      	bhi.n	8002994 <SetCurrent+0x14>
	{
		amps = 6;
 8002990:	2306      	movs	r3, #6
 8002992:	80fb      	strh	r3, [r7, #6]
	}
	if (amps > EVSE_MAX_CURRENT)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b10      	cmp	r3, #16
 8002998:	d901      	bls.n	800299e <SetCurrent+0x1e>
	{
		amps = EVSE_MAX_CURRENT;
 800299a:	2310      	movs	r3, #16
 800299c:	80fb      	strh	r3, [r7, #6]
	}
	// calculate pulse lengt in us
	uint16_t pulse = (amps * 100) / 6;
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2264      	movs	r2, #100	; 0x64
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <SetCurrent+0x64>)
 80029a8:	fb82 1203 	smull	r1, r2, r2, r3
 80029ac:	17db      	asrs	r3, r3, #31
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	81fb      	strh	r3, [r7, #14]

	sConfigOC.Pulse = pulse;
 80029b2:	89fb      	ldrh	r3, [r7, #14]
 80029b4:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <SetCurrent+0x68>)
 80029b6:	6053      	str	r3, [r2, #4]

	HAL_TIM_PWM_Stop(&htim1, EVSE_PWM_TIM_CHANNEL); // we have to stop here
 80029b8:	2104      	movs	r1, #4
 80029ba:	480c      	ldr	r0, [pc, #48]	; (80029ec <SetCurrent+0x6c>)
 80029bc:	f006 f8be 	bl	8008b3c <HAL_TIM_PWM_Stop>

	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, EVSE_PWM_TIM_CHANNEL) != HAL_OK)  // because this fcn will stop it in register CCER - CCxE
 80029c0:	2204      	movs	r2, #4
 80029c2:	4909      	ldr	r1, [pc, #36]	; (80029e8 <SetCurrent+0x68>)
 80029c4:	4809      	ldr	r0, [pc, #36]	; (80029ec <SetCurrent+0x6c>)
 80029c6:	f006 f941 	bl	8008c4c <HAL_TIM_PWM_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SetCurrent+0x54>
	{
		Error_Handler();
 80029d0:	f000 fd94 	bl	80034fc <Error_Handler>
	}
	HAL_TIM_PWM_Start(&htim1, EVSE_PWM_TIM_CHANNEL);  // and this fcn is then not able to start  (HAL HELL ! )
 80029d4:	2104      	movs	r1, #4
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <SetCurrent+0x6c>)
 80029d8:	f005 ffd2 	bl	8008980 <HAL_TIM_PWM_Start>


}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2aaaaaab 	.word	0x2aaaaaab
 80029e8:	200009fc 	.word	0x200009fc
 80029ec:	20000c80 	.word	0x20000c80

080029f0 <WriteDataToBus>:
void LCD_SendCmd(uint8_t cmd);
void LCD_SendData(uint8_t data);
void LCD_Send_Text(uint8_t *data);

void WriteDataToBus(uint8_t cmd)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
	uint32_t bssr = 0x00000000;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
	bssr |= cmd;  // setting bits
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
	bssr |= (((~cmd)<<16) & 0x00FF0000); // resetting bits
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

	D0_GPIO_Port->BSRR = bssr;
 8002a16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6193      	str	r3, [r2, #24]

}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LCD_Init>:



void LCD_Init (void)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8002a2e:	2032      	movs	r0, #50	; 0x32
 8002a30:	f001 f9fe 	bl	8003e30 <HAL_Delay>
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002a34:	2038      	movs	r0, #56	; 0x38
 8002a36:	f000 f83f 	bl	8002ab8 <LCD_SendCmd>
	HAL_Delay(10);
 8002a3a:	200a      	movs	r0, #10
 8002a3c:	f001 f9f8 	bl	8003e30 <HAL_Delay>
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002a40:	2038      	movs	r0, #56	; 0x38
 8002a42:	f000 f839 	bl	8002ab8 <LCD_SendCmd>
	HAL_Delay(200);
 8002a46:	20c8      	movs	r0, #200	; 0xc8
 8002a48:	f001 f9f2 	bl	8003e30 <HAL_Delay>
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002a4c:	2038      	movs	r0, #56	; 0x38
 8002a4e:	f000 f833 	bl	8002ab8 <LCD_SendCmd>
	
	LCD_SendCmd(LED_IC_FUNCTION_SET | LED_ICFS_8BIT | LED_ICFS_2LINES | LED_ICFS_INS_TABLE0);
 8002a52:	2038      	movs	r0, #56	; 0x38
 8002a54:	f000 f830 	bl	8002ab8 <LCD_SendCmd>
		
	//Configurace - LED DISPLAY OFF
	LCD_SendCmd(LED_IC_DISPLAY_ON_OFF | LED_IC_DIS_OFF);	
 8002a58:	2008      	movs	r0, #8
 8002a5a:	f000 f82d 	bl	8002ab8 <LCD_SendCmd>
	
	//Configurace - LED DISPLAY CLEAR
	LCD_SendCmd(LED_IC_CLEAR_DISPLAY);		
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f000 f82a 	bl	8002ab8 <LCD_SendCmd>
	
	//Configurace - LED DISPLAY CLEAR
	LCD_SendCmd(LED_IC_CURSOR | LED_IC_CURSOR_INCREMENT_ON | LED_IC_CURSOR_SHIFT_OFF);	
 8002a64:	2006      	movs	r0, #6
 8002a66:	f000 f827 	bl	8002ab8 <LCD_SendCmd>
	
	LCD_SendCmd(LED_IC_DISPLAY_ON_OFF | LED_IC_DIS_ON | LED_IC_DIS_CURSOR_OFF);
 8002a6a:	200c      	movs	r0, #12
 8002a6c:	f000 f824 	bl	8002ab8 <LCD_SendCmd>
	
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <LCD_Set_Position>:

void LCD_Set_Position (uint8_t row, uint8_t column)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71bb      	strb	r3, [r7, #6]
	if(row == 0x00)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <LCD_Set_Position+0x26>
	{
		LCD_SendCmd(LED_SET_POSSITION | LED_SP_1ROW + column);
 8002a8a:	79bb      	ldrb	r3, [r7, #6]
 8002a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f810 	bl	8002ab8 <LCD_SendCmd>
	}
	else
	{
		LCD_SendCmd(LED_SET_POSSITION | LED_SP_2ROW + column);
	}
}
 8002a98:	e00a      	b.n	8002ab0 <LCD_Set_Position+0x3c>
		LCD_SendCmd(LED_SET_POSSITION | LED_SP_2ROW + column);
 8002a9a:	79bb      	ldrb	r3, [r7, #6]
 8002a9c:	3340      	adds	r3, #64	; 0x40
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25b      	sxtb	r3, r3
 8002aa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f804 	bl	8002ab8 <LCD_SendCmd>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t cmd)
{		
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
	RS_Disable;		
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ac8:	480f      	ldr	r0, [pc, #60]	; (8002b08 <LCD_SendCmd+0x50>)
 8002aca:	f004 f9c9 	bl	8006e60 <HAL_GPIO_WritePin>
	RW_Disable;	
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	480d      	ldr	r0, [pc, #52]	; (8002b08 <LCD_SendCmd+0x50>)
 8002ad4:	f004 f9c4 	bl	8006e60 <HAL_GPIO_WritePin>
	E_Enable;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2104      	movs	r1, #4
 8002adc:	480a      	ldr	r0, [pc, #40]	; (8002b08 <LCD_SendCmd+0x50>)
 8002ade:	f004 f9bf 	bl	8006e60 <HAL_GPIO_WritePin>
	WriteDataToBus(cmd);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff83 	bl	80029f0 <WriteDataToBus>
	//LL_GPIO_WriteOutputPort(D0_GPIO_Port, cmd & 0xFF);
	HAL_Delay(1);	
 8002aea:	2001      	movs	r0, #1
 8002aec:	f001 f9a0 	bl	8003e30 <HAL_Delay>
	E_Disable;	
 8002af0:	2200      	movs	r2, #0
 8002af2:	2104      	movs	r1, #4
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <LCD_SendCmd+0x50>)
 8002af6:	f004 f9b3 	bl	8006e60 <HAL_GPIO_WritePin>
	HAL_Delay(1);	
 8002afa:	2001      	movs	r0, #1
 8002afc:	f001 f998 	bl	8003e30 <HAL_Delay>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	48000400 	.word	0x48000400

08002b0c <LCD_SendData>:

void LCD_SendData(uint8_t data)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
	RS_Enable;	
 8002b16:	2201      	movs	r2, #1
 8002b18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b1c:	480e      	ldr	r0, [pc, #56]	; (8002b58 <LCD_SendData+0x4c>)
 8002b1e:	f004 f99f 	bl	8006e60 <HAL_GPIO_WritePin>
	RW_Disable;
 8002b22:	2200      	movs	r2, #0
 8002b24:	2102      	movs	r1, #2
 8002b26:	480c      	ldr	r0, [pc, #48]	; (8002b58 <LCD_SendData+0x4c>)
 8002b28:	f004 f99a 	bl	8006e60 <HAL_GPIO_WritePin>
	E_Enable;
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2104      	movs	r1, #4
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <LCD_SendData+0x4c>)
 8002b32:	f004 f995 	bl	8006e60 <HAL_GPIO_WritePin>
	WriteDataToBus(data);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff59 	bl	80029f0 <WriteDataToBus>
	//LL_GPIO_WriteOutputPort(D0_GPIO_Port, data & 0xFF);
	E_Disable;
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2104      	movs	r1, #4
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <LCD_SendData+0x4c>)
 8002b44:	f004 f98c 	bl	8006e60 <HAL_GPIO_WritePin>
	HAL_Delay(1);	
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f001 f971 	bl	8003e30 <HAL_Delay>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	48000400 	.word	0x48000400

08002b5c <LCD_Send_Text>:

void LCD_Send_Text(uint8_t *data)
{	
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0;i<0x10;i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e00a      	b.n	8002b80 <LCD_Send_Text+0x24>
	{	
		LCD_SendData(*data);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ffcc 	bl	8002b0c <LCD_SendData>
		data++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3301      	adds	r3, #1
 8002b78:	607b      	str	r3, [r7, #4]
	for(i=0;i<0x10;i++)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	d9f1      	bls.n	8002b6a <LCD_Send_Text+0xe>
	}
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <LCD_Refresf_Display>:

void LCD_Refresf_Display(void)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
	uint8_t	length;
	int16_t	help_diff = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	80fb      	strh	r3, [r7, #6]
	memset(Led_First_Row,0x20,0x10);
 8002b9a:	2210      	movs	r2, #16
 8002b9c:	2120      	movs	r1, #32
 8002b9e:	4866      	ldr	r0, [pc, #408]	; (8002d38 <LCD_Refresf_Display+0x1a8>)
 8002ba0:	f006 fea8 	bl	80098f4 <memset>
	memset(Led_Second_Row,0x20,0x10);
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	4864      	ldr	r0, [pc, #400]	; (8002d3c <LCD_Refresf_Display+0x1ac>)
 8002baa:	f006 fea3 	bl	80098f4 <memset>
	
	length = strlen((char*)Led_First_Row_Mem);
 8002bae:	4864      	ldr	r0, [pc, #400]	; (8002d40 <LCD_Refresf_Display+0x1b0>)
 8002bb0:	f7fd fb0e 	bl	80001d0 <strlen>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	717b      	strb	r3, [r7, #5]
	if(length > 0x10)
 8002bb8:	797b      	ldrb	r3, [r7, #5]
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d949      	bls.n	8002c52 <LCD_Refresf_Display+0xc2>
	{
		if(length > Led_First_Row_MemOffset + 0x10)
 8002bbe:	797a      	ldrb	r2, [r7, #5]
 8002bc0:	4b60      	ldr	r3, [pc, #384]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3310      	adds	r3, #16
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	dd0c      	ble.n	8002be4 <LCD_Refresf_Display+0x54>
		{			
			memcpy(Led_First_Row, &Led_First_Row_Mem[Led_First_Row_MemOffset], 0x10);
 8002bca:	4b5e      	ldr	r3, [pc, #376]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <LCD_Refresf_Display+0x1b0>)
 8002bd2:	4413      	add	r3, r2
 8002bd4:	4a58      	ldr	r2, [pc, #352]	; (8002d38 <LCD_Refresf_Display+0x1a8>)
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be2:	e02f      	b.n	8002c44 <LCD_Refresf_Display+0xb4>
		}
		else
		{
			help_diff = length - Led_First_Row_MemOffset;			
 8002be4:	797b      	ldrb	r3, [r7, #5]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	80fb      	strh	r3, [r7, #6]
			if(help_diff >= 0)
 8002bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	db0a      	blt.n	8002c12 <LCD_Refresf_Display+0x82>
			{
				memcpy(Led_First_Row, &Led_First_Row_Mem[Led_First_Row_MemOffset], help_diff);
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <LCD_Refresf_Display+0x1b0>)
 8002c04:	4413      	add	r3, r2
 8002c06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	484a      	ldr	r0, [pc, #296]	; (8002d38 <LCD_Refresf_Display+0x1a8>)
 8002c0e:	f006 fe63 	bl	80098d8 <memcpy>
			}
			
			if(help_diff <13)
 8002c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	dc14      	bgt.n	8002c44 <LCD_Refresf_Display+0xb4>
			{
				memcpy(&Led_First_Row[help_diff+4], Led_First_Row_Mem, 0x10 - help_diff - 4);
 8002c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4a45      	ldr	r2, [pc, #276]	; (8002d38 <LCD_Refresf_Display+0x1a8>)
 8002c22:	1898      	adds	r0, r3, r2
 8002c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c28:	f1c3 030c 	rsb	r3, r3, #12
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4944      	ldr	r1, [pc, #272]	; (8002d40 <LCD_Refresf_Display+0x1b0>)
 8002c30:	f006 fe52 	bl	80098d8 <memcpy>
				if(help_diff == -4)
 8002c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c38:	f113 0f04 	cmn.w	r3, #4
 8002c3c:	d102      	bne.n	8002c44 <LCD_Refresf_Display+0xb4>
				{
					Led_First_Row_MemOffset = 0;
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
				}
			}
		}		
		Led_First_Row_MemOffset++;
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <LCD_Refresf_Display+0x1b4>)
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e005      	b.n	8002c5e <LCD_Refresf_Display+0xce>
	}
	else
	{
		memcpy(Led_First_Row,Led_First_Row_Mem, length);
 8002c52:	797b      	ldrb	r3, [r7, #5]
 8002c54:	461a      	mov	r2, r3
 8002c56:	493a      	ldr	r1, [pc, #232]	; (8002d40 <LCD_Refresf_Display+0x1b0>)
 8002c58:	4837      	ldr	r0, [pc, #220]	; (8002d38 <LCD_Refresf_Display+0x1a8>)
 8002c5a:	f006 fe3d 	bl	80098d8 <memcpy>
	}	
	LCD_Set_Position(0,0);
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff ff07 	bl	8002a74 <LCD_Set_Position>
	LCD_Send_Text(Led_First_Row);
 8002c66:	4834      	ldr	r0, [pc, #208]	; (8002d38 <LCD_Refresf_Display+0x1a8>)
 8002c68:	f7ff ff78 	bl	8002b5c <LCD_Send_Text>
	
	length = strlen((char*)Led_Second_Row_Mem);
 8002c6c:	4836      	ldr	r0, [pc, #216]	; (8002d48 <LCD_Refresf_Display+0x1b8>)
 8002c6e:	f7fd faaf 	bl	80001d0 <strlen>
 8002c72:	4603      	mov	r3, r0
 8002c74:	717b      	strb	r3, [r7, #5]
	if(strlen((char*)Led_Second_Row_Mem) > 0x10)
 8002c76:	4834      	ldr	r0, [pc, #208]	; (8002d48 <LCD_Refresf_Display+0x1b8>)
 8002c78:	f7fd faaa 	bl	80001d0 <strlen>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d949      	bls.n	8002d16 <LCD_Refresf_Display+0x186>
	{
		if(length > Led_Second_Row_MemOffset + 0x10)
 8002c82:	797a      	ldrb	r2, [r7, #5]
 8002c84:	4b31      	ldr	r3, [pc, #196]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	3310      	adds	r3, #16
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	dd0c      	ble.n	8002ca8 <LCD_Refresf_Display+0x118>
		{			
			memcpy(Led_Second_Row, &Led_Second_Row_Mem[Led_Second_Row_MemOffset], 0x10);
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <LCD_Refresf_Display+0x1b8>)
 8002c96:	4413      	add	r3, r2
 8002c98:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <LCD_Refresf_Display+0x1ac>)
 8002c9a:	4614      	mov	r4, r2
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ca6:	e02f      	b.n	8002d08 <LCD_Refresf_Display+0x178>
		}
		else
		{
			help_diff = length - Led_Second_Row_MemOffset;			
 8002ca8:	797b      	ldrb	r3, [r7, #5]
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	80fb      	strh	r3, [r7, #6]
			if(help_diff >= 0)
 8002cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <LCD_Refresf_Display+0x146>
			{
				memcpy(Led_Second_Row, &Led_Second_Row_Mem[Led_Second_Row_MemOffset], help_diff);
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <LCD_Refresf_Display+0x1b8>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	481a      	ldr	r0, [pc, #104]	; (8002d3c <LCD_Refresf_Display+0x1ac>)
 8002cd2:	f006 fe01 	bl	80098d8 <memcpy>
			}
			
			if(help_diff <13)
 8002cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	dc14      	bgt.n	8002d08 <LCD_Refresf_Display+0x178>
			{
				memcpy(&Led_Second_Row[help_diff+4], Led_Second_Row_Mem, 0x10 - help_diff - 4);
 8002cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <LCD_Refresf_Display+0x1ac>)
 8002ce6:	1898      	adds	r0, r3, r2
 8002ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cec:	f1c3 030c 	rsb	r3, r3, #12
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4915      	ldr	r1, [pc, #84]	; (8002d48 <LCD_Refresf_Display+0x1b8>)
 8002cf4:	f006 fdf0 	bl	80098d8 <memcpy>
				if(help_diff == -4)
 8002cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfc:	f113 0f04 	cmn.w	r3, #4
 8002d00:	d102      	bne.n	8002d08 <LCD_Refresf_Display+0x178>
				{
					Led_Second_Row_MemOffset = 0;
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
				}
			}
		}		
		Led_Second_Row_MemOffset++;
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <LCD_Refresf_Display+0x1bc>)
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e005      	b.n	8002d22 <LCD_Refresf_Display+0x192>
	}
	else
	{
		memcpy(Led_Second_Row,Led_Second_Row_Mem,length);
 8002d16:	797b      	ldrb	r3, [r7, #5]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	490b      	ldr	r1, [pc, #44]	; (8002d48 <LCD_Refresf_Display+0x1b8>)
 8002d1c:	4807      	ldr	r0, [pc, #28]	; (8002d3c <LCD_Refresf_Display+0x1ac>)
 8002d1e:	f006 fddb 	bl	80098d8 <memcpy>
	}	
	LCD_Set_Position(1,0);
 8002d22:	2100      	movs	r1, #0
 8002d24:	2001      	movs	r0, #1
 8002d26:	f7ff fea5 	bl	8002a74 <LCD_Set_Position>
	LCD_Send_Text(Led_Second_Row);
 8002d2a:	4804      	ldr	r0, [pc, #16]	; (8002d3c <LCD_Refresf_Display+0x1ac>)
 8002d2c:	f7ff ff16 	bl	8002b5c <LCD_Send_Text>
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	20000b1c 	.word	0x20000b1c
 8002d3c:	20000b2c 	.word	0x20000b2c
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000a18 	.word	0x20000a18
 8002d48:	20000a1c 	.word	0x20000a1c
 8002d4c:	20000b1b 	.word	0x20000b1b

08002d50 <LCD_Insert_New_Text>:

void LCD_Insert_New_Text(uint8_t *data, uint8_t row)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
	uint8_t* p_data; 
	uint16_t data_length;
	
	if(row == 0)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <LCD_Insert_New_Text+0x1e>
	{
		p_data = Led_First_Row_Mem;
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <LCD_Insert_New_Text+0x5c>)
 8002d64:	60fb      	str	r3, [r7, #12]
		Led_First_Row_MemOffset = 0;
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <LCD_Insert_New_Text+0x60>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e004      	b.n	8002d78 <LCD_Insert_New_Text+0x28>
	}
	else
	{
		p_data = Led_Second_Row_Mem;
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <LCD_Insert_New_Text+0x64>)
 8002d70:	60fb      	str	r3, [r7, #12]
		Led_Second_Row_MemOffset = 0;
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <LCD_Insert_New_Text+0x68>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
	}

	data_length = strlen((char*)data);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd fa29 	bl	80001d0 <strlen>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
	if(data_length > 0xFF)
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	2bff      	cmp	r3, #255	; 0xff
 8002d86:	d901      	bls.n	8002d8c <LCD_Insert_New_Text+0x3c>
	{
		data_length = 0xFE;
 8002d88:	23fe      	movs	r3, #254	; 0xfe
 8002d8a:	817b      	strh	r3, [r7, #10]
	}
	memset(p_data, 0x00, 0xFF);	
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	2100      	movs	r1, #0
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f006 fdaf 	bl	80098f4 <memset>
	memcpy(p_data,data,data_length);
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f006 fd9b 	bl	80098d8 <memcpy>
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000a18 	.word	0x20000a18
 8002db4:	20000a1c 	.word	0x20000a1c
 8002db8:	20000b1b 	.word	0x20000b1b

08002dbc <DI_Init>:
static void 	OnChange(sDI *di_input);

/* Public functions definitions */

void DI_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
	
	sDI init_struct;
	
	init_struct.Main_Status				= eDI_HI;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	733b      	strb	r3, [r7, #12]
	init_struct.Actual_Status			= eDI_HI;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73bb      	strb	r3, [r7, #14]
	init_struct.Last_Status				= eDI_HI;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	737b      	strb	r3, [r7, #13]
	init_struct.Cnt_DI						= 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	823b      	strh	r3, [r7, #16]
	init_struct.Cnt_Filter				= 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	74bb      	strb	r3, [r7, #18]
	init_struct.Filter_Value			= 50;
 8002dd6:	2332      	movs	r3, #50	; 0x32
 8002dd8:	74fb      	strb	r3, [r7, #19]
	
	//----------------------------------------------------------------------------------------
	init_struct.Port							= BTN_ENTER_GPIO_Port;
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <DI_Init+0x74>)
 8002ddc:	607b      	str	r3, [r7, #4]
	init_struct.Pin								= BTN_ENTER_Pin;
 8002dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002de2:	60bb      	str	r3, [r7, #8]
	DI_Struct_Initialisation(init_struct,ENTER);
 8002de4:	2300      	movs	r3, #0
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002df0:	f000 f820 	bl	8002e34 <DI_Struct_Initialisation>
	//----------------------------------------------------------------------------------------
	init_struct.Port							= BTN_UP_GPIO_Port;
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <DI_Init+0x74>)
 8002df6:	607b      	str	r3, [r7, #4]
	init_struct.Pin								= BTN_UP_Pin;
 8002df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dfc:	60bb      	str	r3, [r7, #8]
	DI_Struct_Initialisation(init_struct,UP);
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e0a:	f000 f813 	bl	8002e34 <DI_Struct_Initialisation>
	//----------------------------------------------------------------------------------------
	init_struct.Port							= BTN_DOWN_GPIO_Port;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <DI_Init+0x74>)
 8002e10:	607b      	str	r3, [r7, #4]
	init_struct.Pin								= BTN_DOWN_Pin;
 8002e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e16:	60bb      	str	r3, [r7, #8]
	DI_Struct_Initialisation(init_struct,DOWN);
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e24:	f000 f806 	bl	8002e34 <DI_Struct_Initialisation>
	//----------------------------------------------------------------------------------------

	
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	48000800 	.word	0x48000800

08002e34 <DI_Struct_Initialisation>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
static void DI_Struct_Initialisation (sDI init_struct, uint8_t input)
{
 8002e34:	b084      	sub	sp, #16
 8002e36:	b5b0      	push	{r4, r5, r7, lr}
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	f107 0410 	add.w	r4, r7, #16
 8002e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	init_struct.DiId = input;
 8002e42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002e46:	f887 3020 	strb.w	r3, [r7, #32]
	DI[input] = init_struct;
 8002e4a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e4e:	490f      	ldr	r1, [pc, #60]	; (8002e8c <DI_Struct_Initialisation+0x58>)
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	f107 0410 	add.w	r4, r7, #16
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	602b      	str	r3, [r5, #0]
	DI_Read(&(DI[input]));
 8002e68:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <DI_Struct_Initialisation+0x58>)
 8002e76:	4413      	add	r3, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f809 	bl	8002e90 <DI_Read>
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002e86:	b004      	add	sp, #16
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000b3c 	.word	0x20000b3c

08002e90 <DI_Read>:
/**
* @brief  Reading of actual states on defined Digital input
* @param	*di_input	Pointer to Digital input
*/
void DI_Read (sDI *di_input)
{	
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	di_input->Actual_Status = (eDI)HAL_GPIO_ReadPin(di_input->Port,di_input->Pin);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f003 ffc3 	bl	8006e30 <HAL_GPIO_ReadPin>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	461a      	mov	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	729a      	strb	r2, [r3, #10]
	if(di_input->Actual_Status != di_input->Main_Status)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7a9a      	ldrb	r2, [r3, #10]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	7a1b      	ldrb	r3, [r3, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d023      	beq.n	8002f06 <DI_Read+0x76>
	{
		di_input->Cnt_Filter++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7b9b      	ldrb	r3, [r3, #14]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	739a      	strb	r2, [r3, #14]
		if(di_input->Cnt_Filter > di_input->Filter_Value)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7b9a      	ldrb	r2, [r3, #14]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7bdb      	ldrb	r3, [r3, #15]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d923      	bls.n	8002f1e <DI_Read+0x8e>
		{
			di_input->Main_Status = di_input->Actual_Status;							
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7a9a      	ldrb	r2, [r3, #10]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	721a      	strb	r2, [r3, #8]
			di_input->Cnt_Filter = 0;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	739a      	strb	r2, [r3, #14]
			di_input->Cnt_DI = 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	819a      	strh	r2, [r3, #12]
			if (di_input->Main_Status != di_input->Last_Status)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7a1a      	ldrb	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7a5b      	ldrb	r3, [r3, #9]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d013      	beq.n	8002f1e <DI_Read+0x8e>
			{
				di_input->Last_Status = di_input->Main_Status;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7a1a      	ldrb	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	725a      	strb	r2, [r3, #9]
				OnChange(di_input);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f84c 	bl	8002f9c <OnChange>
		if(di_input->Cnt_DI!=0xFFFF)
		{
			di_input->Cnt_DI++;				
		}
	}
}
 8002f04:	e00b      	b.n	8002f1e <DI_Read+0x8e>
		if(di_input->Cnt_DI!=0xFFFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	899b      	ldrh	r3, [r3, #12]
 8002f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d005      	beq.n	8002f1e <DI_Read+0x8e>
			di_input->Cnt_DI++;				
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	899b      	ldrh	r3, [r3, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	819a      	strh	r2, [r3, #12]
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <DI_Get>:


// return s status of one specified digital input
eDI DI_Get(uint8_t input)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
	if (input < NUM_OF_INPUTS)
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d809      	bhi.n	8002f4c <DI_Get+0x24>
	{
		return DI[input].Main_Status;
 8002f38:	79fa      	ldrb	r2, [r7, #7]
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <DI_Get+0x34>)
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3308      	adds	r3, #8
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	e000      	b.n	8002f4e <DI_Get+0x26>
	}
	return eDI_LO;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000b3c 	.word	0x20000b3c

08002f60 <DI_Read_All>:



// sequentialy reads all digital inputs 
void DI_Read_All(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < NUM_OF_INPUTS; i++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	e00c      	b.n	8002f86 <DI_Read_All+0x26>
	{
		DI_Read(&DI[i]);
 8002f6c:	79fa      	ldrb	r2, [r7, #7]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <DI_Read_All+0x38>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff88 	bl	8002e90 <DI_Read>
	for (i = 0; i < NUM_OF_INPUTS; i++)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	3301      	adds	r3, #1
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d9ef      	bls.n	8002f6c <DI_Read_All+0xc>
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000b3c 	.word	0x20000b3c

08002f9c <OnChange>:


// notify about input change
static void OnChange(sDI *di)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	//APP_DiInputChanged(di->DiId,di->Main_Status);
	//GEST_DiInputChanged(di->DiId,di->Main_Status);
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fb4:	f000 fec7 	bl	8003d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fb8:	f000 f813 	bl	8002fe2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fbc:	f000 fa08 	bl	80033d0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002fc0:	f000 f8c8 	bl	8003154 <MX_CAN1_Init>
  MX_DMA_Init();
 8002fc4:	f000 f9e6 	bl	8003394 <MX_DMA_Init>
  MX_TIM1_Init();
 8002fc8:	f000 f942 	bl	8003250 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002fcc:	f000 f85c 	bl	8003088 <MX_ADC1_Init>
  MX_IWDG_Init();
 8002fd0:	f000 f8f6 	bl	80031c0 <MX_IWDG_Init>
  MX_RTC_Init();
 8002fd4:	f000 f912 	bl	80031fc <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  APP_Init();
 8002fd8:	f7ff f97c 	bl	80022d4 <APP_Init>
  APP_Start();
 8002fdc:	f7ff f9be 	bl	800235c <APP_Start>

  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <main+0x30>

08002fe2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b096      	sub	sp, #88	; 0x58
 8002fe6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	2244      	movs	r2, #68	; 0x44
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f006 fc7f 	bl	80098f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003004:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003008:	f003 ffe2 	bl	8006fd0 <HAL_PWREx_ControlVoltageScaling>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003012:	f000 fa73 	bl	80034fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003016:	2309      	movs	r3, #9
 8003018:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800301a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003020:	2301      	movs	r3, #1
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003024:	2302      	movs	r3, #2
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003028:	2303      	movs	r3, #3
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800302c:	2302      	movs	r3, #2
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 8003030:	2319      	movs	r3, #25
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003034:	2307      	movs	r3, #7
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003038:	2302      	movs	r3, #2
 800303a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800303c:	2302      	movs	r3, #2
 800303e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4618      	mov	r0, r3
 8003046:	f004 f819 	bl	800707c <HAL_RCC_OscConfig>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003050:	f000 fa54 	bl	80034fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003054:	230f      	movs	r3, #15
 8003056:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003058:	2303      	movs	r3, #3
 800305a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003064:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800306a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800306c:	463b      	mov	r3, r7
 800306e:	2103      	movs	r1, #3
 8003070:	4618      	mov	r0, r3
 8003072:	f004 fc23 	bl	80078bc <HAL_RCC_ClockConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800307c:	f000 fa3e 	bl	80034fc <Error_Handler>
  }
}
 8003080:	bf00      	nop
 8003082:	3758      	adds	r7, #88	; 0x58
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800308e:	463b      	mov	r3, r7
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]
 800309c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800309e:	4b2a      	ldr	r3, [pc, #168]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <MX_ADC1_Init+0xc4>)
 80030a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030be:	2204      	movs	r2, #4
 80030c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80030c2:	4b21      	ldr	r3, [pc, #132]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80030fa:	4b13      	ldr	r3, [pc, #76]	; (8003148 <MX_ADC1_Init+0xc0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003102:	4811      	ldr	r0, [pc, #68]	; (8003148 <MX_ADC1_Init+0xc0>)
 8003104:	f001 f8e0 	bl	80042c8 <HAL_ADC_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800310e:	f000 f9f5 	bl	80034fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <MX_ADC1_Init+0xc8>)
 8003114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003116:	2306      	movs	r3, #6
 8003118:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800311e:	237f      	movs	r3, #127	; 0x7f
 8003120:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003122:	2304      	movs	r3, #4
 8003124:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800312a:	463b      	mov	r3, r7
 800312c:	4619      	mov	r1, r3
 800312e:	4806      	ldr	r0, [pc, #24]	; (8003148 <MX_ADC1_Init+0xc0>)
 8003130:	f001 fcca 	bl	8004ac8 <HAL_ADC_ConfigChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800313a:	f000 f9df 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000b78 	.word	0x20000b78
 800314c:	50040000 	.word	0x50040000
 8003150:	3ef08000 	.word	0x3ef08000

08003154 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <MX_CAN1_Init+0x64>)
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <MX_CAN1_Init+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <MX_CAN1_Init+0x64>)
 8003160:	2205      	movs	r2, #5
 8003162:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <MX_CAN1_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <MX_CAN1_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_CAN1_Init+0x64>)
 8003172:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003176:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <MX_CAN1_Init+0x64>)
 800317a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800317e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <MX_CAN1_Init+0x64>)
 8003182:	2200      	movs	r2, #0
 8003184:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_CAN1_Init+0x64>)
 8003188:	2201      	movs	r2, #1
 800318a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <MX_CAN1_Init+0x64>)
 800318e:	2200      	movs	r2, #0
 8003190:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <MX_CAN1_Init+0x64>)
 8003194:	2201      	movs	r2, #1
 8003196:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <MX_CAN1_Init+0x64>)
 800319a:	2200      	movs	r2, #0
 800319c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_CAN1_Init+0x64>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80031a4:	4804      	ldr	r0, [pc, #16]	; (80031b8 <MX_CAN1_Init+0x64>)
 80031a6:	f002 fb3f 	bl	8005828 <HAL_CAN_Init>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80031b0:	f000 f9a4 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000c24 	.word	0x20000c24
 80031bc:	40006400 	.word	0x40006400

080031c0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <MX_IWDG_Init+0x34>)
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <MX_IWDG_Init+0x38>)
 80031c8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_IWDG_Init+0x34>)
 80031cc:	2206      	movs	r2, #6
 80031ce:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <MX_IWDG_Init+0x34>)
 80031d2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80031d6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 375;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <MX_IWDG_Init+0x34>)
 80031da:	f240 1277 	movw	r2, #375	; 0x177
 80031de:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <MX_IWDG_Init+0x34>)
 80031e2:	f003 fe87 	bl	8006ef4 <HAL_IWDG_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80031ec:	f000 f986 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000c4c 	.word	0x20000c4c
 80031f8:	40003000 	.word	0x40003000

080031fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_RTC_Init+0x4c>)
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <MX_RTC_Init+0x50>)
 8003204:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_RTC_Init+0x4c>)
 8003208:	2200      	movs	r2, #0
 800320a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 124;
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_RTC_Init+0x4c>)
 800320e:	227c      	movs	r2, #124	; 0x7c
 8003210:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1999;
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <MX_RTC_Init+0x4c>)
 8003214:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003218:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <MX_RTC_Init+0x4c>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <MX_RTC_Init+0x4c>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_RTC_Init+0x4c>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_RTC_Init+0x4c>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003232:	4805      	ldr	r0, [pc, #20]	; (8003248 <MX_RTC_Init+0x4c>)
 8003234:	f005 f81a 	bl	800826c <HAL_RTC_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800323e:	f000 f95d 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000c5c 	.word	0x20000c5c
 800324c:	40002800 	.word	0x40002800

08003250 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b096      	sub	sp, #88	; 0x58
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003256:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	222c      	movs	r2, #44	; 0x2c
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f006 fb39 	bl	80098f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003282:	4b42      	ldr	r3, [pc, #264]	; (800338c <MX_TIM1_Init+0x13c>)
 8003284:	4a42      	ldr	r2, [pc, #264]	; (8003390 <MX_TIM1_Init+0x140>)
 8003286:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8003288:	4b40      	ldr	r3, [pc, #256]	; (800338c <MX_TIM1_Init+0x13c>)
 800328a:	2231      	movs	r2, #49	; 0x31
 800328c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <MX_TIM1_Init+0x13c>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <MX_TIM1_Init+0x13c>)
 8003296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800329a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <MX_TIM1_Init+0x13c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <MX_TIM1_Init+0x13c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a8:	4b38      	ldr	r3, [pc, #224]	; (800338c <MX_TIM1_Init+0x13c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032ae:	4837      	ldr	r0, [pc, #220]	; (800338c <MX_TIM1_Init+0x13c>)
 80032b0:	f005 fb0f 	bl	80088d2 <HAL_TIM_PWM_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80032ba:	f000 f91f 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 80032c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032d0:	4619      	mov	r1, r3
 80032d2:	482e      	ldr	r0, [pc, #184]	; (800338c <MX_TIM1_Init+0x13c>)
 80032d4:	f006 f8d6 	bl	8009484 <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80032de:	f000 f90d 	bl	80034fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e2:	2360      	movs	r3, #96	; 0x60
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 80032e6:	2332      	movs	r3, #50	; 0x32
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ea:	2300      	movs	r3, #0
 80032ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032ee:	2300      	movs	r3, #0
 80032f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80032f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003304:	2200      	movs	r2, #0
 8003306:	4619      	mov	r1, r3
 8003308:	4820      	ldr	r0, [pc, #128]	; (800338c <MX_TIM1_Init+0x13c>)
 800330a:	f005 fc9f 	bl	8008c4c <HAL_TIM_PWM_ConfigChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8003314:	f000 f8f2 	bl	80034fc <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003324:	2204      	movs	r2, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4818      	ldr	r0, [pc, #96]	; (800338c <MX_TIM1_Init+0x13c>)
 800332a:	f005 fc8f 	bl	8008c4c <HAL_TIM_PWM_ConfigChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8003334:	f000 f8e2 	bl	80034fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800334c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	4619      	mov	r1, r3
 800336c:	4807      	ldr	r0, [pc, #28]	; (800338c <MX_TIM1_Init+0x13c>)
 800336e:	f006 f8ef 	bl	8009550 <HAL_TIMEx_ConfigBreakDeadTime>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003378:	f000 f8c0 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <MX_TIM1_Init+0x13c>)
 800337e:	f000 fb43 	bl	8003a08 <HAL_TIM_MspPostInit>

}
 8003382:	bf00      	nop
 8003384:	3758      	adds	r7, #88	; 0x58
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000c80 	.word	0x20000c80
 8003390:	40012c00 	.word	0x40012c00

08003394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_DMA_Init+0x38>)
 800339c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <MX_DMA_Init+0x38>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6493      	str	r3, [r2, #72]	; 0x48
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_DMA_Init+0x38>)
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	200b      	movs	r0, #11
 80033b8:	f003 f953 	bl	8006662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033bc:	200b      	movs	r0, #11
 80033be:	f003 f96c 	bl	800669a <HAL_NVIC_EnableIRQ>

}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e6:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <MX_GPIO_Init+0x120>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ea:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <MX_GPIO_Init+0x120>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f2:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <MX_GPIO_Init+0x120>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033fe:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <MX_GPIO_Init+0x120>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	4a3b      	ldr	r2, [pc, #236]	; (80034f0 <MX_GPIO_Init+0x120>)
 8003404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <MX_GPIO_Init+0x120>)
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <MX_GPIO_Init+0x120>)
 8003418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341a:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <MX_GPIO_Init+0x120>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <MX_GPIO_Init+0x120>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <MX_GPIO_Init+0x120>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <MX_GPIO_Init+0x120>)
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <MX_GPIO_Init+0x120>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8003446:	2200      	movs	r2, #0
 8003448:	f240 41ff 	movw	r1, #1279	; 0x4ff
 800344c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003450:	f003 fd06 	bl	8006e60 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |AC_RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_W_Pin|E_Pin|LED_Life_Pin|LED_Error_Pin
 8003454:	2200      	movs	r2, #0
 8003456:	f24f 0106 	movw	r1, #61446	; 0xf006
 800345a:	4826      	ldr	r0, [pc, #152]	; (80034f4 <MX_GPIO_Init+0x124>)
 800345c:	f003 fd00 	bl	8006e60 <HAL_GPIO_WritePin>
                          |RS_Pin|LED_Status_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_ENTER_Pin BTN_UP_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = BTN_ENTER_Pin|BTN_UP_Pin|BTN_DOWN_Pin;
 8003460:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4820      	ldr	r0, [pc, #128]	; (80034f8 <MX_GPIO_Init+0x128>)
 8003476:	f003 fb61 	bl	8006b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           AC_RELAY_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800347a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800347e:	617b      	str	r3, [r7, #20]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |AC_RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003480:	2301      	movs	r3, #1
 8003482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003488:	2300      	movs	r3, #0
 800348a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4619      	mov	r1, r3
 8003492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003496:	f003 fb51 	bl	8006b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : R_W_Pin E_Pin LED_Life_Pin LED_Error_Pin
                           RS_Pin LED_Status_Pin */
  GPIO_InitStruct.Pin = R_W_Pin|E_Pin|LED_Life_Pin|LED_Error_Pin
 800349a:	f24f 0306 	movw	r3, #61446	; 0xf006
 800349e:	617b      	str	r3, [r7, #20]
                          |RS_Pin|LED_Status_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a0:	2301      	movs	r3, #1
 80034a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4619      	mov	r1, r3
 80034b2:	4810      	ldr	r0, [pc, #64]	; (80034f4 <MX_GPIO_Init+0x124>)
 80034b4:	f003 fb42 	bl	8006b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ELM1_Pin */
  GPIO_InitStruct.Pin = ELM1_Pin;
 80034b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ELM1_GPIO_Port, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d2:	f003 fb33 	bl	8006b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2104      	movs	r1, #4
 80034da:	2017      	movs	r0, #23
 80034dc:	f003 f8c1 	bl	8006662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034e0:	2017      	movs	r0, #23
 80034e2:	f003 f8da 	bl	800669a <HAL_NVIC_EnableIRQ>

}
 80034e6:	bf00      	nop
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	48000400 	.word	0x48000400
 80034f8:	48000800 	.word	0x48000800

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>
	...

08003508 <Scheduler_Init>:
**********************************************************************	
	* @brief	Initialisation timimg struct
***********************************************************************
*/
void Scheduler_Init (void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
		Timer_1ms.timer_limit = 1;
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <Scheduler_Init+0x44>)
 800350e:	2201      	movs	r2, #1
 8003510:	809a      	strh	r2, [r3, #4]
		Timer_5ms.timer_limit = 5;
 8003512:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <Scheduler_Init+0x48>)
 8003514:	2205      	movs	r2, #5
 8003516:	809a      	strh	r2, [r3, #4]
		Timer_10ms.timer_limit = 10;
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <Scheduler_Init+0x4c>)
 800351a:	220a      	movs	r2, #10
 800351c:	809a      	strh	r2, [r3, #4]
		Timer_50ms.timer_limit = 50;
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <Scheduler_Init+0x50>)
 8003520:	2232      	movs	r2, #50	; 0x32
 8003522:	809a      	strh	r2, [r3, #4]
		Timer_100ms.timer_limit = 100;
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <Scheduler_Init+0x54>)
 8003526:	2264      	movs	r2, #100	; 0x64
 8003528:	809a      	strh	r2, [r3, #4]
		Timer_250ms.timer_limit = 250;
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <Scheduler_Init+0x58>)
 800352c:	22fa      	movs	r2, #250	; 0xfa
 800352e:	809a      	strh	r2, [r3, #4]
		Timer_500ms.timer_limit = 500;
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <Scheduler_Init+0x5c>)
 8003532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003536:	809a      	strh	r2, [r3, #4]
		Timer_1s.timer_limit = 1000;
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <Scheduler_Init+0x60>)
 800353a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800353e:	809a      	strh	r2, [r3, #4]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000ccc 	.word	0x20000ccc
 8003550:	20000cd4 	.word	0x20000cd4
 8003554:	20000cdc 	.word	0x20000cdc
 8003558:	20000ce4 	.word	0x20000ce4
 800355c:	20000cec 	.word	0x20000cec
 8003560:	20000cf4 	.word	0x20000cf4
 8003564:	20000cfc 	.word	0x20000cfc
 8003568:	20000d04 	.word	0x20000d04

0800356c <Scheduler_Update_1ms>:
**********************************************************************	
	* @brief	Timer control. Calling of all defined timers
***********************************************************************
*/
void Scheduler_Update_1ms (void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
	Timer_Increment(&Timer_1ms);
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <Scheduler_Update_1ms+0x38>)
 8003572:	f000 f827 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_5ms);
 8003576:	480c      	ldr	r0, [pc, #48]	; (80035a8 <Scheduler_Update_1ms+0x3c>)
 8003578:	f000 f824 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_10ms);
 800357c:	480b      	ldr	r0, [pc, #44]	; (80035ac <Scheduler_Update_1ms+0x40>)
 800357e:	f000 f821 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_50ms);
 8003582:	480b      	ldr	r0, [pc, #44]	; (80035b0 <Scheduler_Update_1ms+0x44>)
 8003584:	f000 f81e 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_100ms);
 8003588:	480a      	ldr	r0, [pc, #40]	; (80035b4 <Scheduler_Update_1ms+0x48>)
 800358a:	f000 f81b 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_250ms);
 800358e:	480a      	ldr	r0, [pc, #40]	; (80035b8 <Scheduler_Update_1ms+0x4c>)
 8003590:	f000 f818 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_500ms);
 8003594:	4809      	ldr	r0, [pc, #36]	; (80035bc <Scheduler_Update_1ms+0x50>)
 8003596:	f000 f815 	bl	80035c4 <Timer_Increment>
	Timer_Increment(&Timer_1s);
 800359a:	4809      	ldr	r0, [pc, #36]	; (80035c0 <Scheduler_Update_1ms+0x54>)
 800359c:	f000 f812 	bl	80035c4 <Timer_Increment>
	
}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000ccc 	.word	0x20000ccc
 80035a8:	20000cd4 	.word	0x20000cd4
 80035ac:	20000cdc 	.word	0x20000cdc
 80035b0:	20000ce4 	.word	0x20000ce4
 80035b4:	20000cec 	.word	0x20000cec
 80035b8:	20000cf4 	.word	0x20000cf4
 80035bc:	20000cfc 	.word	0x20000cfc
 80035c0:	20000d04 	.word	0x20000d04

080035c4 <Timer_Increment>:
	* @brief	Incrementing of all counters and setting flags , where is condition met!
	* @param	timer: Pointer to specific timer	
***********************************************************************
*/
inline static void Timer_Increment (sTimer *timer)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	timer->timer_cnt++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	885b      	ldrh	r3, [r3, #2]
 80035d0:	3301      	adds	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	805a      	strh	r2, [r3, #2]
	if(timer->timer_cnt >= timer->timer_limit)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	885a      	ldrh	r2, [r3, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	889b      	ldrh	r3, [r3, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d305      	bcc.n	80035f0 <Timer_Increment+0x2c>
	{
		timer->flag = eFLAG_REACHED;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
		timer->timer_cnt = 0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	805a      	strh	r2, [r3, #2]
	}
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <Scheduler_Check_Flag>:
	* @brief Checking flags in structures and call specific tasks	
***********************************************************************
*/

void Scheduler_Check_Flag(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	if(Timer_1ms.flag)
 8003600:	4b24      	ldr	r3, [pc, #144]	; (8003694 <Scheduler_Check_Flag+0x98>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <Scheduler_Check_Flag+0x16>
	{
		Timer_Task_1ms();
 8003608:	f000 f854 	bl	80036b4 <Timer_Task_1ms>
		Timer_1ms.flag = eFLAG_NOT_YET;
 800360c:	4b21      	ldr	r3, [pc, #132]	; (8003694 <Scheduler_Check_Flag+0x98>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_5ms.flag)
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <Scheduler_Check_Flag+0x9c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <Scheduler_Check_Flag+0x28>
	{
		Timer_Task_5ms();
 800361a:	f000 f851 	bl	80036c0 <Timer_Task_5ms>
		Timer_5ms.flag = eFLAG_NOT_YET;
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <Scheduler_Check_Flag+0x9c>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_10ms.flag)
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <Scheduler_Check_Flag+0xa0>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <Scheduler_Check_Flag+0x3a>
	{
		Timer_Task_10ms();
 800362c:	f000 f84e 	bl	80036cc <Timer_Task_10ms>
		Timer_10ms.flag = eFLAG_NOT_YET;
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <Scheduler_Check_Flag+0xa0>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_50ms.flag)
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <Scheduler_Check_Flag+0xa4>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <Scheduler_Check_Flag+0x4c>
	{
		Timer_Task_50ms();
 800363e:	f000 f84f 	bl	80036e0 <Timer_Task_50ms>
		Timer_50ms.flag = eFLAG_NOT_YET;
 8003642:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <Scheduler_Check_Flag+0xa4>)
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_100ms.flag)
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <Scheduler_Check_Flag+0xa8>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <Scheduler_Check_Flag+0x5e>
	{
		Timer_Task_100ms();
 8003650:	f000 f84d 	bl	80036ee <Timer_Task_100ms>
		Timer_100ms.flag = eFLAG_NOT_YET;
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <Scheduler_Check_Flag+0xa8>)
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_250ms.flag)
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <Scheduler_Check_Flag+0xac>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <Scheduler_Check_Flag+0x70>
	{
		Timer_Task_250ms();
 8003662:	f000 f84b 	bl	80036fc <Timer_Task_250ms>
		Timer_250ms.flag = eFLAG_NOT_YET;
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <Scheduler_Check_Flag+0xac>)
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_500ms.flag)
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <Scheduler_Check_Flag+0xb0>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <Scheduler_Check_Flag+0x82>
	{
		Timer_Task_500ms();
 8003674:	f000 f84c 	bl	8003710 <Timer_Task_500ms>
		Timer_500ms.flag = eFLAG_NOT_YET;
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <Scheduler_Check_Flag+0xb0>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
	}
	
	if(Timer_1s.flag)
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <Scheduler_Check_Flag+0xb4>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <Scheduler_Check_Flag+0x94>
	{
		Timer_Task_1s();
 8003686:	f000 f84a 	bl	800371e <Timer_Task_1s>
		Timer_1s.flag = eFLAG_NOT_YET;
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <Scheduler_Check_Flag+0xb4>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
	}	
}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000ccc 	.word	0x20000ccc
 8003698:	20000cd4 	.word	0x20000cd4
 800369c:	20000cdc 	.word	0x20000cdc
 80036a0:	20000ce4 	.word	0x20000ce4
 80036a4:	20000cec 	.word	0x20000cec
 80036a8:	20000cf4 	.word	0x20000cf4
 80036ac:	20000cfc 	.word	0x20000cfc
 80036b0:	20000d04 	.word	0x20000d04

080036b4 <Timer_Task_1ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1ms(void)
{	
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
	DI_Read_All();
 80036b8:	f7ff fc52 	bl	8002f60 <DI_Read_All>
}
 80036bc:	bf00      	nop
 80036be:	bd80      	pop	{r7, pc}

080036c0 <Timer_Task_5ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_5ms(void)
{	
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	MCAN_Transmit();
 80036c4:	f7fd ff62 	bl	800158c <MCAN_Transmit>
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}

080036cc <Timer_Task_10ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_10ms(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	MCAN_Update_10ms();
 80036d0:	f7fd fed0 	bl	8001474 <MCAN_Update_10ms>
	COM_Update_10ms();
 80036d4:	f7fd fb9c 	bl	8000e10 <COM_Update_10ms>
	UI_Update_10ms();
 80036d8:	f7fe f982 	bl	80019e0 <UI_Update_10ms>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <Timer_Task_50ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_50ms(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
	//LC_Update_50ms();
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <Timer_Task_100ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_100ms(void)
{
 80036ee:	b480      	push	{r7}
 80036f0:	af00      	add	r7, sp, #0

	//ADC_StartConversion();
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <Timer_Task_250ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_250ms(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	EVSE_Update_100ms();
 8003700:	f7fe fff6 	bl	80026f0 <EVSE_Update_100ms>
	APP_Update_100ms();
 8003704:	f7fe fe52 	bl	80023ac <APP_Update_100ms>
	LCD_Refresf_Display();
 8003708:	f7ff fa42 	bl	8002b90 <LCD_Refresf_Display>
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}

08003710 <Timer_Task_500ms>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_500ms(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0

}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <Timer_Task_1s>:
	* @param
	* @retval
***********************************************************************
*/
static void Timer_Task_1s(void)
{	
 800371e:	b580      	push	{r7, lr}
 8003720:	af00      	add	r7, sp, #0
	WDG_Refresh();
 8003722:	f7fe fdcd 	bl	80022c0 <WDG_Refresh>

	ELM_Update_1s();
 8003726:	f7fd fca3 	bl	8001070 <ELM_Update_1s>

}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_MspInit+0x44>)
 8003738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373a:	4a0e      	ldr	r2, [pc, #56]	; (8003774 <HAL_MspInit+0x44>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6613      	str	r3, [r2, #96]	; 0x60
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <HAL_MspInit+0x44>)
 8003744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_MspInit+0x44>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	4a08      	ldr	r2, [pc, #32]	; (8003774 <HAL_MspInit+0x44>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6593      	str	r3, [r2, #88]	; 0x58
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_MspInit+0x44>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000

08003778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b0a0      	sub	sp, #128	; 0x80
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	225c      	movs	r2, #92	; 0x5c
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f006 f8ab 	bl	80098f4 <memset>
  if(hadc->Instance==ADC1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3e      	ldr	r2, [pc, #248]	; (800389c <HAL_ADC_MspInit+0x124>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d175      	bne.n	8003894 <HAL_ADC_MspInit+0x11c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80037ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037b2:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80037b4:	2303      	movs	r3, #3
 80037b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 80037b8:	2302      	movs	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 26;
 80037bc:	231a      	movs	r3, #26
 80037be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80037c0:	2307      	movs	r3, #7
 80037c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80037c4:	2302      	movs	r3, #2
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80037c8:	2302      	movs	r3, #2
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80037cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fa3e 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80037e2:	f7ff fe8b 	bl	80034fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_ADC_MspInit+0x128>)
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	4a2d      	ldr	r2, [pc, #180]	; (80038a0 <HAL_ADC_MspInit+0x128>)
 80037ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_ADC_MspInit+0x128>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_ADC_MspInit+0x128>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	4a27      	ldr	r2, [pc, #156]	; (80038a0 <HAL_ADC_MspInit+0x128>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_ADC_MspInit+0x128>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = PILOT_ADC_IN_Pin;
 8003816:	2301      	movs	r3, #1
 8003818:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800381a:	230b      	movs	r3, #11
 800381c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381e:	2300      	movs	r3, #0
 8003820:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(PILOT_ADC_IN_GPIO_Port, &GPIO_InitStruct);
 8003822:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003826:	4619      	mov	r1, r3
 8003828:	481e      	ldr	r0, [pc, #120]	; (80038a4 <HAL_ADC_MspInit+0x12c>)
 800382a:	f003 f987 	bl	8006b3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_ADC_MspInit+0x134>)
 8003832:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003848:	2280      	movs	r2, #128	; 0x80
 800384a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 800384e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003852:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003868:	480f      	ldr	r0, [pc, #60]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 800386a:	f002 ff31 	bl	80066d0 <HAL_DMA_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8003874:	f7ff fe42 	bl	80034fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 800387c:	64da      	str	r2, [r3, #76]	; 0x4c
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <HAL_ADC_MspInit+0x130>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	2012      	movs	r0, #18
 800388a:	f002 feea 	bl	8006662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800388e:	2012      	movs	r0, #18
 8003890:	f002 ff03 	bl	800669a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003894:	bf00      	nop
 8003896:	3780      	adds	r7, #128	; 0x80
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	50040000 	.word	0x50040000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	48000400 	.word	0x48000400
 80038a8:	20000bdc 	.word	0x20000bdc
 80038ac:	40020008 	.word	0x40020008

080038b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a24      	ldr	r2, [pc, #144]	; (8003960 <HAL_CAN_MspInit+0xb0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d141      	bne.n	8003956 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_CAN_MspInit+0xb4>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	4a23      	ldr	r2, [pc, #140]	; (8003964 <HAL_CAN_MspInit+0xb4>)
 80038d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
 80038de:	4b21      	ldr	r3, [pc, #132]	; (8003964 <HAL_CAN_MspInit+0xb4>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_CAN_MspInit+0xb4>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <HAL_CAN_MspInit+0xb4>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f6:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_CAN_MspInit+0xb4>)
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003902:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003914:	2309      	movs	r3, #9
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003922:	f003 f90b 	bl	8006b3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	2013      	movs	r0, #19
 800392c:	f002 fe99 	bl	8006662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003930:	2013      	movs	r0, #19
 8003932:	f002 feb2 	bl	800669a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2100      	movs	r1, #0
 800393a:	2014      	movs	r0, #20
 800393c:	f002 fe91 	bl	8006662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003940:	2014      	movs	r0, #20
 8003942:	f002 feaa 	bl	800669a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003946:	2200      	movs	r2, #0
 8003948:	2100      	movs	r1, #0
 800394a:	2015      	movs	r0, #21
 800394c:	f002 fe89 	bl	8006662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003950:	2015      	movs	r0, #21
 8003952:	f002 fea2 	bl	800669a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40006400 	.word	0x40006400
 8003964:	40021000 	.word	0x40021000

08003968 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b09a      	sub	sp, #104	; 0x68
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003970:	f107 030c 	add.w	r3, r7, #12
 8003974:	225c      	movs	r2, #92	; 0x5c
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f005 ffbb 	bl	80098f4 <memset>
  if(hrtc->Instance==RTC)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <HAL_RTC_MspInit+0x58>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d117      	bne.n	80039b8 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800398e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003992:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	4618      	mov	r0, r3
 800399a:	f004 f95d 	bl	8007c58 <HAL_RCCEx_PeriphCLKConfig>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80039a4:	f7ff fdaa 	bl	80034fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_RTC_MspInit+0x5c>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <HAL_RTC_MspInit+0x5c>)
 80039b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039b8:	bf00      	nop
 80039ba:	3768      	adds	r7, #104	; 0x68
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40002800 	.word	0x40002800
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <HAL_TIM_PWM_MspInit+0x38>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10b      	bne.n	80039f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80039dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80039e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039e4:	6613      	str	r3, [r2, #96]	; 0x60
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_TIM_PWM_MspInit+0x3c>)
 80039e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <HAL_TIM_MspPostInit+0x68>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d11d      	bne.n	8003a66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2a:	4b12      	ldr	r3, [pc, #72]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	4a11      	ldr	r2, [pc, #68]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a36:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_TIM_MspPostInit+0x6c>)
 8003a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a62:	f003 f86b 	bl	8006b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a66:	bf00      	nop
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40021000 	.word	0x40021000

08003a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <NMI_Handler+0x4>

08003a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a82:	e7fe      	b.n	8003a82 <HardFault_Handler+0x4>

08003a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a88:	e7fe      	b.n	8003a88 <MemManage_Handler+0x4>

08003a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <BusFault_Handler+0x4>

08003a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <UsageFault_Handler+0x4>

08003a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac4:	f000 f994 	bl	8003df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Scheduler_Update_1ms();
 8003ac8:	f7ff fd50 	bl	800356c <Scheduler_Update_1ms>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <DMA1_Channel1_IRQHandler+0x10>)
 8003ad6:	f002 ff51 	bl	800697c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000bdc 	.word	0x20000bdc

08003ae4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <ADC1_IRQHandler+0x10>)
 8003aea:	f000 fe1a 	bl	8004722 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000b78 	.word	0x20000b78

08003af8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <CAN1_TX_IRQHandler+0x10>)
 8003afe:	f002 faaf 	bl	8006060 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000c24 	.word	0x20000c24

08003b0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <CAN1_RX0_IRQHandler+0x10>)
 8003b12:	f002 faa5 	bl	8006060 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000c24 	.word	0x20000c24

08003b20 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <CAN1_RX1_IRQHandler+0x10>)
 8003b26:	f002 fa9b 	bl	8006060 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000c24 	.word	0x20000c24

08003b34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ELM1_Pin);
 8003b38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b3c:	f003 f9c2 	bl	8006ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	return 1;
 8003b48:	2301      	movs	r3, #1
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <_kill>:

int _kill(int pid, int sig)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b5e:	f005 fd6f 	bl	8009640 <__errno>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2216      	movs	r2, #22
 8003b66:	601a      	str	r2, [r3, #0]
	return -1;
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_exit>:

void _exit (int status)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ffe7 	bl	8003b54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b86:	e7fe      	b.n	8003b86 <_exit+0x12>

08003b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e00a      	b.n	8003bb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b9a:	f3af 8000 	nop.w
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	60ba      	str	r2, [r7, #8]
 8003ba6:	b2ca      	uxtb	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3301      	adds	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	dbf0      	blt.n	8003b9a <_read+0x12>
	}

return len;
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e009      	b.n	8003be8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	60ba      	str	r2, [r7, #8]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	3301      	adds	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dbf1      	blt.n	8003bd4 <_write+0x12>
	}
	return len;
 8003bf0:	687b      	ldr	r3, [r7, #4]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_close>:

int _close(int file)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	return -1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c22:	605a      	str	r2, [r3, #4]
	return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_isatty>:

int _isatty(int file)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
	return 1;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
	return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <_sbrk+0x5c>)
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <_sbrk+0x60>)
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <_sbrk+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <_sbrk+0x64>)
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <_sbrk+0x68>)
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <_sbrk+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d207      	bcs.n	8003ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c94:	f005 fcd4 	bl	8009640 <__errno>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	220c      	movs	r2, #12
 8003c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca2:	e009      	b.n	8003cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <_sbrk+0x64>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <_sbrk+0x64>)
 8003cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20010000 	.word	0x20010000
 8003cc4:	00000400 	.word	0x00000400
 8003cc8:	20000d10 	.word	0x20000d10
 8003ccc:	20000d50 	.word	0x20000d50

08003cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <SystemInit+0x20>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <SystemInit+0x20>)
 8003cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cf8:	f7ff ffea 	bl	8003cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cfc:	480c      	ldr	r0, [pc, #48]	; (8003d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cfe:	490d      	ldr	r1, [pc, #52]	; (8003d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <LoopForever+0xe>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d04:	e002      	b.n	8003d0c <LoopCopyDataInit>

08003d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0a:	3304      	adds	r3, #4

08003d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d10:	d3f9      	bcc.n	8003d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d14:	4c0a      	ldr	r4, [pc, #40]	; (8003d40 <LoopForever+0x16>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d18:	e001      	b.n	8003d1e <LoopFillZerobss>

08003d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d1c:	3204      	adds	r2, #4

08003d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d20:	d3fb      	bcc.n	8003d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d22:	f005 fc93 	bl	800964c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d26:	f7ff f943 	bl	8002fb0 <main>

08003d2a <LoopForever>:

LoopForever:
    b LoopForever
 8003d2a:	e7fe      	b.n	8003d2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d34:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003d38:	0800c0dc 	.word	0x0800c0dc
  ldr r2, =_sbss
 8003d3c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003d40:	20000d50 	.word	0x20000d50

08003d44 <CAN1_SCE_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d44:	e7fe      	b.n	8003d44 <CAN1_SCE_IRQHandler>

08003d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d50:	2003      	movs	r0, #3
 8003d52:	f002 fc7b 	bl	800664c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d56:	2000      	movs	r0, #0
 8003d58:	f000 f80e 	bl	8003d78 <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	71fb      	strb	r3, [r7, #7]
 8003d66:	e001      	b.n	8003d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d68:	f7ff fce2 	bl	8003730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_InitTick+0x6c>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d023      	beq.n	8003dd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d8c:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <HAL_InitTick+0x70>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_InitTick+0x6c>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fc87 	bl	80066b6 <HAL_SYSTICK_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b0f      	cmp	r3, #15
 8003db2:	d809      	bhi.n	8003dc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db4:	2200      	movs	r2, #0
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbc:	f002 fc51 	bl	8006662 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_InitTick+0x74>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e007      	b.n	8003dd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]
 8003dcc:	e004      	b.n	8003dd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
 8003dd2:	e001      	b.n	8003dd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000010c 	.word	0x2000010c
 8003de8:	20000104 	.word	0x20000104
 8003dec:	20000108 	.word	0x20000108

08003df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_IncTick+0x20>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_IncTick+0x24>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4413      	add	r3, r2
 8003e00:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <HAL_IncTick+0x24>)
 8003e02:	6013      	str	r3, [r2, #0]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	2000010c 	.word	0x2000010c
 8003e14:	20000d14 	.word	0x20000d14

08003e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_GetTick+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000d14 	.word	0x20000d14

08003e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e38:	f7ff ffee 	bl	8003e18 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d005      	beq.n	8003e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <HAL_Delay+0x44>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e56:	bf00      	nop
 8003e58:	f7ff ffde 	bl	8003e18 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d8f7      	bhi.n	8003e58 <HAL_Delay+0x28>
  {
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000010c 	.word	0x2000010c

08003e78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3360      	adds	r3, #96	; 0x60
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <LL_ADC_SetOffset+0x44>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	03fff000 	.word	0x03fff000

08003f28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3360      	adds	r3, #96	; 0x60
 8003f36:	461a      	mov	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3360      	adds	r3, #96	; 0x60
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3330      	adds	r3, #48	; 0x30
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	4413      	add	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	211f      	movs	r1, #31
 8003fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	f003 011f 	and.w	r1, r3, #31
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 031f 	and.w	r3, r3, #31
 8003ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800402e:	b480      	push	{r7}
 8004030:	b087      	sub	sp, #28
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3314      	adds	r3, #20
 800403e:	461a      	mov	r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	0e5b      	lsrs	r3, r3, #25
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	4413      	add	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	0d1b      	lsrs	r3, r3, #20
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2107      	movs	r1, #7
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	0d1b      	lsrs	r3, r3, #20
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	431a      	orrs	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	43db      	mvns	r3, r3
 800409e:	401a      	ands	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f003 0318 	and.w	r3, r3, #24
 80040a6:	4908      	ldr	r1, [pc, #32]	; (80040c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80040a8:	40d9      	lsrs	r1, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	400b      	ands	r3, r1
 80040ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	0007ffff 	.word	0x0007ffff

080040cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80040dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6093      	str	r3, [r2, #8]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004104:	d101      	bne.n	800410a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800412c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004154:	d101      	bne.n	800415a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800417c:	f043 0201 	orr.w	r2, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041a4:	f043 0202 	orr.w	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <LL_ADC_IsEnabled+0x18>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <LL_ADC_IsEnabled+0x1a>
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d101      	bne.n	80041f6 <LL_ADC_IsDisableOngoing+0x18>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <LL_ADC_IsDisableOngoing+0x1a>
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004214:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004218:	f043 0204 	orr.w	r2, r3, #4
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800423c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004240:	f043 0210 	orr.w	r2, r3, #16
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d101      	bne.n	800426c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800428a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d101      	bne.n	80042ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e12c      	b.n	800453c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff fa41 	bl	8003778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fef1 	bl	80040f0 <LL_ADC_IsDeepPowerDownEnabled>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d004      	beq.n	800431e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fed7 	bl	80040cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff0c 	bl	8004140 <LL_ADC_IsInternalRegulatorEnabled>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d115      	bne.n	800435a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fef0 	bl	8004118 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004338:	4b82      	ldr	r3, [pc, #520]	; (8004544 <HAL_ADC_Init+0x27c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	4a82      	ldr	r2, [pc, #520]	; (8004548 <HAL_ADC_Init+0x280>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800434c:	e002      	b.n	8004354 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3b01      	subs	r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f9      	bne.n	800434e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff feee 	bl	8004140 <LL_ADC_IsInternalRegulatorEnabled>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	f043 0210 	orr.w	r2, r3, #16
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff62 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8004390:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80c5 	bne.w	800452a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 80c1 	bne.w	800452a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043b0:	f043 0202 	orr.w	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fefb 	bl	80041b8 <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c8:	4860      	ldr	r0, [pc, #384]	; (800454c <HAL_ADC_Init+0x284>)
 80043ca:	f7ff fef5 	bl	80041b8 <LL_ADC_IsEnabled>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	485d      	ldr	r0, [pc, #372]	; (8004550 <HAL_ADC_Init+0x288>)
 80043dc:	f7ff fd4c 	bl	8003e78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7e5b      	ldrb	r3, [r3, #25]
 80043e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80043f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80043f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004400:	4313      	orrs	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d106      	bne.n	800441c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	3b01      	subs	r3, #1
 8004414:	045b      	lsls	r3, r3, #17
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	4b45      	ldr	r3, [pc, #276]	; (8004554 <HAL_ADC_Init+0x28c>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6812      	ldr	r2, [r2, #0]
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	430b      	orrs	r3, r1
 800444a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff feff 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8004456:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff20 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 8004462:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d13d      	bne.n	80044e6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d13a      	bne.n	80044e6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004474:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800447c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448c:	f023 0302 	bic.w	r3, r3, #2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	430b      	orrs	r3, r1
 8004498:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d118      	bne.n	80044d6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044ae:	f023 0304 	bic.w	r3, r3, #4
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044c0:	4311      	orrs	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c6:	430a      	orrs	r2, r1
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	611a      	str	r2, [r3, #16]
 80044d4:	e007      	b.n	80044e6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10c      	bne.n	8004508 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	f023 010f 	bic.w	r1, r3, #15
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	1e5a      	subs	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
 8004506:	e007      	b.n	8004518 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 020f 	bic.w	r2, r2, #15
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	f023 0303 	bic.w	r3, r3, #3
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
 8004528:	e007      	b.n	800453a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f043 0210 	orr.w	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800453a:	7ffb      	ldrb	r3, [r7, #31]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000104 	.word	0x20000104
 8004548:	053e2d63 	.word	0x053e2d63
 800454c:	50040000 	.word	0x50040000
 8004550:	50040300 	.word	0x50040300
 8004554:	fff0c007 	.word	0xfff0c007

08004558 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fe73 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d167      	bne.n	8004644 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_ADC_Start_DMA+0x2a>
 800457e:	2302      	movs	r3, #2
 8004580:	e063      	b.n	800464a <HAL_ADC_Start_DMA+0xf2>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 ff38 	bl	8005400 <ADC_Enable>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d14f      	bne.n	800463a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	f023 0206 	bic.w	r2, r3, #6
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	659a      	str	r2, [r3, #88]	; 0x58
 80045c6:	e002      	b.n	80045ce <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d2:	4a20      	ldr	r2, [pc, #128]	; (8004654 <HAL_ADC_Start_DMA+0xfc>)
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <HAL_ADC_Start_DMA+0x100>)
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <HAL_ADC_Start_DMA+0x104>)
 80045e4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	221c      	movs	r2, #28
 80045ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0210 	orr.w	r2, r2, #16
 8004604:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3340      	adds	r3, #64	; 0x40
 8004620:	4619      	mov	r1, r3
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f002 f90b 	bl	8006840 <HAL_DMA_Start_IT>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fde6 	bl	8004204 <LL_ADC_REG_StartConversion>
 8004638:	e006      	b.n	8004648 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004642:	e001      	b.n	8004648 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004644:	2302      	movs	r3, #2
 8004646:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	08005583 	.word	0x08005583
 8004658:	0800565b 	.word	0x0800565b
 800465c:	08005677 	.word	0x08005677

08004660 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_ADC_Stop_DMA+0x16>
 8004672:	2302      	movs	r3, #2
 8004674:	e051      	b.n	800471a <HAL_ADC_Stop_DMA+0xba>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800467e:	2103      	movs	r1, #3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fe01 	bl	8005288 <ADC_ConversionStop>
 8004686:	4603      	mov	r3, r0
 8004688:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d13f      	bne.n	8004710 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d10f      	bne.n	80046ce <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4618      	mov	r0, r3
 80046b4:	f002 f924 	bl	8006900 <HAL_DMA_Abort>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0210 	bic.w	r2, r2, #16
 80046dc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 feed 	bl	80054c4 <ADC_Disable>
 80046ea:	4603      	mov	r3, r0
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	e002      	b.n	80046f6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fee7 	bl	80054c4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b088      	sub	sp, #32
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d017      	beq.n	8004778 <HAL_ADC_IRQHandler+0x56>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d012      	beq.n	8004778 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f001 f852 	bl	8005814 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2202      	movs	r2, #2
 8004776:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_ADC_IRQHandler+0x6a>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004792:	2b00      	cmp	r3, #0
 8004794:	d05e      	beq.n	8004854 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d059      	beq.n	8004854 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fbe4 	bl	8003f8a <LL_ADC_REG_IsTriggerSourceSWStart>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03e      	beq.n	8004846 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d135      	bne.n	8004846 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d12e      	bne.n	8004846 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fd31 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d11a      	bne.n	800482e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 020c 	bic.w	r2, r2, #12
 8004806:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d112      	bne.n	8004846 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
 800482c:	e00b      	b.n	8004846 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0210 	orr.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fab6 	bl	8000db8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	220c      	movs	r2, #12
 8004852:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <HAL_ADC_IRQHandler+0x146>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800486e:	2b00      	cmp	r3, #0
 8004870:	d072      	beq.n	8004958 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d06d      	beq.n	8004958 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fbb5 	bl	8004008 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800489e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7ff fb70 	bl	8003f8a <LL_ADC_REG_IsTriggerSourceSWStart>
 80048aa:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d047      	beq.n	800494a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_ADC_IRQHandler+0x1b2>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d03f      	beq.n	800494a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d13a      	bne.n	800494a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d133      	bne.n	800494a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d12e      	bne.n	800494a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fcd6 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11a      	bne.n	8004932 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800490a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d112      	bne.n	800494a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
 8004930:	e00b      	b.n	800494a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0210 	orr.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	f043 0201 	orr.w	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 ff3a 	bl	80057c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2260      	movs	r2, #96	; 0x60
 8004956:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d011      	beq.n	8004986 <HAL_ADC_IRQHandler+0x264>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f890 	bl	8004a9e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <HAL_ADC_IRQHandler+0x294>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 ff20 	bl	80057ec <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_ADC_IRQHandler+0x2c4>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00d      	beq.n	80049e6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 ff12 	bl	8005800 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02a      	beq.n	8004a46 <HAL_ADC_IRQHandler+0x324>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d025      	beq.n	8004a46 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e008      	b.n	8004a1a <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10e      	bne.n	8004a3e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	f043 0202 	orr.w	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 f83a 	bl	8004ab2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2210      	movs	r2, #16
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d018      	beq.n	8004a82 <HAL_ADC_IRQHandler+0x360>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d013      	beq.n	8004a82 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	f043 0208 	orr.w	r2, r3, #8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 feab 	bl	80057d8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004a82:	bf00      	nop
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b0b6      	sub	sp, #216	; 0xd8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d101      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x22>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	e3b9      	b.n	800525e <HAL_ADC_ConfigChannel+0x796>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fbac 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 839e 	bne.w	8005240 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b05      	cmp	r3, #5
 8004b0a:	d824      	bhi.n	8004b56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	3b02      	subs	r3, #2
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d81b      	bhi.n	8004b4e <HAL_ADC_ConfigChannel+0x86>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_ADC_ConfigChannel+0x54>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b35 	.word	0x08004b35
 8004b24:	08004b3d 	.word	0x08004b3d
 8004b28:	08004b45 	.word	0x08004b45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	220c      	movs	r2, #12
 8004b30:	605a      	str	r2, [r3, #4]
          break;
 8004b32:	e011      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2212      	movs	r2, #18
 8004b38:	605a      	str	r2, [r3, #4]
          break;
 8004b3a:	e00d      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2218      	movs	r2, #24
 8004b40:	605a      	str	r2, [r3, #4]
          break;
 8004b42:	e009      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b4a:	605a      	str	r2, [r3, #4]
          break;
 8004b4c:	e004      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2206      	movs	r2, #6
 8004b52:	605a      	str	r2, [r3, #4]
          break;
 8004b54:	e000      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	f7ff fa23 	bl	8003fb0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fb70 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8004b74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fb90 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 8004b82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 81a6 	bne.w	8004edc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 81a1 	bne.w	8004edc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f7ff fa41 	bl	800402e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	08db      	lsrs	r3, r3, #3
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d00a      	beq.n	8004be4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6919      	ldr	r1, [r3, #16]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bde:	f7ff f97f 	bl	8003ee0 <LL_ADC_SetOffset>
 8004be2:	e17b      	b.n	8004edc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f99c 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x148>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff f991 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004c06:	4603      	mov	r3, r0
 8004c08:	0e9b      	lsrs	r3, r3, #26
 8004c0a:	f003 021f 	and.w	r2, r3, #31
 8004c0e:	e01e      	b.n	8004c4e <HAL_ADC_ConfigChannel+0x186>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f986 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c26:	fa93 f3a3 	rbit	r3, r3
 8004c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004c3e:	2320      	movs	r3, #32
 8004c40:	e004      	b.n	8004c4c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c46:	fab3 f383 	clz	r3, r3
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d105      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x19e>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	0e9b      	lsrs	r3, r3, #26
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	e018      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x1d0>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	e004      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d106      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff f955 	bl	8003f54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff f939 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x20e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff f92e 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	0e9b      	lsrs	r3, r3, #26
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	e01e      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x24c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff f923 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e004      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d0c:	fab3 f383 	clz	r3, r3
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x264>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	0e9b      	lsrs	r3, r3, #26
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	e018      	b.n	8004d5e <HAL_ADC_ConfigChannel+0x296>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e004      	b.n	8004d5e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d106      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	2101      	movs	r1, #1
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff f8f2 	bl	8003f54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2102      	movs	r1, #2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f8d6 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <HAL_ADC_ConfigChannel+0x2d4>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff f8cb 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004d92:	4603      	mov	r3, r0
 8004d94:	0e9b      	lsrs	r3, r3, #26
 8004d96:	f003 021f 	and.w	r2, r3, #31
 8004d9a:	e01e      	b.n	8004dda <HAL_ADC_ConfigChannel+0x312>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2102      	movs	r1, #2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f8c0 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004da8:	4603      	mov	r3, r0
 8004daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d101      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004dca:	2320      	movs	r3, #32
 8004dcc:	e004      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dd2:	fab3 f383 	clz	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d105      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x32a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	0e9b      	lsrs	r3, r3, #26
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	e016      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x358>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e12:	2320      	movs	r3, #32
 8004e14:	e004      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d106      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2102      	movs	r1, #2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff f891 	bl	8003f54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2103      	movs	r1, #3
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff f875 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x396>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2103      	movs	r1, #3
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f86a 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004e54:	4603      	mov	r3, r0
 8004e56:	0e9b      	lsrs	r3, r3, #26
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	e017      	b.n	8004e8e <HAL_ADC_ConfigChannel+0x3c6>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2103      	movs	r1, #3
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff f85f 	bl	8003f28 <LL_ADC_GetOffsetChannel>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004e80:	2320      	movs	r3, #32
 8004e82:	e003      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d105      	bne.n	8004ea6 <HAL_ADC_ConfigChannel+0x3de>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	0e9b      	lsrs	r3, r3, #26
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	e011      	b.n	8004eca <HAL_ADC_ConfigChannel+0x402>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ebe:	2320      	movs	r3, #32
 8004ec0:	e003      	b.n	8004eca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	fab3 f383 	clz	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d106      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff f83c 	bl	8003f54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff f969 	bl	80041b8 <LL_ADC_IsEnabled>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f040 813f 	bne.w	800516c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f7ff f8c2 	bl	8004084 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4a8e      	ldr	r2, [pc, #568]	; (8005140 <HAL_ADC_ConfigChannel+0x678>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	f040 8130 	bne.w	800516c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x46c>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0e9b      	lsrs	r3, r3, #26
 8004f22:	3301      	adds	r3, #1
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	bf94      	ite	ls
 8004f2c:	2301      	movls	r3, #1
 8004f2e:	2300      	movhi	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e019      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x4a0>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	e003      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2b09      	cmp	r3, #9
 8004f60:	bf94      	ite	ls
 8004f62:	2301      	movls	r3, #1
 8004f64:	2300      	movhi	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d079      	beq.n	8005060 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x4c0>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	0e9b      	lsrs	r3, r3, #26
 8004f7e:	3301      	adds	r3, #1
 8004f80:	069b      	lsls	r3, r3, #26
 8004f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f86:	e015      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x4ec>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	fa93 f3a3 	rbit	r3, r3
 8004f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e003      	b.n	8004fac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	3301      	adds	r3, #1
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x50c>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	0e9b      	lsrs	r3, r3, #26
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2101      	movs	r1, #1
 8004fce:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd2:	e017      	b.n	8005004 <HAL_ADC_ConfigChannel+0x53c>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	ea42 0103 	orr.w	r1, r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <HAL_ADC_ConfigChannel+0x562>
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0e9b      	lsrs	r3, r3, #26
 800501a:	3301      	adds	r3, #1
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	051b      	lsls	r3, r3, #20
 8005028:	e018      	b.n	800505c <HAL_ADC_ConfigChannel+0x594>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005042:	2320      	movs	r3, #32
 8005044:	e003      	b.n	800504e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	fab3 f383 	clz	r3, r3
 800504c:	b2db      	uxtb	r3, r3
 800504e:	3301      	adds	r3, #1
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4613      	mov	r3, r2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800505c:	430b      	orrs	r3, r1
 800505e:	e080      	b.n	8005162 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005068:	2b00      	cmp	r3, #0
 800506a:	d107      	bne.n	800507c <HAL_ADC_ConfigChannel+0x5b4>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	0e9b      	lsrs	r3, r3, #26
 8005072:	3301      	adds	r3, #1
 8005074:	069b      	lsls	r3, r3, #26
 8005076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800507a:	e015      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x5e0>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	fa93 f3a3 	rbit	r3, r3
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005094:	2320      	movs	r3, #32
 8005096:	e003      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	3301      	adds	r3, #1
 80050a2:	069b      	lsls	r3, r3, #26
 80050a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d109      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x600>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0e9b      	lsrs	r3, r3, #26
 80050ba:	3301      	adds	r3, #1
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2101      	movs	r1, #1
 80050c2:	fa01 f303 	lsl.w	r3, r1, r3
 80050c6:	e017      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x630>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	61fb      	str	r3, [r7, #28]
  return result;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80050e0:	2320      	movs	r3, #32
 80050e2:	e003      	b.n	80050ec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3301      	adds	r3, #1
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	ea42 0103 	orr.w	r1, r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_ADC_ConfigChannel+0x65c>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	0e9b      	lsrs	r3, r3, #26
 800510e:	3301      	adds	r3, #1
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	3b1e      	subs	r3, #30
 800511c:	051b      	lsls	r3, r3, #20
 800511e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005122:	e01d      	b.n	8005160 <HAL_ADC_ConfigChannel+0x698>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	613b      	str	r3, [r7, #16]
  return result;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d103      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800513c:	2320      	movs	r3, #32
 800513e:	e005      	b.n	800514c <HAL_ADC_ConfigChannel+0x684>
 8005140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	3301      	adds	r3, #1
 800514e:	f003 021f 	and.w	r2, r3, #31
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	3b1e      	subs	r3, #30
 800515a:	051b      	lsls	r3, r3, #20
 800515c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005160:	430b      	orrs	r3, r1
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	6892      	ldr	r2, [r2, #8]
 8005166:	4619      	mov	r1, r3
 8005168:	f7fe ff61 	bl	800402e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <HAL_ADC_ConfigChannel+0x7a0>)
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d06c      	beq.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005178:	483c      	ldr	r0, [pc, #240]	; (800526c <HAL_ADC_ConfigChannel+0x7a4>)
 800517a:	f7fe fea3 	bl	8003ec4 <LL_ADC_GetCommonPathInternalCh>
 800517e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3a      	ldr	r2, [pc, #232]	; (8005270 <HAL_ADC_ConfigChannel+0x7a8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d127      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800518c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d121      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a35      	ldr	r2, [pc, #212]	; (8005274 <HAL_ADC_ConfigChannel+0x7ac>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d157      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051aa:	4619      	mov	r1, r3
 80051ac:	482f      	ldr	r0, [pc, #188]	; (800526c <HAL_ADC_ConfigChannel+0x7a4>)
 80051ae:	f7fe fe76 	bl	8003e9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051b2:	4b31      	ldr	r3, [pc, #196]	; (8005278 <HAL_ADC_ConfigChannel+0x7b0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a30      	ldr	r2, [pc, #192]	; (800527c <HAL_ADC_ConfigChannel+0x7b4>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	4613      	mov	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051cc:	e002      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f9      	bne.n	80051ce <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051da:	e03a      	b.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a27      	ldr	r2, [pc, #156]	; (8005280 <HAL_ADC_ConfigChannel+0x7b8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d113      	bne.n	800520e <HAL_ADC_ConfigChannel+0x746>
 80051e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10d      	bne.n	800520e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1f      	ldr	r2, [pc, #124]	; (8005274 <HAL_ADC_ConfigChannel+0x7ac>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d12a      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005204:	4619      	mov	r1, r3
 8005206:	4819      	ldr	r0, [pc, #100]	; (800526c <HAL_ADC_ConfigChannel+0x7a4>)
 8005208:	f7fe fe49 	bl	8003e9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800520c:	e021      	b.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <HAL_ADC_ConfigChannel+0x7bc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d11c      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d116      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a12      	ldr	r2, [pc, #72]	; (8005274 <HAL_ADC_ConfigChannel+0x7ac>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d111      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800522e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005232:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005236:	4619      	mov	r1, r3
 8005238:	480c      	ldr	r0, [pc, #48]	; (800526c <HAL_ADC_ConfigChannel+0x7a4>)
 800523a:	f7fe fe30 	bl	8003e9e <LL_ADC_SetCommonPathInternalCh>
 800523e:	e008      	b.n	8005252 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800525a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800525e:	4618      	mov	r0, r3
 8005260:	37d8      	adds	r7, #216	; 0xd8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	80080000 	.word	0x80080000
 800526c:	50040300 	.word	0x50040300
 8005270:	c7520000 	.word	0xc7520000
 8005274:	50040000 	.word	0x50040000
 8005278:	20000104 	.word	0x20000104
 800527c:	053e2d63 	.word	0x053e2d63
 8005280:	cb840000 	.word	0xcb840000
 8005284:	80000001 	.word	0x80000001

08005288 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe ffd8 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 80052a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe fff9 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 80052b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d103      	bne.n	80052c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8098 	beq.w	80053f0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d02a      	beq.n	8005324 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	7e5b      	ldrb	r3, [r3, #25]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d126      	bne.n	8005324 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7e1b      	ldrb	r3, [r3, #24]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d122      	bne.n	8005324 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80052de:	2301      	movs	r3, #1
 80052e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80052e2:	e014      	b.n	800530e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4a45      	ldr	r2, [pc, #276]	; (80053fc <ADC_ConversionStop+0x174>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d90d      	bls.n	8005308 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f043 0210 	orr.w	r2, r3, #16
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e074      	b.n	80053f2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	3301      	adds	r3, #1
 800530c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d1e3      	bne.n	80052e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d014      	beq.n	8005354 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe ff90 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe ff4d 	bl	80041de <LL_ADC_IsDisableOngoing>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe ff6c 	bl	800422c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d014      	beq.n	8005384 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe ff9f 	bl	80042a2 <LL_ADC_INJ_IsConversionOngoing>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe ff35 	bl	80041de <LL_ADC_IsDisableOngoing>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe ff7b 	bl	800427a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d005      	beq.n	8005396 <ADC_ConversionStop+0x10e>
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d105      	bne.n	800539c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005390:	230c      	movs	r3, #12
 8005392:	617b      	str	r3, [r7, #20]
        break;
 8005394:	e005      	b.n	80053a2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005396:	2308      	movs	r3, #8
 8005398:	617b      	str	r3, [r7, #20]
        break;
 800539a:	e002      	b.n	80053a2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800539c:	2304      	movs	r3, #4
 800539e:	617b      	str	r3, [r7, #20]
        break;
 80053a0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80053a2:	f7fe fd39 	bl	8003e18 <HAL_GetTick>
 80053a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053a8:	e01b      	b.n	80053e2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80053aa:	f7fe fd35 	bl	8003e18 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	d914      	bls.n	80053e2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0210 	orr.w	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e007      	b.n	80053f2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1dc      	bne.n	80053aa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	a33fffff 	.word	0xa33fffff

08005400 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe fed3 	bl	80041b8 <LL_ADC_IsEnabled>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d14d      	bne.n	80054b4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	4b28      	ldr	r3, [pc, #160]	; (80054c0 <ADC_Enable+0xc0>)
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f043 0210 	orr.w	r2, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f043 0201 	orr.w	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e039      	b.n	80054b6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fe8e 	bl	8004168 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800544c:	f7fe fce4 	bl	8003e18 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005452:	e028      	b.n	80054a6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe fead 	bl	80041b8 <LL_ADC_IsEnabled>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fe7d 	bl	8004168 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800546e:	f7fe fcd3 	bl	8003e18 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d914      	bls.n	80054a6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d00d      	beq.n	80054a6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	f043 0210 	orr.w	r2, r3, #16
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e007      	b.n	80054b6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d1cf      	bne.n	8005454 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	8000003f 	.word	0x8000003f

080054c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fe84 	bl	80041de <LL_ADC_IsDisableOngoing>
 80054d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fe6b 	bl	80041b8 <LL_ADC_IsEnabled>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d047      	beq.n	8005578 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d144      	bne.n	8005578 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 030d 	and.w	r3, r3, #13
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d10c      	bne.n	8005516 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fe45 	bl	8004190 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2203      	movs	r2, #3
 800550c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800550e:	f7fe fc83 	bl	8003e18 <HAL_GetTick>
 8005512:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005514:	e029      	b.n	800556a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	f043 0210 	orr.w	r2, r3, #16
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	f043 0201 	orr.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e023      	b.n	800557a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005532:	f7fe fc71 	bl	8003e18 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d914      	bls.n	800556a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	f043 0210 	orr.w	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555e:	f043 0201 	orr.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e007      	b.n	800557a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1dc      	bne.n	8005532 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005598:	2b00      	cmp	r3, #0
 800559a:	d14b      	bne.n	8005634 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d021      	beq.n	80055fa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fce5 	bl	8003f8a <LL_ADC_REG_IsTriggerSourceSWStart>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d032      	beq.n	800562c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d12b      	bne.n	800562c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11f      	bne.n	800562c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f043 0201 	orr.w	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
 80055f8:	e018      	b.n	800562c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d111      	bne.n	800562c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f043 0201 	orr.w	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f7fb fbc3 	bl	8000db8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005632:	e00e      	b.n	8005652 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fa36 	bl	8004ab2 <HAL_ADC_ErrorCallback>
}
 8005646:	e004      	b.n	8005652 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
}
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff fa0e 	bl	8004a8a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005694:	f043 0204 	orr.w	r2, r3, #4
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fa08 	bl	8004ab2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <LL_ADC_StartCalibration>:
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80056bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_ADC_IsCalibrationOnGoing>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056f0:	d101      	bne.n	80056f6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_ADCEx_Calibration_Start+0x1c>
 800571c:	2302      	movs	r3, #2
 800571e:	e04d      	b.n	80057bc <HAL_ADCEx_Calibration_Start+0xb8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fecb 	bl	80054c4 <ADC_Disable>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d136      	bne.n	80057a6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005740:	f023 0302 	bic.w	r3, r3, #2
 8005744:	f043 0202 	orr.w	r2, r3, #2
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ffa9 	bl	80056aa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005758:	e014      	b.n	8005784 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3301      	adds	r3, #1
 800575e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005766:	d30d      	bcc.n	8005784 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f023 0312 	bic.w	r3, r3, #18
 8005770:	f043 0210 	orr.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e01b      	b.n	80057bc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff ffa7 	bl	80056dc <LL_ADC_IsCalibrationOnGoing>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e2      	bne.n	800575a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005798:	f023 0303 	bic.w	r3, r3, #3
 800579c:	f043 0201 	orr.w	r2, r3, #1
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
 80057a4:	e005      	b.n	80057b2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	f043 0210 	orr.w	r2, r3, #16
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0ed      	b.n	8005a16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fe f832 	bl	80038b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800585c:	f7fe fadc 	bl	8003e18 <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005862:	e012      	b.n	800588a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005864:	f7fe fad8 	bl	8003e18 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b0a      	cmp	r3, #10
 8005870:	d90b      	bls.n	800588a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2205      	movs	r2, #5
 8005882:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0c5      	b.n	8005a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0e5      	beq.n	8005864 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0202 	bic.w	r2, r2, #2
 80058a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058a8:	f7fe fab6 	bl	8003e18 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058ae:	e012      	b.n	80058d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80058b0:	f7fe fab2 	bl	8003e18 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b0a      	cmp	r3, #10
 80058bc:	d90b      	bls.n	80058d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2205      	movs	r2, #5
 80058ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e09f      	b.n	8005a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e5      	bne.n	80058b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	7e1b      	ldrb	r3, [r3, #24]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d108      	bne.n	80058fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e007      	b.n	800590e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7e5b      	ldrb	r3, [r3, #25]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d108      	bne.n	8005928 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005936:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	7e9b      	ldrb	r3, [r3, #26]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d108      	bne.n	8005952 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0220 	orr.w	r2, r2, #32
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	e007      	b.n	8005962 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0220 	bic.w	r2, r2, #32
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	7edb      	ldrb	r3, [r3, #27]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d108      	bne.n	800597c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0210 	bic.w	r2, r2, #16
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e007      	b.n	800598c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0210 	orr.w	r2, r2, #16
 800598a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7f1b      	ldrb	r3, [r3, #28]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d108      	bne.n	80059a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0208 	orr.w	r2, r2, #8
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e007      	b.n	80059b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0208 	bic.w	r2, r2, #8
 80059b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7f5b      	ldrb	r3, [r3, #29]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d108      	bne.n	80059d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0204 	orr.w	r2, r2, #4
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e007      	b.n	80059e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0204 	bic.w	r2, r2, #4
 80059de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	ea42 0103 	orr.w	r1, r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	1e5a      	subs	r2, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b087      	sub	sp, #28
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a34:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d003      	beq.n	8005a44 <HAL_CAN_ConfigFilter+0x26>
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	f040 80aa 	bne.w	8005b98 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	401a      	ands	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d123      	bne.n	8005ac6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	401a      	ands	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005aa0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	3248      	adds	r2, #72	; 0x48
 8005aa6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005aba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	3348      	adds	r3, #72	; 0x48
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d122      	bne.n	8005b14 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005aee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3248      	adds	r2, #72	; 0x48
 8005af4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	3348      	adds	r3, #72	; 0x48
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	440b      	add	r3, r1
 8005b12:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	43db      	mvns	r3, r3
 8005b26:	401a      	ands	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005b2e:	e007      	b.n	8005b40 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	401a      	ands	r2, r3
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005b5a:	e007      	b.n	8005b6c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	e006      	b.n	8005ba6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d12e      	bne.n	8005c24 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bde:	f7fe f91b 	bl	8003e18 <HAL_GetTick>
 8005be2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005be4:	e012      	b.n	8005c0c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005be6:	f7fe f917 	bl	8003e18 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b0a      	cmp	r3, #10
 8005bf2:	d90b      	bls.n	8005c0c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2205      	movs	r2, #5
 8005c04:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e012      	b.n	8005c32 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e006      	b.n	8005c32 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
  }
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b089      	sub	sp, #36	; 0x24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005c58:	7ffb      	ldrb	r3, [r7, #31]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d003      	beq.n	8005c66 <HAL_CAN_AddTxMessage+0x2c>
 8005c5e:	7ffb      	ldrb	r3, [r7, #31]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f040 80b8 	bne.w	8005dd6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d105      	bne.n	8005c86 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80a0 	beq.w	8005dc6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d907      	bls.n	8005ca6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e09e      	b.n	8005de4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	409a      	lsls	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10d      	bne.n	8005cd4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	6809      	ldr	r1, [r1, #0]
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	440b      	add	r3, r1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e00f      	b.n	8005cf4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cde:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ce4:	68f9      	ldr	r1, [r7, #12]
 8005ce6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005ce8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	3318      	adds	r3, #24
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	440b      	add	r3, r1
 8005cf2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6819      	ldr	r1, [r3, #0]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	3318      	adds	r3, #24
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	440b      	add	r3, r1
 8005d04:	3304      	adds	r3, #4
 8005d06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	7d1b      	ldrb	r3, [r3, #20]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d111      	bne.n	8005d34 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	3318      	adds	r3, #24
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	6811      	ldr	r1, [r2, #0]
 8005d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	440b      	add	r3, r1
 8005d30:	3304      	adds	r3, #4
 8005d32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3307      	adds	r3, #7
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	061a      	lsls	r2, r3, #24
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3306      	adds	r3, #6
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3305      	adds	r3, #5
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	3204      	adds	r2, #4
 8005d54:	7812      	ldrb	r2, [r2, #0]
 8005d56:	4610      	mov	r0, r2
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	6811      	ldr	r1, [r2, #0]
 8005d5c:	ea43 0200 	orr.w	r2, r3, r0
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	440b      	add	r3, r1
 8005d66:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005d6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3303      	adds	r3, #3
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	061a      	lsls	r2, r3, #24
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3302      	adds	r3, #2
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3301      	adds	r3, #1
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	4313      	orrs	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	7812      	ldrb	r2, [r2, #0]
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6811      	ldr	r1, [r2, #0]
 8005d92:	ea43 0200 	orr.w	r2, r3, r0
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005da0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	3318      	adds	r3, #24
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	4413      	add	r3, r2
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	6811      	ldr	r1, [r2, #0]
 8005db4:	f043 0201 	orr.w	r2, r3, #1
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	3318      	adds	r3, #24
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	440b      	add	r3, r1
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e00e      	b.n	8005de4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e006      	b.n	8005de4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
  }
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e06:	7dfb      	ldrb	r3, [r7, #23]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d003      	beq.n	8005e14 <HAL_CAN_GetRxMessage+0x24>
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	f040 80f3 	bne.w	8005ffa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10e      	bne.n	8005e38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d116      	bne.n	8005e56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0e7      	b.n	8006008 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d107      	bne.n	8005e56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0d8      	b.n	8006008 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	331b      	adds	r3, #27
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	4413      	add	r3, r2
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0204 	and.w	r2, r3, #4
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10c      	bne.n	8005e8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	331b      	adds	r3, #27
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	4413      	add	r3, r2
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	0d5b      	lsrs	r3, r3, #21
 8005e84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	e00b      	b.n	8005ea6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	331b      	adds	r3, #27
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	4413      	add	r3, r2
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	331b      	adds	r3, #27
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	4413      	add	r3, r2
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0202 	and.w	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	331b      	adds	r3, #27
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	331b      	adds	r3, #27
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	4413      	add	r3, r2
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	331b      	adds	r3, #27
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	0a1a      	lsrs	r2, r3, #8
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	0c1a      	lsrs	r2, r3, #16
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	3302      	adds	r3, #2
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	0e1a      	lsrs	r2, r3, #24
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	3303      	adds	r3, #3
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	0a1a      	lsrs	r2, r3, #8
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3305      	adds	r3, #5
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	0c1a      	lsrs	r2, r3, #16
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	3306      	adds	r3, #6
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	0e1a      	lsrs	r2, r3, #24
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	3307      	adds	r3, #7
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d108      	bne.n	8005fe6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0220 	orr.w	r2, r2, #32
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e007      	b.n	8005ff6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0220 	orr.w	r2, r2, #32
 8005ff4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	e006      	b.n	8006008 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006024:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d002      	beq.n	8006032 <HAL_CAN_ActivateNotification+0x1e>
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d109      	bne.n	8006046 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6959      	ldr	r1, [r3, #20]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e006      	b.n	8006054 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
  }
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08a      	sub	sp, #40	; 0x28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006068:	2300      	movs	r3, #0
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d07c      	beq.n	80061a0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d023      	beq.n	80060f8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2201      	movs	r2, #1
 80060b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f983 	bl	80063ce <HAL_CAN_TxMailbox0CompleteCallback>
 80060c8:	e016      	b.n	80060f8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
 80060dc:	e00c      	b.n	80060f8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
 80060f0:	e002      	b.n	80060f8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f989 	bl	800640a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d024      	beq.n	800614c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800610a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f963 	bl	80063e2 <HAL_CAN_TxMailbox1CompleteCallback>
 800611c:	e016      	b.n	800614c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
 8006130:	e00c      	b.n	800614c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	e002      	b.n	800614c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f969 	bl	800641e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d024      	beq.n	80061a0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800615e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f943 	bl	80063f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8006170:	e016      	b.n	80061a0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006182:	627b      	str	r3, [r7, #36]	; 0x24
 8006184:	e00c      	b.n	80061a0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
 8006198:	e002      	b.n	80061a0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f949 	bl	8006432 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2210      	movs	r2, #16
 80061c2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d006      	beq.n	80061e6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2208      	movs	r2, #8
 80061de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f930 	bl	8006446 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fb fa44 	bl	800168c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800621e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2210      	movs	r2, #16
 8006226:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2208      	movs	r2, #8
 8006242:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f908 	bl	800645a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d009      	beq.n	8006268 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fb fa32 	bl	80016cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f003 0310 	and.w	r3, r3, #16
 8006278:	2b00      	cmp	r3, #0
 800627a:	d006      	beq.n	800628a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2210      	movs	r2, #16
 8006282:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f8f2 	bl	800646e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d006      	beq.n	80062ac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2208      	movs	r2, #8
 80062a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8eb 	bl	8006482 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d07b      	beq.n	80063ae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d072      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	f043 0302 	orr.w	r3, r3, #2
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	f043 0304 	orr.w	r3, r3, #4
 8006312:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631a:	2b00      	cmp	r3, #0
 800631c:	d043      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006324:	2b00      	cmp	r3, #0
 8006326:	d03e      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800632e:	2b60      	cmp	r3, #96	; 0x60
 8006330:	d02b      	beq.n	800638a <HAL_CAN_IRQHandler+0x32a>
 8006332:	2b60      	cmp	r3, #96	; 0x60
 8006334:	d82e      	bhi.n	8006394 <HAL_CAN_IRQHandler+0x334>
 8006336:	2b50      	cmp	r3, #80	; 0x50
 8006338:	d022      	beq.n	8006380 <HAL_CAN_IRQHandler+0x320>
 800633a:	2b50      	cmp	r3, #80	; 0x50
 800633c:	d82a      	bhi.n	8006394 <HAL_CAN_IRQHandler+0x334>
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d019      	beq.n	8006376 <HAL_CAN_IRQHandler+0x316>
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d826      	bhi.n	8006394 <HAL_CAN_IRQHandler+0x334>
 8006346:	2b30      	cmp	r3, #48	; 0x30
 8006348:	d010      	beq.n	800636c <HAL_CAN_IRQHandler+0x30c>
 800634a:	2b30      	cmp	r3, #48	; 0x30
 800634c:	d822      	bhi.n	8006394 <HAL_CAN_IRQHandler+0x334>
 800634e:	2b10      	cmp	r3, #16
 8006350:	d002      	beq.n	8006358 <HAL_CAN_IRQHandler+0x2f8>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d005      	beq.n	8006362 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006356:	e01d      	b.n	8006394 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	f043 0308 	orr.w	r3, r3, #8
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006360:	e019      	b.n	8006396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	f043 0310 	orr.w	r3, r3, #16
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800636a:	e014      	b.n	8006396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	f043 0320 	orr.w	r3, r3, #32
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006374:	e00f      	b.n	8006396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800637e:	e00a      	b.n	8006396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006388:	e005      	b.n	8006396 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006392:	e000      	b.n	8006396 <HAL_CAN_IRQHandler+0x336>
            break;
 8006394:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2204      	movs	r2, #4
 80063ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f868 	bl	8006496 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80063c6:	bf00      	nop
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <__NVIC_SetPriorityGrouping+0x44>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064c8:	4013      	ands	r3, r2
 80064ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064de:	4a04      	ldr	r2, [pc, #16]	; (80064f0 <__NVIC_SetPriorityGrouping+0x44>)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	60d3      	str	r3, [r2, #12]
}
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	e000ed00 	.word	0xe000ed00

080064f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064f8:	4b04      	ldr	r3, [pc, #16]	; (800650c <__NVIC_GetPriorityGrouping+0x18>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f003 0307 	and.w	r3, r3, #7
}
 8006502:	4618      	mov	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	e000ed00 	.word	0xe000ed00

08006510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800651a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	db0b      	blt.n	800653a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	f003 021f 	and.w	r2, r3, #31
 8006528:	4907      	ldr	r1, [pc, #28]	; (8006548 <__NVIC_EnableIRQ+0x38>)
 800652a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652e:	095b      	lsrs	r3, r3, #5
 8006530:	2001      	movs	r0, #1
 8006532:	fa00 f202 	lsl.w	r2, r0, r2
 8006536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	e000e100 	.word	0xe000e100

0800654c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	6039      	str	r1, [r7, #0]
 8006556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800655c:	2b00      	cmp	r3, #0
 800655e:	db0a      	blt.n	8006576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	490c      	ldr	r1, [pc, #48]	; (8006598 <__NVIC_SetPriority+0x4c>)
 8006566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800656a:	0112      	lsls	r2, r2, #4
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	440b      	add	r3, r1
 8006570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006574:	e00a      	b.n	800658c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	4908      	ldr	r1, [pc, #32]	; (800659c <__NVIC_SetPriority+0x50>)
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	3b04      	subs	r3, #4
 8006584:	0112      	lsls	r2, r2, #4
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	440b      	add	r3, r1
 800658a:	761a      	strb	r2, [r3, #24]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	e000e100 	.word	0xe000e100
 800659c:	e000ed00 	.word	0xe000ed00

080065a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b089      	sub	sp, #36	; 0x24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f1c3 0307 	rsb	r3, r3, #7
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	bf28      	it	cs
 80065be:	2304      	movcs	r3, #4
 80065c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d902      	bls.n	80065d0 <NVIC_EncodePriority+0x30>
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	3b03      	subs	r3, #3
 80065ce:	e000      	b.n	80065d2 <NVIC_EncodePriority+0x32>
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43da      	mvns	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	401a      	ands	r2, r3
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065e8:	f04f 31ff 	mov.w	r1, #4294967295
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	fa01 f303 	lsl.w	r3, r1, r3
 80065f2:	43d9      	mvns	r1, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065f8:	4313      	orrs	r3, r2
         );
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3724      	adds	r7, #36	; 0x24
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
	...

08006608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3b01      	subs	r3, #1
 8006614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006618:	d301      	bcc.n	800661e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800661a:	2301      	movs	r3, #1
 800661c:	e00f      	b.n	800663e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800661e:	4a0a      	ldr	r2, [pc, #40]	; (8006648 <SysTick_Config+0x40>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3b01      	subs	r3, #1
 8006624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006626:	210f      	movs	r1, #15
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	f7ff ff8e 	bl	800654c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006630:	4b05      	ldr	r3, [pc, #20]	; (8006648 <SysTick_Config+0x40>)
 8006632:	2200      	movs	r2, #0
 8006634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006636:	4b04      	ldr	r3, [pc, #16]	; (8006648 <SysTick_Config+0x40>)
 8006638:	2207      	movs	r2, #7
 800663a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	e000e010 	.word	0xe000e010

0800664c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff29 	bl	80064ac <__NVIC_SetPriorityGrouping>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	4603      	mov	r3, r0
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006670:	2300      	movs	r3, #0
 8006672:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006674:	f7ff ff3e 	bl	80064f4 <__NVIC_GetPriorityGrouping>
 8006678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	f7ff ff8e 	bl	80065a0 <NVIC_EncodePriority>
 8006684:	4602      	mov	r2, r0
 8006686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668a:	4611      	mov	r1, r2
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff ff5d 	bl	800654c <__NVIC_SetPriority>
}
 8006692:	bf00      	nop
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	4603      	mov	r3, r0
 80066a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ff31 	bl	8006510 <__NVIC_EnableIRQ>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ffa2 	bl	8006608 <SysTick_Config>
 80066c4:	4603      	mov	r3, r0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e098      	b.n	8006814 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	4b4d      	ldr	r3, [pc, #308]	; (8006820 <HAL_DMA_Init+0x150>)
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d80f      	bhi.n	800670e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	4b4b      	ldr	r3, [pc, #300]	; (8006824 <HAL_DMA_Init+0x154>)
 80066f6:	4413      	add	r3, r2
 80066f8:	4a4b      	ldr	r2, [pc, #300]	; (8006828 <HAL_DMA_Init+0x158>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	009a      	lsls	r2, r3, #2
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a48      	ldr	r2, [pc, #288]	; (800682c <HAL_DMA_Init+0x15c>)
 800670a:	641a      	str	r2, [r3, #64]	; 0x40
 800670c:	e00e      	b.n	800672c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	461a      	mov	r2, r3
 8006714:	4b46      	ldr	r3, [pc, #280]	; (8006830 <HAL_DMA_Init+0x160>)
 8006716:	4413      	add	r3, r2
 8006718:	4a43      	ldr	r2, [pc, #268]	; (8006828 <HAL_DMA_Init+0x158>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	091b      	lsrs	r3, r3, #4
 8006720:	009a      	lsls	r2, r3, #2
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a42      	ldr	r2, [pc, #264]	; (8006834 <HAL_DMA_Init+0x164>)
 800672a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800675c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006786:	d039      	beq.n	80067fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	4a27      	ldr	r2, [pc, #156]	; (800682c <HAL_DMA_Init+0x15c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d11a      	bne.n	80067c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <HAL_DMA_Init+0x168>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679a:	f003 031c 	and.w	r3, r3, #28
 800679e:	210f      	movs	r1, #15
 80067a0:	fa01 f303 	lsl.w	r3, r1, r3
 80067a4:	43db      	mvns	r3, r3
 80067a6:	4924      	ldr	r1, [pc, #144]	; (8006838 <HAL_DMA_Init+0x168>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80067ac:	4b22      	ldr	r3, [pc, #136]	; (8006838 <HAL_DMA_Init+0x168>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6859      	ldr	r1, [r3, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	f003 031c 	and.w	r3, r3, #28
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	491d      	ldr	r1, [pc, #116]	; (8006838 <HAL_DMA_Init+0x168>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]
 80067c6:	e019      	b.n	80067fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80067c8:	4b1c      	ldr	r3, [pc, #112]	; (800683c <HAL_DMA_Init+0x16c>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d0:	f003 031c 	and.w	r3, r3, #28
 80067d4:	210f      	movs	r1, #15
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	43db      	mvns	r3, r3
 80067dc:	4917      	ldr	r1, [pc, #92]	; (800683c <HAL_DMA_Init+0x16c>)
 80067de:	4013      	ands	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_DMA_Init+0x16c>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ee:	f003 031c 	and.w	r3, r3, #28
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	4911      	ldr	r1, [pc, #68]	; (800683c <HAL_DMA_Init+0x16c>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	40020407 	.word	0x40020407
 8006824:	bffdfff8 	.word	0xbffdfff8
 8006828:	cccccccd 	.word	0xcccccccd
 800682c:	40020000 	.word	0x40020000
 8006830:	bffdfbf8 	.word	0xbffdfbf8
 8006834:	40020400 	.word	0x40020400
 8006838:	400200a8 	.word	0x400200a8
 800683c:	400204a8 	.word	0x400204a8

08006840 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_DMA_Start_IT+0x20>
 800685c:	2302      	movs	r3, #2
 800685e:	e04b      	b.n	80068f8 <HAL_DMA_Start_IT+0xb8>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d13a      	bne.n	80068ea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0201 	bic.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f91e 	bl	8006ada <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d008      	beq.n	80068b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 020e 	orr.w	r2, r2, #14
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e00f      	b.n	80068d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0204 	bic.w	r2, r2, #4
 80068c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 020a 	orr.w	r2, r2, #10
 80068d6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	e005      	b.n	80068f6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
 80068f4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d008      	beq.n	800692a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2204      	movs	r2, #4
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e022      	b.n	8006970 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 020e 	bic.w	r2, r2, #14
 8006938:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	f003 021c 	and.w	r2, r3, #28
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2101      	movs	r1, #1
 8006958:	fa01 f202 	lsl.w	r2, r1, r2
 800695c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006998:	f003 031c 	and.w	r3, r3, #28
 800699c:	2204      	movs	r2, #4
 800699e:	409a      	lsls	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d026      	beq.n	80069f6 <HAL_DMA_IRQHandler+0x7a>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d021      	beq.n	80069f6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d107      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0204 	bic.w	r2, r2, #4
 80069ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d4:	f003 021c 	and.w	r2, r3, #28
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	2104      	movs	r1, #4
 80069de:	fa01 f202 	lsl.w	r2, r1, r2
 80069e2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d071      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80069f4:	e06c      	b.n	8006ad0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f003 031c 	and.w	r3, r3, #28
 80069fe:	2202      	movs	r2, #2
 8006a00:	409a      	lsls	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4013      	ands	r3, r2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d02e      	beq.n	8006a68 <HAL_DMA_IRQHandler+0xec>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d029      	beq.n	8006a68 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10b      	bne.n	8006a3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 020a 	bic.w	r2, r2, #10
 8006a30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	f003 021c 	and.w	r2, r3, #28
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2102      	movs	r1, #2
 8006a48:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d038      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006a66:	e033      	b.n	8006ad0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	f003 031c 	and.w	r3, r3, #28
 8006a70:	2208      	movs	r2, #8
 8006a72:	409a      	lsls	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4013      	ands	r3, r2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02a      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x156>
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d025      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 020e 	bic.w	r2, r2, #14
 8006a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	f003 021c 	and.w	r2, r3, #28
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8006aa8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
}
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b085      	sub	sp, #20
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	f003 021c 	and.w	r2, r3, #28
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f202 	lsl.w	r2, r1, r2
 8006afa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d108      	bne.n	8006b1e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006b1c:	e007      	b.n	8006b2e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	60da      	str	r2, [r3, #12]
}
 8006b2e:	bf00      	nop
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b4a:	e154      	b.n	8006df6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	2101      	movs	r1, #1
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	fa01 f303 	lsl.w	r3, r1, r3
 8006b58:	4013      	ands	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8146 	beq.w	8006df0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d005      	beq.n	8006b7c <HAL_GPIO_Init+0x40>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d130      	bne.n	8006bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	2203      	movs	r2, #3
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4013      	ands	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 0201 	and.w	r2, r3, #1
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d017      	beq.n	8006c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d123      	bne.n	8006c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	08da      	lsrs	r2, r3, #3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3208      	adds	r2, #8
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	220f      	movs	r2, #15
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	43db      	mvns	r3, r3
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4013      	ands	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	08da      	lsrs	r2, r3, #3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3208      	adds	r2, #8
 8006c68:	6939      	ldr	r1, [r7, #16]
 8006c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	2203      	movs	r2, #3
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	43db      	mvns	r3, r3
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4013      	ands	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f003 0203 	and.w	r2, r3, #3
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 80a0 	beq.w	8006df0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb0:	4b58      	ldr	r3, [pc, #352]	; (8006e14 <HAL_GPIO_Init+0x2d8>)
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb4:	4a57      	ldr	r2, [pc, #348]	; (8006e14 <HAL_GPIO_Init+0x2d8>)
 8006cb6:	f043 0301 	orr.w	r3, r3, #1
 8006cba:	6613      	str	r3, [r2, #96]	; 0x60
 8006cbc:	4b55      	ldr	r3, [pc, #340]	; (8006e14 <HAL_GPIO_Init+0x2d8>)
 8006cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006cc8:	4a53      	ldr	r2, [pc, #332]	; (8006e18 <HAL_GPIO_Init+0x2dc>)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	089b      	lsrs	r3, r3, #2
 8006cce:	3302      	adds	r3, #2
 8006cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	220f      	movs	r2, #15
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cf2:	d019      	beq.n	8006d28 <HAL_GPIO_Init+0x1ec>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a49      	ldr	r2, [pc, #292]	; (8006e1c <HAL_GPIO_Init+0x2e0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_GPIO_Init+0x1e8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a48      	ldr	r2, [pc, #288]	; (8006e20 <HAL_GPIO_Init+0x2e4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00d      	beq.n	8006d20 <HAL_GPIO_Init+0x1e4>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a47      	ldr	r2, [pc, #284]	; (8006e24 <HAL_GPIO_Init+0x2e8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <HAL_GPIO_Init+0x1e0>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a46      	ldr	r2, [pc, #280]	; (8006e28 <HAL_GPIO_Init+0x2ec>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <HAL_GPIO_Init+0x1dc>
 8006d14:	2304      	movs	r3, #4
 8006d16:	e008      	b.n	8006d2a <HAL_GPIO_Init+0x1ee>
 8006d18:	2307      	movs	r3, #7
 8006d1a:	e006      	b.n	8006d2a <HAL_GPIO_Init+0x1ee>
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e004      	b.n	8006d2a <HAL_GPIO_Init+0x1ee>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e002      	b.n	8006d2a <HAL_GPIO_Init+0x1ee>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <HAL_GPIO_Init+0x1ee>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	f002 0203 	and.w	r2, r2, #3
 8006d30:	0092      	lsls	r2, r2, #2
 8006d32:	4093      	lsls	r3, r2
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d3a:	4937      	ldr	r1, [pc, #220]	; (8006e18 <HAL_GPIO_Init+0x2dc>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	3302      	adds	r3, #2
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d48:	4b38      	ldr	r3, [pc, #224]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	43db      	mvns	r3, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4013      	ands	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d6c:	4a2f      	ldr	r2, [pc, #188]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d96:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006d9c:	4b23      	ldr	r3, [pc, #140]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	4013      	ands	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006dc6:	4b19      	ldr	r3, [pc, #100]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006dea:	4a10      	ldr	r2, [pc, #64]	; (8006e2c <HAL_GPIO_Init+0x2f0>)
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	3301      	adds	r3, #1
 8006df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f47f aea3 	bne.w	8006b4c <HAL_GPIO_Init+0x10>
  }
}
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	40021000 	.word	0x40021000
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	48000400 	.word	0x48000400
 8006e20:	48000800 	.word	0x48000800
 8006e24:	48000c00 	.word	0x48000c00
 8006e28:	48001000 	.word	0x48001000
 8006e2c:	40010400 	.word	0x40010400

08006e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	887b      	ldrh	r3, [r7, #2]
 8006e42:	4013      	ands	r3, r2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]
 8006e4c:	e001      	b.n	8006e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	807b      	strh	r3, [r7, #2]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e70:	787b      	ldrb	r3, [r7, #1]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e76:	887a      	ldrh	r2, [r7, #2]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e7c:	e002      	b.n	8006e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e7e:	887a      	ldrh	r2, [r7, #2]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ea2:	887a      	ldrh	r2, [r7, #2]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	041a      	lsls	r2, r3, #16
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	43d9      	mvns	r1, r3
 8006eae:	887b      	ldrh	r3, [r7, #2]
 8006eb0:	400b      	ands	r3, r1
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	619a      	str	r2, [r3, #24]
}
 8006eb8:	bf00      	nop
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ece:	4b08      	ldr	r3, [pc, #32]	; (8006ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ed0:	695a      	ldr	r2, [r3, #20]
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d006      	beq.n	8006ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eda:	4a05      	ldr	r2, [pc, #20]	; (8006ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fb fbba 	bl	800265c <HAL_GPIO_EXTI_Callback>
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40010400 	.word	0x40010400

08006ef4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e041      	b.n	8006f8a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f245 5255 	movw	r2, #21845	; 0x5555
 8006f18:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	6852      	ldr	r2, [r2, #4]
 8006f22:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6892      	ldr	r2, [r2, #8]
 8006f2c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006f2e:	f7fc ff73 	bl	8003e18 <HAL_GetTick>
 8006f32:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f34:	e00f      	b.n	8006f56 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006f36:	f7fc ff6f 	bl	8003e18 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b31      	cmp	r3, #49	; 0x31
 8006f42:	d908      	bls.n	8006f56 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e019      	b.n	8006f8a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e8      	bne.n	8006f36 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d005      	beq.n	8006f7e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	68d2      	ldr	r2, [r2, #12]
 8006f7a:	611a      	str	r2, [r3, #16]
 8006f7c:	e004      	b.n	8006f88 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006fa2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <HAL_PWREx_GetVoltageRange+0x18>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40007000 	.word	0x40007000

08006fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fde:	d130      	bne.n	8007042 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fe0:	4b23      	ldr	r3, [pc, #140]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d038      	beq.n	8007060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ff6:	4a1e      	ldr	r2, [pc, #120]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ffc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2232      	movs	r2, #50	; 0x32
 8007004:	fb02 f303 	mul.w	r3, r2, r3
 8007008:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800700a:	fba2 2303 	umull	r2, r3, r2, r3
 800700e:	0c9b      	lsrs	r3, r3, #18
 8007010:	3301      	adds	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007014:	e002      	b.n	800701c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3b01      	subs	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007028:	d102      	bne.n	8007030 <HAL_PWREx_ControlVoltageScaling+0x60>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f2      	bne.n	8007016 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703c:	d110      	bne.n	8007060 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e00f      	b.n	8007062 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007042:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800704a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704e:	d007      	beq.n	8007060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007058:	4a05      	ldr	r2, [pc, #20]	; (8007070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800705a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800705e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40007000 	.word	0x40007000
 8007074:	20000104 	.word	0x20000104
 8007078:	431bde83 	.word	0x431bde83

0800707c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f000 bc10 	b.w	80078b0 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007090:	4b96      	ldr	r3, [pc, #600]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 030c 	and.w	r3, r3, #12
 8007098:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800709a:	4b94      	ldr	r3, [pc, #592]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 80e4 	beq.w	800727a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <HAL_RCC_OscConfig+0x4c>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2b0c      	cmp	r3, #12
 80070bc:	f040 808b 	bne.w	80071d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	f040 8087 	bne.w	80071d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80070c8:	4b88      	ldr	r3, [pc, #544]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_RCC_OscConfig+0x64>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e3e7      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	4b81      	ldr	r3, [pc, #516]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <HAL_RCC_OscConfig+0x7e>
 80070f0:	4b7e      	ldr	r3, [pc, #504]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070f8:	e005      	b.n	8007106 <HAL_RCC_OscConfig+0x8a>
 80070fa:	4b7c      	ldr	r3, [pc, #496]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80070fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007106:	4293      	cmp	r3, r2
 8007108:	d223      	bcs.n	8007152 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fd42 	bl	8007b98 <RCC_SetFlashLatencyFromMSIRange>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e3c8      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800711e:	4b73      	ldr	r3, [pc, #460]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a72      	ldr	r2, [pc, #456]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007124:	f043 0308 	orr.w	r3, r3, #8
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	4b70      	ldr	r3, [pc, #448]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	496d      	ldr	r1, [pc, #436]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007138:	4313      	orrs	r3, r2
 800713a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800713c:	4b6b      	ldr	r3, [pc, #428]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	4968      	ldr	r1, [pc, #416]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800714c:	4313      	orrs	r3, r2
 800714e:	604b      	str	r3, [r1, #4]
 8007150:	e025      	b.n	800719e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007152:	4b66      	ldr	r3, [pc, #408]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a65      	ldr	r2, [pc, #404]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007158:	f043 0308 	orr.w	r3, r3, #8
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b63      	ldr	r3, [pc, #396]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	4960      	ldr	r1, [pc, #384]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007170:	4b5e      	ldr	r3, [pc, #376]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	495b      	ldr	r1, [pc, #364]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007180:	4313      	orrs	r3, r2
 8007182:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fd02 	bl	8007b98 <RCC_SetFlashLatencyFromMSIRange>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e388      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800719e:	f000 fc6f 	bl	8007a80 <HAL_RCC_GetSysClockFreq>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b51      	ldr	r3, [pc, #324]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	091b      	lsrs	r3, r3, #4
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	4950      	ldr	r1, [pc, #320]	; (80072f0 <HAL_RCC_OscConfig+0x274>)
 80071b0:	5ccb      	ldrb	r3, [r1, r3]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	4a4e      	ldr	r2, [pc, #312]	; (80072f4 <HAL_RCC_OscConfig+0x278>)
 80071bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80071be:	4b4e      	ldr	r3, [pc, #312]	; (80072f8 <HAL_RCC_OscConfig+0x27c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fc fdd8 	bl	8003d78 <HAL_InitTick>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d052      	beq.n	8007278 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	e36c      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d032      	beq.n	8007244 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80071de:	4b43      	ldr	r3, [pc, #268]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a42      	ldr	r2, [pc, #264]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80071e4:	f043 0301 	orr.w	r3, r3, #1
 80071e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80071ea:	f7fc fe15 	bl	8003e18 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071f2:	f7fc fe11 	bl	8003e18 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e355      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007204:	4b39      	ldr	r3, [pc, #228]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007210:	4b36      	ldr	r3, [pc, #216]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a35      	ldr	r2, [pc, #212]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007216:	f043 0308 	orr.w	r3, r3, #8
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	4b33      	ldr	r3, [pc, #204]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	4930      	ldr	r1, [pc, #192]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800722a:	4313      	orrs	r3, r2
 800722c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800722e:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	492b      	ldr	r1, [pc, #172]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800723e:	4313      	orrs	r3, r2
 8007240:	604b      	str	r3, [r1, #4]
 8007242:	e01a      	b.n	800727a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007244:	4b29      	ldr	r3, [pc, #164]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a28      	ldr	r2, [pc, #160]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007250:	f7fc fde2 	bl	8003e18 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007258:	f7fc fdde 	bl	8003e18 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e322      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800726a:	4b20      	ldr	r3, [pc, #128]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0x1dc>
 8007276:	e000      	b.n	800727a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007278:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d073      	beq.n	800736e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b08      	cmp	r3, #8
 800728a:	d005      	beq.n	8007298 <HAL_RCC_OscConfig+0x21c>
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d10e      	bne.n	80072b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d10b      	bne.n	80072b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d063      	beq.n	800736c <HAL_RCC_OscConfig+0x2f0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d15f      	bne.n	800736c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e2ff      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b8:	d106      	bne.n	80072c8 <HAL_RCC_OscConfig+0x24c>
 80072ba:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a0b      	ldr	r2, [pc, #44]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80072c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	e025      	b.n	8007314 <HAL_RCC_OscConfig+0x298>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072d0:	d114      	bne.n	80072fc <HAL_RCC_OscConfig+0x280>
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a05      	ldr	r2, [pc, #20]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80072d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a02      	ldr	r2, [pc, #8]	; (80072ec <HAL_RCC_OscConfig+0x270>)
 80072e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	e013      	b.n	8007314 <HAL_RCC_OscConfig+0x298>
 80072ec:	40021000 	.word	0x40021000
 80072f0:	0800bd8c 	.word	0x0800bd8c
 80072f4:	20000104 	.word	0x20000104
 80072f8:	20000108 	.word	0x20000108
 80072fc:	4ba0      	ldr	r3, [pc, #640]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a9f      	ldr	r2, [pc, #636]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	4b9d      	ldr	r3, [pc, #628]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a9c      	ldr	r2, [pc, #624]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800730e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d013      	beq.n	8007344 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fc fd7c 	bl	8003e18 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007324:	f7fc fd78 	bl	8003e18 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e2bc      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007336:	4b92      	ldr	r3, [pc, #584]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCC_OscConfig+0x2a8>
 8007342:	e014      	b.n	800736e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007344:	f7fc fd68 	bl	8003e18 <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800734c:	f7fc fd64 	bl	8003e18 <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b64      	cmp	r3, #100	; 0x64
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e2a8      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800735e:	4b88      	ldr	r3, [pc, #544]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1f0      	bne.n	800734c <HAL_RCC_OscConfig+0x2d0>
 800736a:	e000      	b.n	800736e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800736c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d060      	beq.n	800743c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b04      	cmp	r3, #4
 800737e:	d005      	beq.n	800738c <HAL_RCC_OscConfig+0x310>
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b0c      	cmp	r3, #12
 8007384:	d119      	bne.n	80073ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d116      	bne.n	80073ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800738c:	4b7c      	ldr	r3, [pc, #496]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_OscConfig+0x328>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e285      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073a4:	4b76      	ldr	r3, [pc, #472]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	061b      	lsls	r3, r3, #24
 80073b2:	4973      	ldr	r1, [pc, #460]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073b8:	e040      	b.n	800743c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d023      	beq.n	800740a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073c2:	4b6f      	ldr	r3, [pc, #444]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6e      	ldr	r2, [pc, #440]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80073c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ce:	f7fc fd23 	bl	8003e18 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073d6:	f7fc fd1f 	bl	8003e18 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e263      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80073e8:	4b65      	ldr	r3, [pc, #404]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d0f0      	beq.n	80073d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f4:	4b62      	ldr	r3, [pc, #392]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	061b      	lsls	r3, r3, #24
 8007402:	495f      	ldr	r1, [pc, #380]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007404:	4313      	orrs	r3, r2
 8007406:	604b      	str	r3, [r1, #4]
 8007408:	e018      	b.n	800743c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800740a:	4b5d      	ldr	r3, [pc, #372]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a5c      	ldr	r2, [pc, #368]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007416:	f7fc fcff 	bl	8003e18 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741e:	f7fc fcfb 	bl	8003e18 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e23f      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007430:	4b53      	ldr	r3, [pc, #332]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1f0      	bne.n	800741e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0308 	and.w	r3, r3, #8
 8007444:	2b00      	cmp	r3, #0
 8007446:	d03c      	beq.n	80074c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01c      	beq.n	800748a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007450:	4b4b      	ldr	r3, [pc, #300]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007456:	4a4a      	ldr	r2, [pc, #296]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007460:	f7fc fcda 	bl	8003e18 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007468:	f7fc fcd6 	bl	8003e18 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e21a      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800747a:	4b41      	ldr	r3, [pc, #260]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800747c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ef      	beq.n	8007468 <HAL_RCC_OscConfig+0x3ec>
 8007488:	e01b      	b.n	80074c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800748a:	4b3d      	ldr	r3, [pc, #244]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800748c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007490:	4a3b      	ldr	r2, [pc, #236]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749a:	f7fc fcbd 	bl	8003e18 <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074a2:	f7fc fcb9 	bl	8003e18 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e1fd      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80074b4:	4b32      	ldr	r3, [pc, #200]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80074b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1ef      	bne.n	80074a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 80a6 	beq.w	800761c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074d0:	2300      	movs	r3, #0
 80074d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80074d4:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10d      	bne.n	80074fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074e0:	4b27      	ldr	r3, [pc, #156]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e4:	4a26      	ldr	r2, [pc, #152]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80074e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ea:	6593      	str	r3, [r2, #88]	; 0x58
 80074ec:	4b24      	ldr	r3, [pc, #144]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 80074ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074f8:	2301      	movs	r3, #1
 80074fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074fc:	4b21      	ldr	r3, [pc, #132]	; (8007584 <HAL_RCC_OscConfig+0x508>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d118      	bne.n	800753a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <HAL_RCC_OscConfig+0x508>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <HAL_RCC_OscConfig+0x508>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007514:	f7fc fc80 	bl	8003e18 <HAL_GetTick>
 8007518:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800751a:	e008      	b.n	800752e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751c:	f7fc fc7c 	bl	8003e18 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	2b02      	cmp	r3, #2
 8007528:	d901      	bls.n	800752e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e1c0      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800752e:	4b15      	ldr	r3, [pc, #84]	; (8007584 <HAL_RCC_OscConfig+0x508>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0f0      	beq.n	800751c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d108      	bne.n	8007554 <HAL_RCC_OscConfig+0x4d8>
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	4a0d      	ldr	r2, [pc, #52]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007552:	e029      	b.n	80075a8 <HAL_RCC_OscConfig+0x52c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b05      	cmp	r3, #5
 800755a:	d115      	bne.n	8007588 <HAL_RCC_OscConfig+0x50c>
 800755c:	4b08      	ldr	r3, [pc, #32]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007562:	4a07      	ldr	r2, [pc, #28]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007564:	f043 0304 	orr.w	r3, r3, #4
 8007568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800756c:	4b04      	ldr	r3, [pc, #16]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	4a03      	ldr	r2, [pc, #12]	; (8007580 <HAL_RCC_OscConfig+0x504>)
 8007574:	f043 0301 	orr.w	r3, r3, #1
 8007578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800757c:	e014      	b.n	80075a8 <HAL_RCC_OscConfig+0x52c>
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000
 8007584:	40007000 	.word	0x40007000
 8007588:	4b9a      	ldr	r3, [pc, #616]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	4a99      	ldr	r2, [pc, #612]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007590:	f023 0301 	bic.w	r3, r3, #1
 8007594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007598:	4b96      	ldr	r3, [pc, #600]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	4a95      	ldr	r2, [pc, #596]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80075a0:	f023 0304 	bic.w	r3, r3, #4
 80075a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d016      	beq.n	80075de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b0:	f7fc fc32 	bl	8003e18 <HAL_GetTick>
 80075b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075b6:	e00a      	b.n	80075ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b8:	f7fc fc2e 	bl	8003e18 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e170      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ce:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0ed      	beq.n	80075b8 <HAL_RCC_OscConfig+0x53c>
 80075dc:	e015      	b.n	800760a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075de:	f7fc fc1b 	bl	8003e18 <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075e4:	e00a      	b.n	80075fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075e6:	f7fc fc17 	bl	8003e18 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d901      	bls.n	80075fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e159      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075fc:	4b7d      	ldr	r3, [pc, #500]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1ed      	bne.n	80075e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800760a:	7ffb      	ldrb	r3, [r7, #31]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d105      	bne.n	800761c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007610:	4b78      	ldr	r3, [pc, #480]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007614:	4a77      	ldr	r2, [pc, #476]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800761a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d03c      	beq.n	80076a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01c      	beq.n	800766a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007630:	4b70      	ldr	r3, [pc, #448]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007636:	4a6f      	ldr	r2, [pc, #444]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007640:	f7fc fbea 	bl	8003e18 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007648:	f7fc fbe6 	bl	8003e18 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e12a      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800765a:	4b66      	ldr	r3, [pc, #408]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800765c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0ef      	beq.n	8007648 <HAL_RCC_OscConfig+0x5cc>
 8007668:	e01b      	b.n	80076a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800766a:	4b62      	ldr	r3, [pc, #392]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800766c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007670:	4a60      	ldr	r2, [pc, #384]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767a:	f7fc fbcd 	bl	8003e18 <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007682:	f7fc fbc9 	bl	8003e18 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e10d      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007694:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1ef      	bne.n	8007682 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8101 	beq.w	80078ae <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	f040 80c9 	bne.w	8007848 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80076b6:	4b4f      	ldr	r3, [pc, #316]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f003 0203 	and.w	r2, r3, #3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d12c      	bne.n	8007724 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d4:	3b01      	subs	r3, #1
 80076d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d123      	bne.n	8007724 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d11b      	bne.n	8007724 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d113      	bne.n	8007724 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	3b01      	subs	r3, #1
 800770a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d109      	bne.n	8007724 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	3b01      	subs	r3, #1
 800771e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007720:	429a      	cmp	r2, r3
 8007722:	d06b      	beq.n	80077fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b0c      	cmp	r3, #12
 8007728:	d062      	beq.n	80077f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800772a:	4b32      	ldr	r3, [pc, #200]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e0ba      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800773a:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2d      	ldr	r2, [pc, #180]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007740:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007744:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007746:	f7fc fb67 	bl	8003e18 <HAL_GetTick>
 800774a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800774e:	f7fc fb63 	bl	8003e18 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e0a7      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007760:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1f0      	bne.n	800774e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800776c:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <HAL_RCC_OscConfig+0x77c>)
 8007772:	4013      	ands	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800777c:	3a01      	subs	r2, #1
 800777e:	0112      	lsls	r2, r2, #4
 8007780:	4311      	orrs	r1, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007786:	0212      	lsls	r2, r2, #8
 8007788:	4311      	orrs	r1, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800778e:	0852      	lsrs	r2, r2, #1
 8007790:	3a01      	subs	r2, #1
 8007792:	0552      	lsls	r2, r2, #21
 8007794:	4311      	orrs	r1, r2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800779a:	0852      	lsrs	r2, r2, #1
 800779c:	3a01      	subs	r2, #1
 800779e:	0652      	lsls	r2, r2, #25
 80077a0:	4311      	orrs	r1, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077a6:	06d2      	lsls	r2, r2, #27
 80077a8:	430a      	orrs	r2, r1
 80077aa:	4912      	ldr	r1, [pc, #72]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80077b0:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a0f      	ldr	r2, [pc, #60]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80077b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80077c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80077c8:	f7fc fb26 	bl	8003e18 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d0:	f7fc fb22 	bl	8003e18 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e066      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077e2:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <HAL_RCC_OscConfig+0x778>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077ee:	e05e      	b.n	80078ae <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e05d      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
 80077f4:	40021000 	.word	0x40021000
 80077f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077fc:	4b2e      	ldr	r3, [pc, #184]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d152      	bne.n	80078ae <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a2a      	ldr	r2, [pc, #168]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800780e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007812:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007814:	4b28      	ldr	r3, [pc, #160]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4a27      	ldr	r2, [pc, #156]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800781a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800781e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007820:	f7fc fafa 	bl	8003e18 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007828:	f7fc faf6 	bl	8003e18 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e03a      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800783a:	4b1f      	ldr	r3, [pc, #124]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x7ac>
 8007846:	e032      	b.n	80078ae <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b0c      	cmp	r3, #12
 800784c:	d02d      	beq.n	80078aa <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a19      	ldr	r2, [pc, #100]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 8007854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007858:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800785a:	4b17      	ldr	r3, [pc, #92]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d105      	bne.n	8007872 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	4a13      	ldr	r2, [pc, #76]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800786c:	f023 0303 	bic.w	r3, r3, #3
 8007870:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	4a10      	ldr	r2, [pc, #64]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 8007878:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800787c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007880:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007882:	f7fc fac9 	bl	8003e18 <HAL_GetTick>
 8007886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007888:	e008      	b.n	800789c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800788a:	f7fc fac5 	bl	8003e18 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	2b02      	cmp	r3, #2
 8007896:	d901      	bls.n	800789c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e009      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <HAL_RCC_OscConfig+0x83c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1f0      	bne.n	800788a <HAL_RCC_OscConfig+0x80e>
 80078a8:	e001      	b.n	80078ae <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	40021000 	.word	0x40021000

080078bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0c8      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078d0:	4b66      	ldr	r3, [pc, #408]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d910      	bls.n	8007900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078de:	4b63      	ldr	r3, [pc, #396]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f023 0207 	bic.w	r2, r3, #7
 80078e6:	4961      	ldr	r1, [pc, #388]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ee:	4b5f      	ldr	r3, [pc, #380]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0b0      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d04c      	beq.n	80079a6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d107      	bne.n	8007924 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007914:	4b56      	ldr	r3, [pc, #344]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d121      	bne.n	8007964 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e09e      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2b02      	cmp	r3, #2
 800792a:	d107      	bne.n	800793c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792c:	4b50      	ldr	r3, [pc, #320]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d115      	bne.n	8007964 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e092      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d107      	bne.n	8007954 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007944:	4b4a      	ldr	r3, [pc, #296]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e086      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007954:	4b46      	ldr	r3, [pc, #280]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e07e      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007964:	4b42      	ldr	r3, [pc, #264]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f023 0203 	bic.w	r2, r3, #3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	493f      	ldr	r1, [pc, #252]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007972:	4313      	orrs	r3, r2
 8007974:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007976:	f7fc fa4f 	bl	8003e18 <HAL_GetTick>
 800797a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800797c:	e00a      	b.n	8007994 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800797e:	f7fc fa4b 	bl	8003e18 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f241 3288 	movw	r2, #5000	; 0x1388
 800798c:	4293      	cmp	r3, r2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e066      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007994:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 020c 	and.w	r2, r3, #12
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d1eb      	bne.n	800797e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079b2:	4b2f      	ldr	r3, [pc, #188]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	492c      	ldr	r1, [pc, #176]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079c4:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d210      	bcs.n	80079f4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f023 0207 	bic.w	r2, r3, #7
 80079da:	4924      	ldr	r1, [pc, #144]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e2:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <HAL_RCC_ClockConfig+0x1b0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e036      	b.n	8007a62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a00:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	4918      	ldr	r1, [pc, #96]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a1e:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4910      	ldr	r1, [pc, #64]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a32:	f000 f825 	bl	8007a80 <HAL_RCC_GetSysClockFreq>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <HAL_RCC_ClockConfig+0x1b4>)
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	490c      	ldr	r1, [pc, #48]	; (8007a74 <HAL_RCC_ClockConfig+0x1b8>)
 8007a44:	5ccb      	ldrb	r3, [r1, r3]
 8007a46:	f003 031f 	and.w	r3, r3, #31
 8007a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a52:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <HAL_RCC_ClockConfig+0x1c0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fc f98e 	bl	8003d78 <HAL_InitTick>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8007a60:	7afb      	ldrb	r3, [r7, #11]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40022000 	.word	0x40022000
 8007a70:	40021000 	.word	0x40021000
 8007a74:	0800bd8c 	.word	0x0800bd8c
 8007a78:	20000104 	.word	0x20000104
 8007a7c:	20000108 	.word	0x20000108

08007a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a8e:	4b3e      	ldr	r3, [pc, #248]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f003 030c 	and.w	r3, r3, #12
 8007a96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a98:	4b3b      	ldr	r3, [pc, #236]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b0c      	cmp	r3, #12
 8007aac:	d121      	bne.n	8007af2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d11e      	bne.n	8007af2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ab4:	4b34      	ldr	r3, [pc, #208]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0308 	and.w	r3, r3, #8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d107      	bne.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ac0:	4b31      	ldr	r3, [pc, #196]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	61fb      	str	r3, [r7, #28]
 8007ace:	e005      	b.n	8007adc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007ad0:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	091b      	lsrs	r3, r3, #4
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007adc:	4a2b      	ldr	r2, [pc, #172]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007af0:	e00a      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d102      	bne.n	8007afe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	e004      	b.n	8007b08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d101      	bne.n	8007b08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b04:	4b23      	ldr	r3, [pc, #140]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8007b06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d134      	bne.n	8007b78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d003      	beq.n	8007b26 <HAL_RCC_GetSysClockFreq+0xa6>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d003      	beq.n	8007b2c <HAL_RCC_GetSysClockFreq+0xac>
 8007b24:	e005      	b.n	8007b32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007b26:	4b1a      	ldr	r3, [pc, #104]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8007b28:	617b      	str	r3, [r7, #20]
      break;
 8007b2a:	e005      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007b2c:	4b19      	ldr	r3, [pc, #100]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8007b2e:	617b      	str	r3, [r7, #20]
      break;
 8007b30:	e002      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	617b      	str	r3, [r7, #20]
      break;
 8007b36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b38:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	091b      	lsrs	r3, r3, #4
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	3301      	adds	r3, #1
 8007b44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	fb03 f202 	mul.w	r2, r3, r2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b5e:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	0e5b      	lsrs	r3, r3, #25
 8007b64:	f003 0303 	and.w	r3, r3, #3
 8007b68:	3301      	adds	r3, #1
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b78:	69bb      	ldr	r3, [r7, #24]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3724      	adds	r7, #36	; 0x24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	0800bd9c 	.word	0x0800bd9c
 8007b90:	00f42400 	.word	0x00f42400
 8007b94:	007a1200 	.word	0x007a1200

08007b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007ba4:	4b2a      	ldr	r3, [pc, #168]	; (8007c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007bb0:	f7ff fa00 	bl	8006fb4 <HAL_PWREx_GetVoltageRange>
 8007bb4:	6178      	str	r0, [r7, #20]
 8007bb6:	e014      	b.n	8007be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bb8:	4b25      	ldr	r3, [pc, #148]	; (8007c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbc:	4a24      	ldr	r2, [pc, #144]	; (8007c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8007bc4:	4b22      	ldr	r3, [pc, #136]	; (8007c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007bd0:	f7ff f9f0 	bl	8006fb4 <HAL_PWREx_GetVoltageRange>
 8007bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	4a1d      	ldr	r2, [pc, #116]	; (8007c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be8:	d10b      	bne.n	8007c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b80      	cmp	r3, #128	; 0x80
 8007bee:	d919      	bls.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8007bf4:	d902      	bls.n	8007bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	613b      	str	r3, [r7, #16]
 8007bfa:	e013      	b.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	e010      	b.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b80      	cmp	r3, #128	; 0x80
 8007c06:	d902      	bls.n	8007c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007c08:	2303      	movs	r3, #3
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	e00a      	b.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b80      	cmp	r3, #128	; 0x80
 8007c12:	d102      	bne.n	8007c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c14:	2302      	movs	r3, #2
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	e004      	b.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b70      	cmp	r3, #112	; 0x70
 8007c1e:	d101      	bne.n	8007c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c20:	2301      	movs	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c24:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f023 0207 	bic.w	r2, r3, #7
 8007c2c:	4909      	ldr	r1, [pc, #36]	; (8007c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c34:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d001      	beq.n	8007c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40021000 	.word	0x40021000
 8007c54:	40022000 	.word	0x40022000

08007c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c60:	2300      	movs	r3, #0
 8007c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c64:	2300      	movs	r3, #0
 8007c66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d031      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c7c:	d01a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007c7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007c82:	d814      	bhi.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007c88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c8c:	d10f      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007c8e:	4b5d      	ldr	r3, [pc, #372]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	4a5c      	ldr	r2, [pc, #368]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c9a:	e00c      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f9f0 	bl	8008088 <RCCEx_PLLSAI1_Config>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007cac:	e003      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cb6:	7cfb      	ldrb	r3, [r7, #19]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007cbc:	4b51      	ldr	r3, [pc, #324]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	494e      	ldr	r1, [pc, #312]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007cd2:	e001      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd4:	7cfb      	ldrb	r3, [r7, #19]
 8007cd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 809e 	beq.w	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007cea:	4b46      	ldr	r3, [pc, #280]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e000      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d00:	4b40      	ldr	r3, [pc, #256]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d04:	4a3f      	ldr	r2, [pc, #252]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d0c:	4b3d      	ldr	r3, [pc, #244]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d1c:	4b3a      	ldr	r3, [pc, #232]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a39      	ldr	r2, [pc, #228]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d28:	f7fc f876 	bl	8003e18 <HAL_GetTick>
 8007d2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d2e:	e009      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d30:	f7fc f872 	bl	8003e18 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d902      	bls.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	74fb      	strb	r3, [r7, #19]
        break;
 8007d42:	e005      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d44:	4b30      	ldr	r3, [pc, #192]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0ef      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007d50:	7cfb      	ldrb	r3, [r7, #19]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d15a      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d56:	4b2b      	ldr	r3, [pc, #172]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01e      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d019      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d7e:	4b21      	ldr	r3, [pc, #132]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d8e:	4b1d      	ldr	r3, [pc, #116]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d94:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d9e:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d016      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db0:	f7fc f832 	bl	8003e18 <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007db6:	e00b      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db8:	f7fc f82e 	bl	8003e18 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d902      	bls.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	74fb      	strb	r3, [r7, #19]
            break;
 8007dce:	e006      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0ec      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007dde:	7cfb      	ldrb	r3, [r7, #19]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007de4:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df2:	4904      	ldr	r1, [pc, #16]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007dfa:	e009      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007dfc:	7cfb      	ldrb	r3, [r7, #19]
 8007dfe:	74bb      	strb	r3, [r7, #18]
 8007e00:	e006      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007e02:	bf00      	nop
 8007e04:	40021000 	.word	0x40021000
 8007e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7cfb      	ldrb	r3, [r7, #19]
 8007e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e10:	7c7b      	ldrb	r3, [r7, #17]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d105      	bne.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e16:	4b9b      	ldr	r3, [pc, #620]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	4a9a      	ldr	r2, [pc, #616]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e2e:	4b95      	ldr	r3, [pc, #596]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e34:	f023 0203 	bic.w	r2, r3, #3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	4991      	ldr	r1, [pc, #580]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e50:	4b8c      	ldr	r3, [pc, #560]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e56:	f023 020c 	bic.w	r2, r3, #12
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	4989      	ldr	r1, [pc, #548]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e72:	4b84      	ldr	r3, [pc, #528]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	4980      	ldr	r1, [pc, #512]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e94:	4b7b      	ldr	r3, [pc, #492]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	4978      	ldr	r1, [pc, #480]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eb6:	4b73      	ldr	r3, [pc, #460]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	496f      	ldr	r1, [pc, #444]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ed8:	4b6a      	ldr	r3, [pc, #424]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	4967      	ldr	r1, [pc, #412]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007efa:	4b62      	ldr	r3, [pc, #392]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	495e      	ldr	r1, [pc, #376]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f1c:	4b59      	ldr	r3, [pc, #356]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	4956      	ldr	r1, [pc, #344]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f3e:	4b51      	ldr	r3, [pc, #324]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4c:	494d      	ldr	r1, [pc, #308]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d028      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007f60:	4b48      	ldr	r3, [pc, #288]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6e:	4945      	ldr	r1, [pc, #276]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007f80:	4b40      	ldr	r3, [pc, #256]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4a3f      	ldr	r2, [pc, #252]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f8a:	60d3      	str	r3, [r2, #12]
 8007f8c:	e011      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f96:	d10c      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f872 	bl	8008088 <RCCEx_PLLSAI1_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007fa8:	7cfb      	ldrb	r3, [r7, #19]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8007fae:	7cfb      	ldrb	r3, [r7, #19]
 8007fb0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d028      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fbe:	4b31      	ldr	r3, [pc, #196]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fcc:	492d      	ldr	r1, [pc, #180]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fdc:	d106      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fde:	4b29      	ldr	r3, [pc, #164]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	4a28      	ldr	r2, [pc, #160]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fe8:	60d3      	str	r3, [r2, #12]
 8007fea:	e011      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ff4:	d10c      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 f843 	bl	8008088 <RCCEx_PLLSAI1_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008006:	7cfb      	ldrb	r3, [r7, #19]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800800c:	7cfb      	ldrb	r3, [r7, #19]
 800800e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d01c      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800801c:	4b19      	ldr	r3, [pc, #100]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800801e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802a:	4916      	ldr	r1, [pc, #88]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800802c:	4313      	orrs	r3, r2
 800802e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803a:	d10c      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	2102      	movs	r1, #2
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f820 	bl	8008088 <RCCEx_PLLSAI1_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800804c:	7cfb      	ldrb	r3, [r7, #19]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8008052:	7cfb      	ldrb	r3, [r7, #19]
 8008054:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008068:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	4904      	ldr	r1, [pc, #16]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008078:	7cbb      	ldrb	r3, [r7, #18]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40021000 	.word	0x40021000

08008088 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008096:	4b74      	ldr	r3, [pc, #464]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d018      	beq.n	80080d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80080a2:	4b71      	ldr	r3, [pc, #452]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0203 	and.w	r2, r3, #3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d10d      	bne.n	80080ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
       ||
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80080ba:	4b6b      	ldr	r3, [pc, #428]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
       ||
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d047      	beq.n	800815e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
 80080d2:	e044      	b.n	800815e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d018      	beq.n	800810e <RCCEx_PLLSAI1_Config+0x86>
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d825      	bhi.n	800812c <RCCEx_PLLSAI1_Config+0xa4>
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d002      	beq.n	80080ea <RCCEx_PLLSAI1_Config+0x62>
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d009      	beq.n	80080fc <RCCEx_PLLSAI1_Config+0x74>
 80080e8:	e020      	b.n	800812c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80080ea:	4b5f      	ldr	r3, [pc, #380]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d11d      	bne.n	8008132 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080fa:	e01a      	b.n	8008132 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80080fc:	4b5a      	ldr	r3, [pc, #360]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008104:	2b00      	cmp	r3, #0
 8008106:	d116      	bne.n	8008136 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800810c:	e013      	b.n	8008136 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800810e:	4b56      	ldr	r3, [pc, #344]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10f      	bne.n	800813a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800811a:	4b53      	ldr	r3, [pc, #332]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800812a:	e006      	b.n	800813a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	73fb      	strb	r3, [r7, #15]
      break;
 8008130:	e004      	b.n	800813c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008132:	bf00      	nop
 8008134:	e002      	b.n	800813c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008136:	bf00      	nop
 8008138:	e000      	b.n	800813c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800813a:	bf00      	nop
    }

    if(status == HAL_OK)
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10d      	bne.n	800815e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008142:	4b49      	ldr	r3, [pc, #292]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6819      	ldr	r1, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	3b01      	subs	r3, #1
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	430b      	orrs	r3, r1
 8008158:	4943      	ldr	r1, [pc, #268]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800815a:	4313      	orrs	r3, r2
 800815c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d17c      	bne.n	800825e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008164:	4b40      	ldr	r3, [pc, #256]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a3f      	ldr	r2, [pc, #252]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800816a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800816e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008170:	f7fb fe52 	bl	8003e18 <HAL_GetTick>
 8008174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008176:	e009      	b.n	800818c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008178:	f7fb fe4e 	bl	8003e18 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d902      	bls.n	800818c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	73fb      	strb	r3, [r7, #15]
        break;
 800818a:	e005      	b.n	8008198 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1ef      	bne.n	8008178 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d15f      	bne.n	800825e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d110      	bne.n	80081c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081a4:	4b30      	ldr	r3, [pc, #192]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80081ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6892      	ldr	r2, [r2, #8]
 80081b4:	0211      	lsls	r1, r2, #8
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	68d2      	ldr	r2, [r2, #12]
 80081ba:	06d2      	lsls	r2, r2, #27
 80081bc:	430a      	orrs	r2, r1
 80081be:	492a      	ldr	r1, [pc, #168]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	610b      	str	r3, [r1, #16]
 80081c4:	e027      	b.n	8008216 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d112      	bne.n	80081f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081cc:	4b26      	ldr	r3, [pc, #152]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80081d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6892      	ldr	r2, [r2, #8]
 80081dc:	0211      	lsls	r1, r2, #8
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6912      	ldr	r2, [r2, #16]
 80081e2:	0852      	lsrs	r2, r2, #1
 80081e4:	3a01      	subs	r2, #1
 80081e6:	0552      	lsls	r2, r2, #21
 80081e8:	430a      	orrs	r2, r1
 80081ea:	491f      	ldr	r1, [pc, #124]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	610b      	str	r3, [r1, #16]
 80081f0:	e011      	b.n	8008216 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80081f2:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80081fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	6892      	ldr	r2, [r2, #8]
 8008202:	0211      	lsls	r1, r2, #8
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6952      	ldr	r2, [r2, #20]
 8008208:	0852      	lsrs	r2, r2, #1
 800820a:	3a01      	subs	r2, #1
 800820c:	0652      	lsls	r2, r2, #25
 800820e:	430a      	orrs	r2, r1
 8008210:	4915      	ldr	r1, [pc, #84]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008212:	4313      	orrs	r3, r2
 8008214:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a13      	ldr	r2, [pc, #76]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800821c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008220:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008222:	f7fb fdf9 	bl	8003e18 <HAL_GetTick>
 8008226:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008228:	e009      	b.n	800823e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800822a:	f7fb fdf5 	bl	8003e18 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d902      	bls.n	800823e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	73fb      	strb	r3, [r7, #15]
          break;
 800823c:	e005      	b.n	800824a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800823e:	4b0a      	ldr	r3, [pc, #40]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d0ef      	beq.n	800822a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4903      	ldr	r1, [pc, #12]	; (8008268 <RCCEx_PLLSAI1_Config+0x1e0>)
 800825a:	4313      	orrs	r3, r2
 800825c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	40021000 	.word	0x40021000

0800826c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d06c      	beq.n	8008358 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7fb fb68 	bl	8003968 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	22ca      	movs	r2, #202	; 0xca
 80082a6:	625a      	str	r2, [r3, #36]	; 0x24
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2253      	movs	r2, #83	; 0x53
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fa49 	bl	8008748 <RTC_EnterInitMode>
 80082b6:	4603      	mov	r3, r0
 80082b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d14b      	bne.n	8008358 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6899      	ldr	r1, [r3, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	68d2      	ldr	r2, [r2, #12]
 80082fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6919      	ldr	r1, [r3, #16]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	041a      	lsls	r2, r3, #16
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fa4d 	bl	80087b0 <RTC_ExitInitMode>
 8008316:	4603      	mov	r3, r0
 8008318:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d11b      	bne.n	8008358 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0203 	bic.w	r2, r2, #3
 800832e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69da      	ldr	r2, [r3, #28]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	22ff      	movs	r2, #255	; 0xff
 800834e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008362:	b590      	push	{r4, r7, lr}
 8008364:	b087      	sub	sp, #28
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_RTC_SetTime+0x1a>
 8008378:	2302      	movs	r3, #2
 800837a:	e08b      	b.n	8008494 <HAL_RTC_SetTime+0x132>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	22ca      	movs	r2, #202	; 0xca
 8008392:	625a      	str	r2, [r3, #36]	; 0x24
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2253      	movs	r2, #83	; 0x53
 800839a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f9d3 	bl	8008748 <RTC_EnterInitMode>
 80083a2:	4603      	mov	r3, r0
 80083a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80083a6:	7cfb      	ldrb	r3, [r7, #19]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d163      	bne.n	8008474 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d126      	bne.n	8008400 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fa2e 	bl	800882c <RTC_ByteToBcd2>
 80083d0:	4603      	mov	r3, r0
 80083d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	785b      	ldrb	r3, [r3, #1]
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 fa27 	bl	800882c <RTC_ByteToBcd2>
 80083de:	4603      	mov	r3, r0
 80083e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	789b      	ldrb	r3, [r3, #2]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fa1f 	bl	800882c <RTC_ByteToBcd2>
 80083ee:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80083f0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	78db      	ldrb	r3, [r3, #3]
 80083f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e018      	b.n	8008432 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	d102      	bne.n	8008414 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008420:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008426:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	78db      	ldrb	r3, [r3, #3]
 800842c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800842e:	4313      	orrs	r3, r2
 8008430:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800843c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008440:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008450:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6899      	ldr	r1, [r3, #8]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	431a      	orrs	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f9a0 	bl	80087b0 <RTC_ExitInitMode>
 8008470:	4603      	mov	r3, r0
 8008472:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	22ff      	movs	r2, #255	; 0xff
 800847a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800847c:	7cfb      	ldrb	r3, [r7, #19]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008492:	7cfb      	ldrb	r3, [r7, #19]
}
 8008494:	4618      	mov	r0, r3
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	bd90      	pop	{r4, r7, pc}

0800849c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80084ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	0c1b      	lsrs	r3, r3, #16
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	0d9b      	lsrs	r3, r3, #22
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d11a      	bne.n	800854a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f9a7 	bl	800886c <RTC_Bcd2ToByte>
 800851e:	4603      	mov	r3, r0
 8008520:	461a      	mov	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f99e 	bl	800886c <RTC_Bcd2ToByte>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	789b      	ldrb	r3, [r3, #2]
 800853c:	4618      	mov	r0, r3
 800853e:	f000 f995 	bl	800886c <RTC_Bcd2ToByte>
 8008542:	4603      	mov	r3, r0
 8008544:	461a      	mov	r2, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_RTC_SetDate+0x1a>
 800856a:	2302      	movs	r3, #2
 800856c:	e075      	b.n	800865a <HAL_RTC_SetDate+0x106>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2202      	movs	r2, #2
 800857a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10e      	bne.n	80085a2 <HAL_RTC_SetDate+0x4e>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	785b      	ldrb	r3, [r3, #1]
 8008594:	f023 0310 	bic.w	r3, r3, #16
 8008598:	b2db      	uxtb	r3, r3
 800859a:	330a      	adds	r3, #10
 800859c:	b2da      	uxtb	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11c      	bne.n	80085e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 f93d 	bl	800882c <RTC_ByteToBcd2>
 80085b2:	4603      	mov	r3, r0
 80085b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	785b      	ldrb	r3, [r3, #1]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f936 	bl	800882c <RTC_ByteToBcd2>
 80085c0:	4603      	mov	r3, r0
 80085c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80085c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	789b      	ldrb	r3, [r3, #2]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f92e 	bl	800882c <RTC_ByteToBcd2>
 80085d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80085dc:	4313      	orrs	r3, r2
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e00e      	b.n	8008600 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	78db      	ldrb	r3, [r3, #3]
 80085e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80085ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80085f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	22ca      	movs	r2, #202	; 0xca
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2253      	movs	r2, #83	; 0x53
 800860e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f899 	bl	8008748 <RTC_EnterInitMode>
 8008616:	4603      	mov	r3, r0
 8008618:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800861a:	7cfb      	ldrb	r3, [r7, #19]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10c      	bne.n	800863a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800862a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800862e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f8bd 	bl	80087b0 <RTC_ExitInitMode>
 8008636:	4603      	mov	r3, r0
 8008638:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	22ff      	movs	r2, #255	; 0xff
 8008640:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008642:	7cfb      	ldrb	r3, [r7, #19]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d103      	bne.n	8008650 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008658:	7cfb      	ldrb	r3, [r7, #19]
}
 800865a:	4618      	mov	r0, r3
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd90      	pop	{r4, r7, pc}

08008662 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800867c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	0c1b      	lsrs	r3, r3, #16
 8008682:	b2da      	uxtb	r2, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	b2da      	uxtb	r2, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	0b5b      	lsrs	r3, r3, #13
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11a      	bne.n	80086f2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	78db      	ldrb	r3, [r3, #3]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f8d3 	bl	800886c <RTC_Bcd2ToByte>
 80086c6:	4603      	mov	r3, r0
 80086c8:	461a      	mov	r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f8ca 	bl	800886c <RTC_Bcd2ToByte>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	789b      	ldrb	r3, [r3, #2]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f8c1 	bl	800886c <RTC_Bcd2ToByte>
 80086ea:	4603      	mov	r3, r0
 80086ec:	461a      	mov	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68da      	ldr	r2, [r3, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008712:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008714:	f7fb fb80 	bl	8003e18 <HAL_GetTick>
 8008718:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800871a:	e009      	b.n	8008730 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800871c:	f7fb fb7c 	bl	8003e18 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800872a:	d901      	bls.n	8008730 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e007      	b.n	8008740 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0ee      	beq.n	800871c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d120      	bne.n	80087a4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800876c:	f7fb fb54 	bl	8003e18 <HAL_GetTick>
 8008770:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008772:	e00d      	b.n	8008790 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008774:	f7fb fb50 	bl	8003e18 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008782:	d905      	bls.n	8008790 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2203      	movs	r2, #3
 800878c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d102      	bne.n	80087a4 <RTC_EnterInitMode+0x5c>
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d1e7      	bne.n	8008774 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80087bc:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <RTC_ExitInitMode+0x78>)
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	4a19      	ldr	r2, [pc, #100]	; (8008828 <RTC_ExitInitMode+0x78>)
 80087c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <RTC_ExitInitMode+0x78>)
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10c      	bne.n	80087ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ff91 	bl	80086fc <HAL_RTC_WaitForSynchro>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01e      	beq.n	800881e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2203      	movs	r2, #3
 80087e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	e017      	b.n	800881e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80087ee:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <RTC_ExitInitMode+0x78>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <RTC_ExitInitMode+0x78>)
 80087f4:	f023 0320 	bic.w	r3, r3, #32
 80087f8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff ff7e 	bl	80086fc <HAL_RTC_WaitForSynchro>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2203      	movs	r2, #3
 800880a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <RTC_ExitInitMode+0x78>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	4a04      	ldr	r2, [pc, #16]	; (8008828 <RTC_ExitInitMode+0x78>)
 8008818:	f043 0320 	orr.w	r3, r3, #32
 800881c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40002800 	.word	0x40002800

0800882c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800883e:	e005      	b.n	800884c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3301      	adds	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	3b0a      	subs	r3, #10
 800884a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	2b09      	cmp	r3, #9
 8008850:	d8f6      	bhi.n	8008840 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	b2da      	uxtb	r2, r3
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	4313      	orrs	r3, r2
 800885e:	b2db      	uxtb	r3, r3
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	b2db      	uxtb	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	0092      	lsls	r2, r2, #2
 8008880:	4413      	add	r3, r2
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8008886:	79fb      	ldrb	r3, [r7, #7]
 8008888:	f003 030f 	and.w	r3, r3, #15
 800888c:	b2da      	uxtb	r2, r3
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4413      	add	r3, r2
 8008892:	b2db      	uxtb	r3, r3
}
 8008894:	4618      	mov	r0, r3
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b087      	sub	sp, #28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3350      	adds	r3, #80	; 0x50
 80088b2:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	009a      	lsls	r2, r3, #2
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	4413      	add	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	461a      	mov	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6013      	str	r3, [r2, #0]
}
 80088c6:	bf00      	nop
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e049      	b.n	8008978 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7fb f865 	bl	80039c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3304      	adds	r3, #4
 800890e:	4619      	mov	r1, r3
 8008910:	4610      	mov	r0, r2
 8008912:	f000 faaf 	bl	8008e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <HAL_TIM_PWM_Start+0x24>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e03c      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d109      	bne.n	80089be <HAL_TIM_PWM_Start+0x3e>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	bf14      	ite	ne
 80089b6:	2301      	movne	r3, #1
 80089b8:	2300      	moveq	r3, #0
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	e02f      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d109      	bne.n	80089d8 <HAL_TIM_PWM_Start+0x58>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	bf14      	ite	ne
 80089d0:	2301      	movne	r3, #1
 80089d2:	2300      	moveq	r3, #0
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	e022      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b0c      	cmp	r3, #12
 80089dc:	d109      	bne.n	80089f2 <HAL_TIM_PWM_Start+0x72>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	e015      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b10      	cmp	r3, #16
 80089f6:	d109      	bne.n	8008a0c <HAL_TIM_PWM_Start+0x8c>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	bf14      	ite	ne
 8008a04:	2301      	movne	r3, #1
 8008a06:	2300      	moveq	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e008      	b.n	8008a1e <HAL_TIM_PWM_Start+0x9e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e07e      	b.n	8008b24 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0xb6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a34:	e023      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_PWM_Start+0xc6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a44:	e01b      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d104      	bne.n	8008a56 <HAL_TIM_PWM_Start+0xd6>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a54:	e013      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b0c      	cmp	r3, #12
 8008a5a:	d104      	bne.n	8008a66 <HAL_TIM_PWM_Start+0xe6>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a64:	e00b      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d104      	bne.n	8008a76 <HAL_TIM_PWM_Start+0xf6>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a74:	e003      	b.n	8008a7e <HAL_TIM_PWM_Start+0xfe>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2202      	movs	r2, #2
 8008a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2201      	movs	r2, #1
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fcd6 	bl	8009438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <HAL_TIM_PWM_Start+0x1ac>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_TIM_PWM_Start+0x12a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a25      	ldr	r2, [pc, #148]	; (8008b30 <HAL_TIM_PWM_Start+0x1b0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_TIM_PWM_Start+0x12a>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_TIM_PWM_Start+0x1b4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d101      	bne.n	8008aae <HAL_TIM_PWM_Start+0x12e>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <HAL_TIM_PWM_Start+0x130>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ac2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a18      	ldr	r2, [pc, #96]	; (8008b2c <HAL_TIM_PWM_Start+0x1ac>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d009      	beq.n	8008ae2 <HAL_TIM_PWM_Start+0x162>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad6:	d004      	beq.n	8008ae2 <HAL_TIM_PWM_Start+0x162>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <HAL_TIM_PWM_Start+0x1b0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d115      	bne.n	8008b0e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689a      	ldr	r2, [r3, #8]
 8008ae8:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <HAL_TIM_PWM_Start+0x1b8>)
 8008aea:	4013      	ands	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b06      	cmp	r3, #6
 8008af2:	d015      	beq.n	8008b20 <HAL_TIM_PWM_Start+0x1a0>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afa:	d011      	beq.n	8008b20 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0201 	orr.w	r2, r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b0c:	e008      	b.n	8008b20 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f042 0201 	orr.w	r2, r2, #1
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	e000      	b.n	8008b22 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40012c00 	.word	0x40012c00
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	00010007 	.word	0x00010007

08008b3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fc72 	bl	8009438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a39      	ldr	r2, [pc, #228]	; (8008c40 <HAL_TIM_PWM_Stop+0x104>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <HAL_TIM_PWM_Stop+0x36>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a38      	ldr	r2, [pc, #224]	; (8008c44 <HAL_TIM_PWM_Stop+0x108>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <HAL_TIM_PWM_Stop+0x36>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a36      	ldr	r2, [pc, #216]	; (8008c48 <HAL_TIM_PWM_Stop+0x10c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d101      	bne.n	8008b76 <HAL_TIM_PWM_Stop+0x3a>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <HAL_TIM_PWM_Stop+0x3c>
 8008b76:	2300      	movs	r3, #0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6a1a      	ldr	r2, [r3, #32]
 8008b82:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b86:	4013      	ands	r3, r2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10f      	bne.n	8008bac <HAL_TIM_PWM_Stop+0x70>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6a1a      	ldr	r2, [r3, #32]
 8008b92:	f240 4344 	movw	r3, #1092	; 0x444
 8008b96:	4013      	ands	r3, r2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d107      	bne.n	8008bac <HAL_TIM_PWM_Stop+0x70>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008baa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a1a      	ldr	r2, [r3, #32]
 8008bb2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10f      	bne.n	8008bdc <HAL_TIM_PWM_Stop+0xa0>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6a1a      	ldr	r2, [r3, #32]
 8008bc2:	f240 4344 	movw	r3, #1092	; 0x444
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d107      	bne.n	8008bdc <HAL_TIM_PWM_Stop+0xa0>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0201 	bic.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d104      	bne.n	8008bec <HAL_TIM_PWM_Stop+0xb0>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bea:	e023      	b.n	8008c34 <HAL_TIM_PWM_Stop+0xf8>
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d104      	bne.n	8008bfc <HAL_TIM_PWM_Stop+0xc0>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bfa:	e01b      	b.n	8008c34 <HAL_TIM_PWM_Stop+0xf8>
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b08      	cmp	r3, #8
 8008c00:	d104      	bne.n	8008c0c <HAL_TIM_PWM_Stop+0xd0>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c0a:	e013      	b.n	8008c34 <HAL_TIM_PWM_Stop+0xf8>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b0c      	cmp	r3, #12
 8008c10:	d104      	bne.n	8008c1c <HAL_TIM_PWM_Stop+0xe0>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c1a:	e00b      	b.n	8008c34 <HAL_TIM_PWM_Stop+0xf8>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	d104      	bne.n	8008c2c <HAL_TIM_PWM_Stop+0xf0>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c2a:	e003      	b.n	8008c34 <HAL_TIM_PWM_Stop+0xf8>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	40012c00 	.word	0x40012c00
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40014400 	.word	0x40014400

08008c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d101      	bne.n	8008c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c66:	2302      	movs	r3, #2
 8008c68:	e0ff      	b.n	8008e6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b14      	cmp	r3, #20
 8008c76:	f200 80f0 	bhi.w	8008e5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c7a:	a201      	add	r2, pc, #4	; (adr r2, 8008c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008cd5 	.word	0x08008cd5
 8008c84:	08008e5b 	.word	0x08008e5b
 8008c88:	08008e5b 	.word	0x08008e5b
 8008c8c:	08008e5b 	.word	0x08008e5b
 8008c90:	08008d15 	.word	0x08008d15
 8008c94:	08008e5b 	.word	0x08008e5b
 8008c98:	08008e5b 	.word	0x08008e5b
 8008c9c:	08008e5b 	.word	0x08008e5b
 8008ca0:	08008d57 	.word	0x08008d57
 8008ca4:	08008e5b 	.word	0x08008e5b
 8008ca8:	08008e5b 	.word	0x08008e5b
 8008cac:	08008e5b 	.word	0x08008e5b
 8008cb0:	08008d97 	.word	0x08008d97
 8008cb4:	08008e5b 	.word	0x08008e5b
 8008cb8:	08008e5b 	.word	0x08008e5b
 8008cbc:	08008e5b 	.word	0x08008e5b
 8008cc0:	08008dd9 	.word	0x08008dd9
 8008cc4:	08008e5b 	.word	0x08008e5b
 8008cc8:	08008e5b 	.word	0x08008e5b
 8008ccc:	08008e5b 	.word	0x08008e5b
 8008cd0:	08008e19 	.word	0x08008e19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f92e 	bl	8008f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699a      	ldr	r2, [r3, #24]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0208 	orr.w	r2, r2, #8
 8008cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	699a      	ldr	r2, [r3, #24]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0204 	bic.w	r2, r2, #4
 8008cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6999      	ldr	r1, [r3, #24]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	619a      	str	r2, [r3, #24]
      break;
 8008d12:	e0a5      	b.n	8008e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f98a 	bl	8009034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6999      	ldr	r1, [r3, #24]
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	021a      	lsls	r2, r3, #8
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	619a      	str	r2, [r3, #24]
      break;
 8008d54:	e084      	b.n	8008e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f9e3 	bl	8009128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f042 0208 	orr.w	r2, r2, #8
 8008d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69da      	ldr	r2, [r3, #28]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0204 	bic.w	r2, r2, #4
 8008d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69d9      	ldr	r1, [r3, #28]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	691a      	ldr	r2, [r3, #16]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	61da      	str	r2, [r3, #28]
      break;
 8008d94:	e064      	b.n	8008e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68b9      	ldr	r1, [r7, #8]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 fa3b 	bl	8009218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69da      	ldr	r2, [r3, #28]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69d9      	ldr	r1, [r3, #28]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	021a      	lsls	r2, r3, #8
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	61da      	str	r2, [r3, #28]
      break;
 8008dd6:	e043      	b.n	8008e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fa78 	bl	80092d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0208 	orr.w	r2, r2, #8
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0204 	bic.w	r2, r2, #4
 8008e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	691a      	ldr	r2, [r3, #16]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e16:	e023      	b.n	8008e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fab0 	bl	8009384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	021a      	lsls	r2, r3, #8
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e58:	e002      	b.n	8008e60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop

08008e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a2a      	ldr	r2, [pc, #168]	; (8008f30 <TIM_Base_SetConfig+0xbc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_Base_SetConfig+0x20>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e92:	d108      	bne.n	8008ea6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a21      	ldr	r2, [pc, #132]	; (8008f30 <TIM_Base_SetConfig+0xbc>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00b      	beq.n	8008ec6 <TIM_Base_SetConfig+0x52>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb4:	d007      	beq.n	8008ec6 <TIM_Base_SetConfig+0x52>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <TIM_Base_SetConfig+0xc0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d003      	beq.n	8008ec6 <TIM_Base_SetConfig+0x52>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a1d      	ldr	r2, [pc, #116]	; (8008f38 <TIM_Base_SetConfig+0xc4>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d108      	bne.n	8008ed8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ecc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a0c      	ldr	r2, [pc, #48]	; (8008f30 <TIM_Base_SetConfig+0xbc>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_Base_SetConfig+0xa0>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a0b      	ldr	r2, [pc, #44]	; (8008f34 <TIM_Base_SetConfig+0xc0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_Base_SetConfig+0xa0>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a0a      	ldr	r2, [pc, #40]	; (8008f38 <TIM_Base_SetConfig+0xc4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d103      	bne.n	8008f1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	615a      	str	r2, [r3, #20]
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40012c00 	.word	0x40012c00
 8008f34:	40014000 	.word	0x40014000
 8008f38:	40014400 	.word	0x40014400

08008f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f023 0201 	bic.w	r2, r3, #1
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f023 0302 	bic.w	r3, r3, #2
 8008f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a24      	ldr	r2, [pc, #144]	; (8009028 <TIM_OC1_SetConfig+0xec>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d007      	beq.n	8008fac <TIM_OC1_SetConfig+0x70>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a23      	ldr	r2, [pc, #140]	; (800902c <TIM_OC1_SetConfig+0xf0>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <TIM_OC1_SetConfig+0x70>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a22      	ldr	r2, [pc, #136]	; (8009030 <TIM_OC1_SetConfig+0xf4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d10c      	bne.n	8008fc6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f023 0308 	bic.w	r3, r3, #8
 8008fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f023 0304 	bic.w	r3, r3, #4
 8008fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a17      	ldr	r2, [pc, #92]	; (8009028 <TIM_OC1_SetConfig+0xec>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d007      	beq.n	8008fde <TIM_OC1_SetConfig+0xa2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a16      	ldr	r2, [pc, #88]	; (800902c <TIM_OC1_SetConfig+0xf0>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d003      	beq.n	8008fde <TIM_OC1_SetConfig+0xa2>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a15      	ldr	r2, [pc, #84]	; (8009030 <TIM_OC1_SetConfig+0xf4>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d111      	bne.n	8009002 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	621a      	str	r2, [r3, #32]
}
 800901c:	bf00      	nop
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	40012c00 	.word	0x40012c00
 800902c:	40014000 	.word	0x40014000
 8009030:	40014400 	.word	0x40014400

08009034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	f023 0210 	bic.w	r2, r3, #16
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	021b      	lsls	r3, r3, #8
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f023 0320 	bic.w	r3, r3, #32
 8009082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a22      	ldr	r2, [pc, #136]	; (800911c <TIM_OC2_SetConfig+0xe8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d10d      	bne.n	80090b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800909e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	011b      	lsls	r3, r3, #4
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a19      	ldr	r2, [pc, #100]	; (800911c <TIM_OC2_SetConfig+0xe8>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d007      	beq.n	80090cc <TIM_OC2_SetConfig+0x98>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a18      	ldr	r2, [pc, #96]	; (8009120 <TIM_OC2_SetConfig+0xec>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d003      	beq.n	80090cc <TIM_OC2_SetConfig+0x98>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a17      	ldr	r2, [pc, #92]	; (8009124 <TIM_OC2_SetConfig+0xf0>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d113      	bne.n	80090f4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	621a      	str	r2, [r3, #32]
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40014000 	.word	0x40014000
 8009124:	40014400 	.word	0x40014400

08009128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800915a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0303 	bic.w	r3, r3, #3
 8009162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a21      	ldr	r2, [pc, #132]	; (800920c <TIM_OC3_SetConfig+0xe4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d10d      	bne.n	80091a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	021b      	lsls	r3, r3, #8
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	4313      	orrs	r3, r2
 800919c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a18      	ldr	r2, [pc, #96]	; (800920c <TIM_OC3_SetConfig+0xe4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d007      	beq.n	80091be <TIM_OC3_SetConfig+0x96>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a17      	ldr	r2, [pc, #92]	; (8009210 <TIM_OC3_SetConfig+0xe8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d003      	beq.n	80091be <TIM_OC3_SetConfig+0x96>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a16      	ldr	r2, [pc, #88]	; (8009214 <TIM_OC3_SetConfig+0xec>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d113      	bne.n	80091e6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	621a      	str	r2, [r3, #32]
}
 8009200:	bf00      	nop
 8009202:	371c      	adds	r7, #28
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	40012c00 	.word	0x40012c00
 8009210:	40014000 	.word	0x40014000
 8009214:	40014400 	.word	0x40014400

08009218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800924a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	031b      	lsls	r3, r3, #12
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4313      	orrs	r3, r2
 8009272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <TIM_OC4_SetConfig+0xb0>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d007      	beq.n	800928c <TIM_OC4_SetConfig+0x74>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a13      	ldr	r2, [pc, #76]	; (80092cc <TIM_OC4_SetConfig+0xb4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d003      	beq.n	800928c <TIM_OC4_SetConfig+0x74>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a12      	ldr	r2, [pc, #72]	; (80092d0 <TIM_OC4_SetConfig+0xb8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d109      	bne.n	80092a0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	019b      	lsls	r3, r3, #6
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	621a      	str	r2, [r3, #32]
}
 80092ba:	bf00      	nop
 80092bc:	371c      	adds	r7, #28
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	40012c00 	.word	0x40012c00
 80092cc:	40014000 	.word	0x40014000
 80092d0:	40014400 	.word	0x40014400

080092d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009318:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	041b      	lsls	r3, r3, #16
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a13      	ldr	r2, [pc, #76]	; (8009378 <TIM_OC5_SetConfig+0xa4>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d007      	beq.n	800933e <TIM_OC5_SetConfig+0x6a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a12      	ldr	r2, [pc, #72]	; (800937c <TIM_OC5_SetConfig+0xa8>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d003      	beq.n	800933e <TIM_OC5_SetConfig+0x6a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a11      	ldr	r2, [pc, #68]	; (8009380 <TIM_OC5_SetConfig+0xac>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d109      	bne.n	8009352 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009344:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	021b      	lsls	r3, r3, #8
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	621a      	str	r2, [r3, #32]
}
 800936c:	bf00      	nop
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	40012c00 	.word	0x40012c00
 800937c:	40014000 	.word	0x40014000
 8009380:	40014400 	.word	0x40014400

08009384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	051b      	lsls	r3, r3, #20
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a14      	ldr	r2, [pc, #80]	; (800942c <TIM_OC6_SetConfig+0xa8>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d007      	beq.n	80093f0 <TIM_OC6_SetConfig+0x6c>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a13      	ldr	r2, [pc, #76]	; (8009430 <TIM_OC6_SetConfig+0xac>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d003      	beq.n	80093f0 <TIM_OC6_SetConfig+0x6c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a12      	ldr	r2, [pc, #72]	; (8009434 <TIM_OC6_SetConfig+0xb0>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d109      	bne.n	8009404 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	029b      	lsls	r3, r3, #10
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	621a      	str	r2, [r3, #32]
}
 800941e:	bf00      	nop
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40012c00 	.word	0x40012c00
 8009430:	40014000 	.word	0x40014000
 8009434:	40014400 	.word	0x40014400

08009438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f003 031f 	and.w	r3, r3, #31
 800944a:	2201      	movs	r2, #1
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a1a      	ldr	r2, [r3, #32]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	43db      	mvns	r3, r3
 800945a:	401a      	ands	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a1a      	ldr	r2, [r3, #32]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f003 031f 	and.w	r3, r3, #31
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	fa01 f303 	lsl.w	r3, r1, r3
 8009470:	431a      	orrs	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	621a      	str	r2, [r3, #32]
}
 8009476:	bf00      	nop
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
	...

08009484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009498:	2302      	movs	r3, #2
 800949a:	e04f      	b.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a21      	ldr	r2, [pc, #132]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d108      	bne.n	80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a14      	ldr	r2, [pc, #80]	; (8009548 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d009      	beq.n	8009510 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009504:	d004      	beq.n	8009510 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a10      	ldr	r2, [pc, #64]	; (800954c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10c      	bne.n	800952a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	4313      	orrs	r3, r2
 8009520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	40012c00 	.word	0x40012c00
 800954c:	40014000 	.word	0x40014000

08009550 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009564:	2b01      	cmp	r3, #1
 8009566:	d101      	bne.n	800956c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009568:	2302      	movs	r3, #2
 800956a:	e060      	b.n	800962e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	4313      	orrs	r3, r2
 8009580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	041b      	lsls	r3, r3, #16
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a14      	ldr	r2, [pc, #80]	; (800963c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d115      	bne.n	800961c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	051b      	lsls	r3, r3, #20
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	4313      	orrs	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40012c00 	.word	0x40012c00

08009640 <__errno>:
 8009640:	4b01      	ldr	r3, [pc, #4]	; (8009648 <__errno+0x8>)
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000110 	.word	0x20000110

0800964c <__libc_init_array>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4d0d      	ldr	r5, [pc, #52]	; (8009684 <__libc_init_array+0x38>)
 8009650:	4c0d      	ldr	r4, [pc, #52]	; (8009688 <__libc_init_array+0x3c>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	2600      	movs	r6, #0
 8009658:	42a6      	cmp	r6, r4
 800965a:	d109      	bne.n	8009670 <__libc_init_array+0x24>
 800965c:	4d0b      	ldr	r5, [pc, #44]	; (800968c <__libc_init_array+0x40>)
 800965e:	4c0c      	ldr	r4, [pc, #48]	; (8009690 <__libc_init_array+0x44>)
 8009660:	f002 fb32 	bl	800bcc8 <_init>
 8009664:	1b64      	subs	r4, r4, r5
 8009666:	10a4      	asrs	r4, r4, #2
 8009668:	2600      	movs	r6, #0
 800966a:	42a6      	cmp	r6, r4
 800966c:	d105      	bne.n	800967a <__libc_init_array+0x2e>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	f855 3b04 	ldr.w	r3, [r5], #4
 8009674:	4798      	blx	r3
 8009676:	3601      	adds	r6, #1
 8009678:	e7ee      	b.n	8009658 <__libc_init_array+0xc>
 800967a:	f855 3b04 	ldr.w	r3, [r5], #4
 800967e:	4798      	blx	r3
 8009680:	3601      	adds	r6, #1
 8009682:	e7f2      	b.n	800966a <__libc_init_array+0x1e>
 8009684:	0800c0d4 	.word	0x0800c0d4
 8009688:	0800c0d4 	.word	0x0800c0d4
 800968c:	0800c0d4 	.word	0x0800c0d4
 8009690:	0800c0d8 	.word	0x0800c0d8

08009694 <localtime>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <localtime+0x30>)
 8009698:	681d      	ldr	r5, [r3, #0]
 800969a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800969c:	4604      	mov	r4, r0
 800969e:	b953      	cbnz	r3, 80096b6 <localtime+0x22>
 80096a0:	2024      	movs	r0, #36	; 0x24
 80096a2:	f000 f909 	bl	80098b8 <malloc>
 80096a6:	4602      	mov	r2, r0
 80096a8:	63e8      	str	r0, [r5, #60]	; 0x3c
 80096aa:	b920      	cbnz	r0, 80096b6 <localtime+0x22>
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <localtime+0x34>)
 80096ae:	4807      	ldr	r0, [pc, #28]	; (80096cc <localtime+0x38>)
 80096b0:	2132      	movs	r1, #50	; 0x32
 80096b2:	f000 fc73 	bl	8009f9c <__assert_func>
 80096b6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80096b8:	4620      	mov	r0, r4
 80096ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096be:	f000 b807 	b.w	80096d0 <localtime_r>
 80096c2:	bf00      	nop
 80096c4:	20000110 	.word	0x20000110
 80096c8:	0800bdd0 	.word	0x0800bdd0
 80096cc:	0800bde7 	.word	0x0800bde7

080096d0 <localtime_r>:
 80096d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80096d4:	4680      	mov	r8, r0
 80096d6:	9101      	str	r1, [sp, #4]
 80096d8:	f000 fcd4 	bl	800a084 <__gettzinfo>
 80096dc:	9901      	ldr	r1, [sp, #4]
 80096de:	4605      	mov	r5, r0
 80096e0:	4640      	mov	r0, r8
 80096e2:	f000 fcd3 	bl	800a08c <gmtime_r>
 80096e6:	6943      	ldr	r3, [r0, #20]
 80096e8:	0799      	lsls	r1, r3, #30
 80096ea:	4604      	mov	r4, r0
 80096ec:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80096f0:	d105      	bne.n	80096fe <localtime_r+0x2e>
 80096f2:	2264      	movs	r2, #100	; 0x64
 80096f4:	fb97 f3f2 	sdiv	r3, r7, r2
 80096f8:	fb02 7313 	mls	r3, r2, r3, r7
 80096fc:	bb73      	cbnz	r3, 800975c <localtime_r+0x8c>
 80096fe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009702:	fb97 f6f3 	sdiv	r6, r7, r3
 8009706:	fb03 7616 	mls	r6, r3, r6, r7
 800970a:	fab6 f386 	clz	r3, r6
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	4e67      	ldr	r6, [pc, #412]	; (80098b0 <localtime_r+0x1e0>)
 8009712:	2230      	movs	r2, #48	; 0x30
 8009714:	fb02 6603 	mla	r6, r2, r3, r6
 8009718:	f000 faae 	bl	8009c78 <__tz_lock>
 800971c:	f000 fab8 	bl	8009c90 <_tzset_unlocked>
 8009720:	4b64      	ldr	r3, [pc, #400]	; (80098b4 <localtime_r+0x1e4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	b34b      	cbz	r3, 800977a <localtime_r+0xaa>
 8009726:	686b      	ldr	r3, [r5, #4]
 8009728:	42bb      	cmp	r3, r7
 800972a:	d119      	bne.n	8009760 <localtime_r+0x90>
 800972c:	682f      	ldr	r7, [r5, #0]
 800972e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009732:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009736:	b9df      	cbnz	r7, 8009770 <localtime_r+0xa0>
 8009738:	4282      	cmp	r2, r0
 800973a:	eb73 0101 	sbcs.w	r1, r3, r1
 800973e:	da23      	bge.n	8009788 <localtime_r+0xb8>
 8009740:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009744:	4282      	cmp	r2, r0
 8009746:	eb73 0701 	sbcs.w	r7, r3, r1
 800974a:	bfb4      	ite	lt
 800974c:	2701      	movlt	r7, #1
 800974e:	2700      	movge	r7, #0
 8009750:	4282      	cmp	r2, r0
 8009752:	418b      	sbcs	r3, r1
 8009754:	6227      	str	r7, [r4, #32]
 8009756:	db19      	blt.n	800978c <localtime_r+0xbc>
 8009758:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800975a:	e018      	b.n	800978e <localtime_r+0xbe>
 800975c:	2301      	movs	r3, #1
 800975e:	e7d7      	b.n	8009710 <localtime_r+0x40>
 8009760:	4638      	mov	r0, r7
 8009762:	f000 f9df 	bl	8009b24 <__tzcalc_limits>
 8009766:	2800      	cmp	r0, #0
 8009768:	d1e0      	bne.n	800972c <localtime_r+0x5c>
 800976a:	f04f 33ff 	mov.w	r3, #4294967295
 800976e:	e004      	b.n	800977a <localtime_r+0xaa>
 8009770:	4282      	cmp	r2, r0
 8009772:	eb73 0101 	sbcs.w	r1, r3, r1
 8009776:	da02      	bge.n	800977e <localtime_r+0xae>
 8009778:	2300      	movs	r3, #0
 800977a:	6223      	str	r3, [r4, #32]
 800977c:	e7ec      	b.n	8009758 <localtime_r+0x88>
 800977e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009782:	4282      	cmp	r2, r0
 8009784:	418b      	sbcs	r3, r1
 8009786:	daf7      	bge.n	8009778 <localtime_r+0xa8>
 8009788:	2301      	movs	r3, #1
 800978a:	6223      	str	r3, [r4, #32]
 800978c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800978e:	6861      	ldr	r1, [r4, #4]
 8009790:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009794:	203c      	movs	r0, #60	; 0x3c
 8009796:	fb93 f5f2 	sdiv	r5, r3, r2
 800979a:	fb02 3315 	mls	r3, r2, r5, r3
 800979e:	fb93 f2f0 	sdiv	r2, r3, r0
 80097a2:	fb00 3012 	mls	r0, r0, r2, r3
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	1a89      	subs	r1, r1, r2
 80097aa:	68a2      	ldr	r2, [r4, #8]
 80097ac:	6061      	str	r1, [r4, #4]
 80097ae:	1a1b      	subs	r3, r3, r0
 80097b0:	1b52      	subs	r2, r2, r5
 80097b2:	2b3b      	cmp	r3, #59	; 0x3b
 80097b4:	6023      	str	r3, [r4, #0]
 80097b6:	60a2      	str	r2, [r4, #8]
 80097b8:	dd35      	ble.n	8009826 <localtime_r+0x156>
 80097ba:	3101      	adds	r1, #1
 80097bc:	6061      	str	r1, [r4, #4]
 80097be:	3b3c      	subs	r3, #60	; 0x3c
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	2b3b      	cmp	r3, #59	; 0x3b
 80097c6:	dd34      	ble.n	8009832 <localtime_r+0x162>
 80097c8:	3201      	adds	r2, #1
 80097ca:	60a2      	str	r2, [r4, #8]
 80097cc:	3b3c      	subs	r3, #60	; 0x3c
 80097ce:	6063      	str	r3, [r4, #4]
 80097d0:	68a3      	ldr	r3, [r4, #8]
 80097d2:	2b17      	cmp	r3, #23
 80097d4:	dd33      	ble.n	800983e <localtime_r+0x16e>
 80097d6:	69e2      	ldr	r2, [r4, #28]
 80097d8:	3201      	adds	r2, #1
 80097da:	61e2      	str	r2, [r4, #28]
 80097dc:	69a2      	ldr	r2, [r4, #24]
 80097de:	3201      	adds	r2, #1
 80097e0:	2a06      	cmp	r2, #6
 80097e2:	bfc8      	it	gt
 80097e4:	2200      	movgt	r2, #0
 80097e6:	61a2      	str	r2, [r4, #24]
 80097e8:	68e2      	ldr	r2, [r4, #12]
 80097ea:	3b18      	subs	r3, #24
 80097ec:	3201      	adds	r2, #1
 80097ee:	60a3      	str	r3, [r4, #8]
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	60e2      	str	r2, [r4, #12]
 80097f4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80097f8:	428a      	cmp	r2, r1
 80097fa:	dd0e      	ble.n	800981a <localtime_r+0x14a>
 80097fc:	2b0b      	cmp	r3, #11
 80097fe:	eba2 0201 	sub.w	r2, r2, r1
 8009802:	60e2      	str	r2, [r4, #12]
 8009804:	f103 0201 	add.w	r2, r3, #1
 8009808:	bf09      	itett	eq
 800980a:	6963      	ldreq	r3, [r4, #20]
 800980c:	6122      	strne	r2, [r4, #16]
 800980e:	2200      	moveq	r2, #0
 8009810:	3301      	addeq	r3, #1
 8009812:	bf02      	ittt	eq
 8009814:	6122      	streq	r2, [r4, #16]
 8009816:	6163      	streq	r3, [r4, #20]
 8009818:	61e2      	streq	r2, [r4, #28]
 800981a:	f000 fa33 	bl	8009c84 <__tz_unlock>
 800981e:	4620      	mov	r0, r4
 8009820:	b002      	add	sp, #8
 8009822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009826:	2b00      	cmp	r3, #0
 8009828:	dacb      	bge.n	80097c2 <localtime_r+0xf2>
 800982a:	3901      	subs	r1, #1
 800982c:	6061      	str	r1, [r4, #4]
 800982e:	333c      	adds	r3, #60	; 0x3c
 8009830:	e7c6      	b.n	80097c0 <localtime_r+0xf0>
 8009832:	2b00      	cmp	r3, #0
 8009834:	dacc      	bge.n	80097d0 <localtime_r+0x100>
 8009836:	3a01      	subs	r2, #1
 8009838:	60a2      	str	r2, [r4, #8]
 800983a:	333c      	adds	r3, #60	; 0x3c
 800983c:	e7c7      	b.n	80097ce <localtime_r+0xfe>
 800983e:	2b00      	cmp	r3, #0
 8009840:	daeb      	bge.n	800981a <localtime_r+0x14a>
 8009842:	69e2      	ldr	r2, [r4, #28]
 8009844:	3a01      	subs	r2, #1
 8009846:	61e2      	str	r2, [r4, #28]
 8009848:	69a2      	ldr	r2, [r4, #24]
 800984a:	3a01      	subs	r2, #1
 800984c:	bf48      	it	mi
 800984e:	2206      	movmi	r2, #6
 8009850:	61a2      	str	r2, [r4, #24]
 8009852:	68e2      	ldr	r2, [r4, #12]
 8009854:	3318      	adds	r3, #24
 8009856:	3a01      	subs	r2, #1
 8009858:	60e2      	str	r2, [r4, #12]
 800985a:	60a3      	str	r3, [r4, #8]
 800985c:	2a00      	cmp	r2, #0
 800985e:	d1dc      	bne.n	800981a <localtime_r+0x14a>
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	3b01      	subs	r3, #1
 8009864:	d405      	bmi.n	8009872 <localtime_r+0x1a2>
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800986e:	60e3      	str	r3, [r4, #12]
 8009870:	e7d3      	b.n	800981a <localtime_r+0x14a>
 8009872:	230b      	movs	r3, #11
 8009874:	6123      	str	r3, [r4, #16]
 8009876:	6963      	ldr	r3, [r4, #20]
 8009878:	1e5a      	subs	r2, r3, #1
 800987a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800987e:	6162      	str	r2, [r4, #20]
 8009880:	079a      	lsls	r2, r3, #30
 8009882:	d105      	bne.n	8009890 <localtime_r+0x1c0>
 8009884:	2164      	movs	r1, #100	; 0x64
 8009886:	fb93 f2f1 	sdiv	r2, r3, r1
 800988a:	fb01 3212 	mls	r2, r1, r2, r3
 800988e:	b962      	cbnz	r2, 80098aa <localtime_r+0x1da>
 8009890:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009894:	fb93 f1f2 	sdiv	r1, r3, r2
 8009898:	fb02 3311 	mls	r3, r2, r1, r3
 800989c:	fab3 f383 	clz	r3, r3
 80098a0:	095b      	lsrs	r3, r3, #5
 80098a2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80098a6:	61e3      	str	r3, [r4, #28]
 80098a8:	e7de      	b.n	8009868 <localtime_r+0x198>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e7f9      	b.n	80098a2 <localtime_r+0x1d2>
 80098ae:	bf00      	nop
 80098b0:	0800be44 	.word	0x0800be44
 80098b4:	20000d3c 	.word	0x20000d3c

080098b8 <malloc>:
 80098b8:	4b02      	ldr	r3, [pc, #8]	; (80098c4 <malloc+0xc>)
 80098ba:	4601      	mov	r1, r0
 80098bc:	6818      	ldr	r0, [r3, #0]
 80098be:	f000 b88d 	b.w	80099dc <_malloc_r>
 80098c2:	bf00      	nop
 80098c4:	20000110 	.word	0x20000110

080098c8 <free>:
 80098c8:	4b02      	ldr	r3, [pc, #8]	; (80098d4 <free+0xc>)
 80098ca:	4601      	mov	r1, r0
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f000 b819 	b.w	8009904 <_free_r>
 80098d2:	bf00      	nop
 80098d4:	20000110 	.word	0x20000110

080098d8 <memcpy>:
 80098d8:	440a      	add	r2, r1
 80098da:	4291      	cmp	r1, r2
 80098dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098e0:	d100      	bne.n	80098e4 <memcpy+0xc>
 80098e2:	4770      	bx	lr
 80098e4:	b510      	push	{r4, lr}
 80098e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ee:	4291      	cmp	r1, r2
 80098f0:	d1f9      	bne.n	80098e6 <memcpy+0xe>
 80098f2:	bd10      	pop	{r4, pc}

080098f4 <memset>:
 80098f4:	4402      	add	r2, r0
 80098f6:	4603      	mov	r3, r0
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d100      	bne.n	80098fe <memset+0xa>
 80098fc:	4770      	bx	lr
 80098fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009902:	e7f9      	b.n	80098f8 <memset+0x4>

08009904 <_free_r>:
 8009904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009906:	2900      	cmp	r1, #0
 8009908:	d044      	beq.n	8009994 <_free_r+0x90>
 800990a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800990e:	9001      	str	r0, [sp, #4]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f1a1 0404 	sub.w	r4, r1, #4
 8009916:	bfb8      	it	lt
 8009918:	18e4      	addlt	r4, r4, r3
 800991a:	f000 fc69 	bl	800a1f0 <__malloc_lock>
 800991e:	4a1e      	ldr	r2, [pc, #120]	; (8009998 <_free_r+0x94>)
 8009920:	9801      	ldr	r0, [sp, #4]
 8009922:	6813      	ldr	r3, [r2, #0]
 8009924:	b933      	cbnz	r3, 8009934 <_free_r+0x30>
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	6014      	str	r4, [r2, #0]
 800992a:	b003      	add	sp, #12
 800992c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009930:	f000 bc64 	b.w	800a1fc <__malloc_unlock>
 8009934:	42a3      	cmp	r3, r4
 8009936:	d908      	bls.n	800994a <_free_r+0x46>
 8009938:	6825      	ldr	r5, [r4, #0]
 800993a:	1961      	adds	r1, r4, r5
 800993c:	428b      	cmp	r3, r1
 800993e:	bf01      	itttt	eq
 8009940:	6819      	ldreq	r1, [r3, #0]
 8009942:	685b      	ldreq	r3, [r3, #4]
 8009944:	1949      	addeq	r1, r1, r5
 8009946:	6021      	streq	r1, [r4, #0]
 8009948:	e7ed      	b.n	8009926 <_free_r+0x22>
 800994a:	461a      	mov	r2, r3
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	b10b      	cbz	r3, 8009954 <_free_r+0x50>
 8009950:	42a3      	cmp	r3, r4
 8009952:	d9fa      	bls.n	800994a <_free_r+0x46>
 8009954:	6811      	ldr	r1, [r2, #0]
 8009956:	1855      	adds	r5, r2, r1
 8009958:	42a5      	cmp	r5, r4
 800995a:	d10b      	bne.n	8009974 <_free_r+0x70>
 800995c:	6824      	ldr	r4, [r4, #0]
 800995e:	4421      	add	r1, r4
 8009960:	1854      	adds	r4, r2, r1
 8009962:	42a3      	cmp	r3, r4
 8009964:	6011      	str	r1, [r2, #0]
 8009966:	d1e0      	bne.n	800992a <_free_r+0x26>
 8009968:	681c      	ldr	r4, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	6053      	str	r3, [r2, #4]
 800996e:	4421      	add	r1, r4
 8009970:	6011      	str	r1, [r2, #0]
 8009972:	e7da      	b.n	800992a <_free_r+0x26>
 8009974:	d902      	bls.n	800997c <_free_r+0x78>
 8009976:	230c      	movs	r3, #12
 8009978:	6003      	str	r3, [r0, #0]
 800997a:	e7d6      	b.n	800992a <_free_r+0x26>
 800997c:	6825      	ldr	r5, [r4, #0]
 800997e:	1961      	adds	r1, r4, r5
 8009980:	428b      	cmp	r3, r1
 8009982:	bf04      	itt	eq
 8009984:	6819      	ldreq	r1, [r3, #0]
 8009986:	685b      	ldreq	r3, [r3, #4]
 8009988:	6063      	str	r3, [r4, #4]
 800998a:	bf04      	itt	eq
 800998c:	1949      	addeq	r1, r1, r5
 800998e:	6021      	streq	r1, [r4, #0]
 8009990:	6054      	str	r4, [r2, #4]
 8009992:	e7ca      	b.n	800992a <_free_r+0x26>
 8009994:	b003      	add	sp, #12
 8009996:	bd30      	pop	{r4, r5, pc}
 8009998:	20000d18 	.word	0x20000d18

0800999c <sbrk_aligned>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4e0e      	ldr	r6, [pc, #56]	; (80099d8 <sbrk_aligned+0x3c>)
 80099a0:	460c      	mov	r4, r1
 80099a2:	6831      	ldr	r1, [r6, #0]
 80099a4:	4605      	mov	r5, r0
 80099a6:	b911      	cbnz	r1, 80099ae <sbrk_aligned+0x12>
 80099a8:	f000 f88c 	bl	8009ac4 <_sbrk_r>
 80099ac:	6030      	str	r0, [r6, #0]
 80099ae:	4621      	mov	r1, r4
 80099b0:	4628      	mov	r0, r5
 80099b2:	f000 f887 	bl	8009ac4 <_sbrk_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d00a      	beq.n	80099d0 <sbrk_aligned+0x34>
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d007      	beq.n	80099d4 <sbrk_aligned+0x38>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f87c 	bl	8009ac4 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d101      	bne.n	80099d4 <sbrk_aligned+0x38>
 80099d0:	f04f 34ff 	mov.w	r4, #4294967295
 80099d4:	4620      	mov	r0, r4
 80099d6:	bd70      	pop	{r4, r5, r6, pc}
 80099d8:	20000d1c 	.word	0x20000d1c

080099dc <_malloc_r>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	1ccd      	adds	r5, r1, #3
 80099e2:	f025 0503 	bic.w	r5, r5, #3
 80099e6:	3508      	adds	r5, #8
 80099e8:	2d0c      	cmp	r5, #12
 80099ea:	bf38      	it	cc
 80099ec:	250c      	movcc	r5, #12
 80099ee:	2d00      	cmp	r5, #0
 80099f0:	4607      	mov	r7, r0
 80099f2:	db01      	blt.n	80099f8 <_malloc_r+0x1c>
 80099f4:	42a9      	cmp	r1, r5
 80099f6:	d905      	bls.n	8009a04 <_malloc_r+0x28>
 80099f8:	230c      	movs	r3, #12
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	2600      	movs	r6, #0
 80099fe:	4630      	mov	r0, r6
 8009a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a04:	4e2e      	ldr	r6, [pc, #184]	; (8009ac0 <_malloc_r+0xe4>)
 8009a06:	f000 fbf3 	bl	800a1f0 <__malloc_lock>
 8009a0a:	6833      	ldr	r3, [r6, #0]
 8009a0c:	461c      	mov	r4, r3
 8009a0e:	bb34      	cbnz	r4, 8009a5e <_malloc_r+0x82>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ffc2 	bl	800999c <sbrk_aligned>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	d14d      	bne.n	8009aba <_malloc_r+0xde>
 8009a1e:	6834      	ldr	r4, [r6, #0]
 8009a20:	4626      	mov	r6, r4
 8009a22:	2e00      	cmp	r6, #0
 8009a24:	d140      	bne.n	8009aa8 <_malloc_r+0xcc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	eb04 0803 	add.w	r8, r4, r3
 8009a30:	f000 f848 	bl	8009ac4 <_sbrk_r>
 8009a34:	4580      	cmp	r8, r0
 8009a36:	d13a      	bne.n	8009aae <_malloc_r+0xd2>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	3503      	adds	r5, #3
 8009a3c:	1a6d      	subs	r5, r5, r1
 8009a3e:	f025 0503 	bic.w	r5, r5, #3
 8009a42:	3508      	adds	r5, #8
 8009a44:	2d0c      	cmp	r5, #12
 8009a46:	bf38      	it	cc
 8009a48:	250c      	movcc	r5, #12
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ffa5 	bl	800999c <sbrk_aligned>
 8009a52:	3001      	adds	r0, #1
 8009a54:	d02b      	beq.n	8009aae <_malloc_r+0xd2>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	442b      	add	r3, r5
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	e00e      	b.n	8009a7c <_malloc_r+0xa0>
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	1b52      	subs	r2, r2, r5
 8009a62:	d41e      	bmi.n	8009aa2 <_malloc_r+0xc6>
 8009a64:	2a0b      	cmp	r2, #11
 8009a66:	d916      	bls.n	8009a96 <_malloc_r+0xba>
 8009a68:	1961      	adds	r1, r4, r5
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	6025      	str	r5, [r4, #0]
 8009a6e:	bf18      	it	ne
 8009a70:	6059      	strne	r1, [r3, #4]
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	bf08      	it	eq
 8009a76:	6031      	streq	r1, [r6, #0]
 8009a78:	5162      	str	r2, [r4, r5]
 8009a7a:	604b      	str	r3, [r1, #4]
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f104 060b 	add.w	r6, r4, #11
 8009a82:	f000 fbbb 	bl	800a1fc <__malloc_unlock>
 8009a86:	f026 0607 	bic.w	r6, r6, #7
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	1af2      	subs	r2, r6, r3
 8009a8e:	d0b6      	beq.n	80099fe <_malloc_r+0x22>
 8009a90:	1b9b      	subs	r3, r3, r6
 8009a92:	50a3      	str	r3, [r4, r2]
 8009a94:	e7b3      	b.n	80099fe <_malloc_r+0x22>
 8009a96:	6862      	ldr	r2, [r4, #4]
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	bf0c      	ite	eq
 8009a9c:	6032      	streq	r2, [r6, #0]
 8009a9e:	605a      	strne	r2, [r3, #4]
 8009aa0:	e7ec      	b.n	8009a7c <_malloc_r+0xa0>
 8009aa2:	4623      	mov	r3, r4
 8009aa4:	6864      	ldr	r4, [r4, #4]
 8009aa6:	e7b2      	b.n	8009a0e <_malloc_r+0x32>
 8009aa8:	4634      	mov	r4, r6
 8009aaa:	6876      	ldr	r6, [r6, #4]
 8009aac:	e7b9      	b.n	8009a22 <_malloc_r+0x46>
 8009aae:	230c      	movs	r3, #12
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f000 fba2 	bl	800a1fc <__malloc_unlock>
 8009ab8:	e7a1      	b.n	80099fe <_malloc_r+0x22>
 8009aba:	6025      	str	r5, [r4, #0]
 8009abc:	e7de      	b.n	8009a7c <_malloc_r+0xa0>
 8009abe:	bf00      	nop
 8009ac0:	20000d18 	.word	0x20000d18

08009ac4 <_sbrk_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d06      	ldr	r5, [pc, #24]	; (8009ae0 <_sbrk_r+0x1c>)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	f7fa f8c8 	bl	8003c64 <_sbrk>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_sbrk_r+0x1a>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_sbrk_r+0x1a>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20000d4c 	.word	0x20000d4c

08009ae4 <siprintf>:
 8009ae4:	b40e      	push	{r1, r2, r3}
 8009ae6:	b500      	push	{lr}
 8009ae8:	b09c      	sub	sp, #112	; 0x70
 8009aea:	ab1d      	add	r3, sp, #116	; 0x74
 8009aec:	9002      	str	r0, [sp, #8]
 8009aee:	9006      	str	r0, [sp, #24]
 8009af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af4:	4809      	ldr	r0, [pc, #36]	; (8009b1c <siprintf+0x38>)
 8009af6:	9107      	str	r1, [sp, #28]
 8009af8:	9104      	str	r1, [sp, #16]
 8009afa:	4909      	ldr	r1, [pc, #36]	; (8009b20 <siprintf+0x3c>)
 8009afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b00:	9105      	str	r1, [sp, #20]
 8009b02:	6800      	ldr	r0, [r0, #0]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	a902      	add	r1, sp, #8
 8009b08:	f000 fbda 	bl	800a2c0 <_svfiprintf_r>
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	b01c      	add	sp, #112	; 0x70
 8009b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b18:	b003      	add	sp, #12
 8009b1a:	4770      	bx	lr
 8009b1c:	20000110 	.word	0x20000110
 8009b20:	ffff0208 	.word	0xffff0208

08009b24 <__tzcalc_limits>:
 8009b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b28:	4605      	mov	r5, r0
 8009b2a:	f000 faab 	bl	800a084 <__gettzinfo>
 8009b2e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009b32:	429d      	cmp	r5, r3
 8009b34:	f340 8099 	ble.w	8009c6a <__tzcalc_limits+0x146>
 8009b38:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009b3c:	18ac      	adds	r4, r5, r2
 8009b3e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8009b42:	f240 126d 	movw	r2, #365	; 0x16d
 8009b46:	10a4      	asrs	r4, r4, #2
 8009b48:	fb02 4403 	mla	r4, r2, r3, r4
 8009b4c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009b50:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b58:	441c      	add	r4, r3
 8009b5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009b5e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009b62:	fb95 fcf3 	sdiv	ip, r5, r3
 8009b66:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009b6a:	186a      	adds	r2, r5, r1
 8009b6c:	fabc f68c 	clz	r6, ip
 8009b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b74:	f005 0303 	and.w	r3, r5, #3
 8009b78:	4414      	add	r4, r2
 8009b7a:	2264      	movs	r2, #100	; 0x64
 8009b7c:	6045      	str	r5, [r0, #4]
 8009b7e:	fb95 f7f2 	sdiv	r7, r5, r2
 8009b82:	0976      	lsrs	r6, r6, #5
 8009b84:	fb02 5717 	mls	r7, r2, r7, r5
 8009b88:	4601      	mov	r1, r0
 8009b8a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009b8e:	9300      	str	r3, [sp, #0]
 8009b90:	f04f 0a07 	mov.w	sl, #7
 8009b94:	7a0d      	ldrb	r5, [r1, #8]
 8009b96:	694b      	ldr	r3, [r1, #20]
 8009b98:	2d4a      	cmp	r5, #74	; 0x4a
 8009b9a:	d12d      	bne.n	8009bf8 <__tzcalc_limits+0xd4>
 8009b9c:	9a00      	ldr	r2, [sp, #0]
 8009b9e:	eb04 0e03 	add.w	lr, r4, r3
 8009ba2:	b902      	cbnz	r2, 8009ba6 <__tzcalc_limits+0x82>
 8009ba4:	b917      	cbnz	r7, 8009bac <__tzcalc_limits+0x88>
 8009ba6:	f1bc 0f00 	cmp.w	ip, #0
 8009baa:	d123      	bne.n	8009bf4 <__tzcalc_limits+0xd0>
 8009bac:	2b3b      	cmp	r3, #59	; 0x3b
 8009bae:	bfd4      	ite	le
 8009bb0:	2300      	movle	r3, #0
 8009bb2:	2301      	movgt	r3, #1
 8009bb4:	4473      	add	r3, lr
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	698d      	ldr	r5, [r1, #24]
 8009bba:	4a2d      	ldr	r2, [pc, #180]	; (8009c70 <__tzcalc_limits+0x14c>)
 8009bbc:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8009bc0:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009bc4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009bc6:	18ed      	adds	r5, r5, r3
 8009bc8:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8009bcc:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8009bd0:	3128      	adds	r1, #40	; 0x28
 8009bd2:	458b      	cmp	fp, r1
 8009bd4:	d1de      	bne.n	8009b94 <__tzcalc_limits+0x70>
 8009bd6:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8009bda:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8009bde:	428c      	cmp	r4, r1
 8009be0:	eb72 0303 	sbcs.w	r3, r2, r3
 8009be4:	bfb4      	ite	lt
 8009be6:	2301      	movlt	r3, #1
 8009be8:	2300      	movge	r3, #0
 8009bea:	6003      	str	r3, [r0, #0]
 8009bec:	2001      	movs	r0, #1
 8009bee:	b003      	add	sp, #12
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e7dd      	b.n	8009bb4 <__tzcalc_limits+0x90>
 8009bf8:	2d44      	cmp	r5, #68	; 0x44
 8009bfa:	d101      	bne.n	8009c00 <__tzcalc_limits+0xdc>
 8009bfc:	4423      	add	r3, r4
 8009bfe:	e7db      	b.n	8009bb8 <__tzcalc_limits+0x94>
 8009c00:	9a00      	ldr	r2, [sp, #0]
 8009c02:	bb62      	cbnz	r2, 8009c5e <__tzcalc_limits+0x13a>
 8009c04:	2f00      	cmp	r7, #0
 8009c06:	bf0c      	ite	eq
 8009c08:	4635      	moveq	r5, r6
 8009c0a:	2501      	movne	r5, #1
 8009c0c:	68ca      	ldr	r2, [r1, #12]
 8009c0e:	9201      	str	r2, [sp, #4]
 8009c10:	4a18      	ldr	r2, [pc, #96]	; (8009c74 <__tzcalc_limits+0x150>)
 8009c12:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009c16:	fb09 2505 	mla	r5, r9, r5, r2
 8009c1a:	46a6      	mov	lr, r4
 8009c1c:	f04f 0800 	mov.w	r8, #0
 8009c20:	3d04      	subs	r5, #4
 8009c22:	9a01      	ldr	r2, [sp, #4]
 8009c24:	f108 0801 	add.w	r8, r8, #1
 8009c28:	4542      	cmp	r2, r8
 8009c2a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8009c2e:	dc18      	bgt.n	8009c62 <__tzcalc_limits+0x13e>
 8009c30:	f10e 0504 	add.w	r5, lr, #4
 8009c34:	fb95 f8fa 	sdiv	r8, r5, sl
 8009c38:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009c3c:	eba5 0808 	sub.w	r8, r5, r8
 8009c40:	ebb3 0808 	subs.w	r8, r3, r8
 8009c44:	690b      	ldr	r3, [r1, #16]
 8009c46:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c4a:	bf48      	it	mi
 8009c4c:	f108 0807 	addmi.w	r8, r8, #7
 8009c50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009c54:	4443      	add	r3, r8
 8009c56:	454b      	cmp	r3, r9
 8009c58:	da05      	bge.n	8009c66 <__tzcalc_limits+0x142>
 8009c5a:	4473      	add	r3, lr
 8009c5c:	e7ac      	b.n	8009bb8 <__tzcalc_limits+0x94>
 8009c5e:	4635      	mov	r5, r6
 8009c60:	e7d4      	b.n	8009c0c <__tzcalc_limits+0xe8>
 8009c62:	44ce      	add	lr, r9
 8009c64:	e7dd      	b.n	8009c22 <__tzcalc_limits+0xfe>
 8009c66:	3b07      	subs	r3, #7
 8009c68:	e7f5      	b.n	8009c56 <__tzcalc_limits+0x132>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e7bf      	b.n	8009bee <__tzcalc_limits+0xca>
 8009c6e:	bf00      	nop
 8009c70:	00015180 	.word	0x00015180
 8009c74:	0800be44 	.word	0x0800be44

08009c78 <__tz_lock>:
 8009c78:	4801      	ldr	r0, [pc, #4]	; (8009c80 <__tz_lock+0x8>)
 8009c7a:	f000 bab4 	b.w	800a1e6 <__retarget_lock_acquire>
 8009c7e:	bf00      	nop
 8009c80:	20000d48 	.word	0x20000d48

08009c84 <__tz_unlock>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__tz_unlock+0x8>)
 8009c86:	f000 bab0 	b.w	800a1ea <__retarget_lock_release>
 8009c8a:	bf00      	nop
 8009c8c:	20000d48 	.word	0x20000d48

08009c90 <_tzset_unlocked>:
 8009c90:	4b01      	ldr	r3, [pc, #4]	; (8009c98 <_tzset_unlocked+0x8>)
 8009c92:	6818      	ldr	r0, [r3, #0]
 8009c94:	f000 b802 	b.w	8009c9c <_tzset_unlocked_r>
 8009c98:	20000110 	.word	0x20000110

08009c9c <_tzset_unlocked_r>:
 8009c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	b08d      	sub	sp, #52	; 0x34
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	f000 f9ee 	bl	800a084 <__gettzinfo>
 8009ca8:	49b0      	ldr	r1, [pc, #704]	; (8009f6c <_tzset_unlocked_r+0x2d0>)
 8009caa:	4eb1      	ldr	r6, [pc, #708]	; (8009f70 <_tzset_unlocked_r+0x2d4>)
 8009cac:	4605      	mov	r5, r0
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f000 f9e0 	bl	800a074 <_getenv_r>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	b970      	cbnz	r0, 8009cd6 <_tzset_unlocked_r+0x3a>
 8009cb8:	4bae      	ldr	r3, [pc, #696]	; (8009f74 <_tzset_unlocked_r+0x2d8>)
 8009cba:	4aaf      	ldr	r2, [pc, #700]	; (8009f78 <_tzset_unlocked_r+0x2dc>)
 8009cbc:	6018      	str	r0, [r3, #0]
 8009cbe:	4baf      	ldr	r3, [pc, #700]	; (8009f7c <_tzset_unlocked_r+0x2e0>)
 8009cc0:	6018      	str	r0, [r3, #0]
 8009cc2:	4baf      	ldr	r3, [pc, #700]	; (8009f80 <_tzset_unlocked_r+0x2e4>)
 8009cc4:	6830      	ldr	r0, [r6, #0]
 8009cc6:	e9c3 2200 	strd	r2, r2, [r3]
 8009cca:	f7ff fdfd 	bl	80098c8 <free>
 8009cce:	6034      	str	r4, [r6, #0]
 8009cd0:	b00d      	add	sp, #52	; 0x34
 8009cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd6:	6831      	ldr	r1, [r6, #0]
 8009cd8:	2900      	cmp	r1, #0
 8009cda:	d162      	bne.n	8009da2 <_tzset_unlocked_r+0x106>
 8009cdc:	6830      	ldr	r0, [r6, #0]
 8009cde:	f7ff fdf3 	bl	80098c8 <free>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7f6 fa74 	bl	80001d0 <strlen>
 8009ce8:	1c41      	adds	r1, r0, #1
 8009cea:	4638      	mov	r0, r7
 8009cec:	f7ff fe76 	bl	80099dc <_malloc_r>
 8009cf0:	6030      	str	r0, [r6, #0]
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d15a      	bne.n	8009dac <_tzset_unlocked_r+0x110>
 8009cf6:	7823      	ldrb	r3, [r4, #0]
 8009cf8:	4aa2      	ldr	r2, [pc, #648]	; (8009f84 <_tzset_unlocked_r+0x2e8>)
 8009cfa:	49a3      	ldr	r1, [pc, #652]	; (8009f88 <_tzset_unlocked_r+0x2ec>)
 8009cfc:	2b3a      	cmp	r3, #58	; 0x3a
 8009cfe:	bf08      	it	eq
 8009d00:	3401      	addeq	r4, #1
 8009d02:	ae0a      	add	r6, sp, #40	; 0x28
 8009d04:	4633      	mov	r3, r6
 8009d06:	4620      	mov	r0, r4
 8009d08:	f000 fec8 	bl	800aa9c <siscanf>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	dddf      	ble.n	8009cd0 <_tzset_unlocked_r+0x34>
 8009d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d12:	18e7      	adds	r7, r4, r3
 8009d14:	5ce3      	ldrb	r3, [r4, r3]
 8009d16:	2b2d      	cmp	r3, #45	; 0x2d
 8009d18:	d14c      	bne.n	8009db4 <_tzset_unlocked_r+0x118>
 8009d1a:	3701      	adds	r7, #1
 8009d1c:	f04f 38ff 	mov.w	r8, #4294967295
 8009d20:	f10d 0a20 	add.w	sl, sp, #32
 8009d24:	f10d 0b1e 	add.w	fp, sp, #30
 8009d28:	2400      	movs	r4, #0
 8009d2a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009d2e:	4997      	ldr	r1, [pc, #604]	; (8009f8c <_tzset_unlocked_r+0x2f0>)
 8009d30:	9603      	str	r6, [sp, #12]
 8009d32:	f8cd b000 	str.w	fp, [sp]
 8009d36:	4633      	mov	r3, r6
 8009d38:	aa07      	add	r2, sp, #28
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	f8ad 401e 	strh.w	r4, [sp, #30]
 8009d40:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009d44:	f000 feaa 	bl	800aa9c <siscanf>
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	ddc1      	ble.n	8009cd0 <_tzset_unlocked_r+0x34>
 8009d4c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009d50:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009d54:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8009f98 <_tzset_unlocked_r+0x2fc>
 8009d58:	213c      	movs	r1, #60	; 0x3c
 8009d5a:	fb01 3302 	mla	r3, r1, r2, r3
 8009d5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009d62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009d66:	fb01 3302 	mla	r3, r1, r2, r3
 8009d6a:	fb08 f303 	mul.w	r3, r8, r3
 8009d6e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8009f80 <_tzset_unlocked_r+0x2e4>
 8009d72:	62ab      	str	r3, [r5, #40]	; 0x28
 8009d74:	4b83      	ldr	r3, [pc, #524]	; (8009f84 <_tzset_unlocked_r+0x2e8>)
 8009d76:	f8c8 3000 	str.w	r3, [r8]
 8009d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7c:	4982      	ldr	r1, [pc, #520]	; (8009f88 <_tzset_unlocked_r+0x2ec>)
 8009d7e:	441f      	add	r7, r3
 8009d80:	464a      	mov	r2, r9
 8009d82:	4633      	mov	r3, r6
 8009d84:	4638      	mov	r0, r7
 8009d86:	f000 fe89 	bl	800aa9c <siscanf>
 8009d8a:	42a0      	cmp	r0, r4
 8009d8c:	dc18      	bgt.n	8009dc0 <_tzset_unlocked_r+0x124>
 8009d8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d92:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d96:	4b77      	ldr	r3, [pc, #476]	; (8009f74 <_tzset_unlocked_r+0x2d8>)
 8009d98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	4b77      	ldr	r3, [pc, #476]	; (8009f7c <_tzset_unlocked_r+0x2e0>)
 8009d9e:	601c      	str	r4, [r3, #0]
 8009da0:	e796      	b.n	8009cd0 <_tzset_unlocked_r+0x34>
 8009da2:	f7f6 fa1d 	bl	80001e0 <strcmp>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d198      	bne.n	8009cdc <_tzset_unlocked_r+0x40>
 8009daa:	e791      	b.n	8009cd0 <_tzset_unlocked_r+0x34>
 8009dac:	4621      	mov	r1, r4
 8009dae:	f000 fee6 	bl	800ab7e <strcpy>
 8009db2:	e7a0      	b.n	8009cf6 <_tzset_unlocked_r+0x5a>
 8009db4:	2b2b      	cmp	r3, #43	; 0x2b
 8009db6:	bf08      	it	eq
 8009db8:	3701      	addeq	r7, #1
 8009dba:	f04f 0801 	mov.w	r8, #1
 8009dbe:	e7af      	b.n	8009d20 <_tzset_unlocked_r+0x84>
 8009dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc2:	f8c8 9004 	str.w	r9, [r8, #4]
 8009dc6:	18fc      	adds	r4, r7, r3
 8009dc8:	5cfb      	ldrb	r3, [r7, r3]
 8009dca:	2b2d      	cmp	r3, #45	; 0x2d
 8009dcc:	f040 808b 	bne.w	8009ee6 <_tzset_unlocked_r+0x24a>
 8009dd0:	3401      	adds	r4, #1
 8009dd2:	f04f 37ff 	mov.w	r7, #4294967295
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009ddc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009de0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009de4:	930a      	str	r3, [sp, #40]	; 0x28
 8009de6:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009dea:	e9cd b600 	strd	fp, r6, [sp]
 8009dee:	4967      	ldr	r1, [pc, #412]	; (8009f8c <_tzset_unlocked_r+0x2f0>)
 8009df0:	4633      	mov	r3, r6
 8009df2:	aa07      	add	r2, sp, #28
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fe51 	bl	800aa9c <siscanf>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	dc78      	bgt.n	8009ef0 <_tzset_unlocked_r+0x254>
 8009dfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009e00:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009e04:	652b      	str	r3, [r5, #80]	; 0x50
 8009e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e08:	462f      	mov	r7, r5
 8009e0a:	441c      	add	r4, r3
 8009e0c:	f04f 0900 	mov.w	r9, #0
 8009e10:	7823      	ldrb	r3, [r4, #0]
 8009e12:	2b2c      	cmp	r3, #44	; 0x2c
 8009e14:	bf08      	it	eq
 8009e16:	3401      	addeq	r4, #1
 8009e18:	f894 8000 	ldrb.w	r8, [r4]
 8009e1c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009e20:	d178      	bne.n	8009f14 <_tzset_unlocked_r+0x278>
 8009e22:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009e26:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009e2a:	ab09      	add	r3, sp, #36	; 0x24
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	4958      	ldr	r1, [pc, #352]	; (8009f90 <_tzset_unlocked_r+0x2f4>)
 8009e30:	9603      	str	r6, [sp, #12]
 8009e32:	4633      	mov	r3, r6
 8009e34:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 fe2f 	bl	800aa9c <siscanf>
 8009e3e:	2803      	cmp	r0, #3
 8009e40:	f47f af46 	bne.w	8009cd0 <_tzset_unlocked_r+0x34>
 8009e44:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009e48:	1e4b      	subs	r3, r1, #1
 8009e4a:	2b0b      	cmp	r3, #11
 8009e4c:	f63f af40 	bhi.w	8009cd0 <_tzset_unlocked_r+0x34>
 8009e50:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009e54:	1e53      	subs	r3, r2, #1
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	f63f af3a 	bhi.w	8009cd0 <_tzset_unlocked_r+0x34>
 8009e5c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009e60:	2b06      	cmp	r3, #6
 8009e62:	f63f af35 	bhi.w	8009cd0 <_tzset_unlocked_r+0x34>
 8009e66:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009e6a:	f887 8008 	strb.w	r8, [r7, #8]
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e72:	eb04 0803 	add.w	r8, r4, r3
 8009e76:	2302      	movs	r3, #2
 8009e78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009e82:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009e86:	930a      	str	r3, [sp, #40]	; 0x28
 8009e88:	f898 3000 	ldrb.w	r3, [r8]
 8009e8c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e8e:	d109      	bne.n	8009ea4 <_tzset_unlocked_r+0x208>
 8009e90:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009e94:	e9cd b600 	strd	fp, r6, [sp]
 8009e98:	493e      	ldr	r1, [pc, #248]	; (8009f94 <_tzset_unlocked_r+0x2f8>)
 8009e9a:	4633      	mov	r3, r6
 8009e9c:	aa07      	add	r2, sp, #28
 8009e9e:	4640      	mov	r0, r8
 8009ea0:	f000 fdfc 	bl	800aa9c <siscanf>
 8009ea4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009ea8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009eac:	213c      	movs	r1, #60	; 0x3c
 8009eae:	fb01 3302 	mla	r3, r1, r2, r3
 8009eb2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009eb6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009eba:	fb01 3302 	mla	r3, r1, r2, r3
 8009ebe:	61bb      	str	r3, [r7, #24]
 8009ec0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ec2:	3728      	adds	r7, #40	; 0x28
 8009ec4:	4444      	add	r4, r8
 8009ec6:	f1b9 0f00 	cmp.w	r9, #0
 8009eca:	d020      	beq.n	8009f0e <_tzset_unlocked_r+0x272>
 8009ecc:	6868      	ldr	r0, [r5, #4]
 8009ece:	f7ff fe29 	bl	8009b24 <__tzcalc_limits>
 8009ed2:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <_tzset_unlocked_r+0x2d8>)
 8009ed4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	4a27      	ldr	r2, [pc, #156]	; (8009f7c <_tzset_unlocked_r+0x2e0>)
 8009ede:	bf18      	it	ne
 8009ee0:	2301      	movne	r3, #1
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	e6f4      	b.n	8009cd0 <_tzset_unlocked_r+0x34>
 8009ee6:	2b2b      	cmp	r3, #43	; 0x2b
 8009ee8:	bf08      	it	eq
 8009eea:	3401      	addeq	r4, #1
 8009eec:	2701      	movs	r7, #1
 8009eee:	e772      	b.n	8009dd6 <_tzset_unlocked_r+0x13a>
 8009ef0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009ef4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009ef8:	213c      	movs	r1, #60	; 0x3c
 8009efa:	fb01 3302 	mla	r3, r1, r2, r3
 8009efe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009f02:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009f06:	fb01 3302 	mla	r3, r1, r2, r3
 8009f0a:	437b      	muls	r3, r7
 8009f0c:	e77a      	b.n	8009e04 <_tzset_unlocked_r+0x168>
 8009f0e:	f04f 0901 	mov.w	r9, #1
 8009f12:	e77d      	b.n	8009e10 <_tzset_unlocked_r+0x174>
 8009f14:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8009f18:	bf06      	itte	eq
 8009f1a:	3401      	addeq	r4, #1
 8009f1c:	4643      	moveq	r3, r8
 8009f1e:	2344      	movne	r3, #68	; 0x44
 8009f20:	220a      	movs	r2, #10
 8009f22:	a90b      	add	r1, sp, #44	; 0x2c
 8009f24:	4620      	mov	r0, r4
 8009f26:	9305      	str	r3, [sp, #20]
 8009f28:	f000 feba 	bl	800aca0 <strtoul>
 8009f2c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009f30:	9b05      	ldr	r3, [sp, #20]
 8009f32:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009f36:	45a0      	cmp	r8, r4
 8009f38:	d114      	bne.n	8009f64 <_tzset_unlocked_r+0x2c8>
 8009f3a:	234d      	movs	r3, #77	; 0x4d
 8009f3c:	f1b9 0f00 	cmp.w	r9, #0
 8009f40:	d107      	bne.n	8009f52 <_tzset_unlocked_r+0x2b6>
 8009f42:	722b      	strb	r3, [r5, #8]
 8009f44:	2103      	movs	r1, #3
 8009f46:	2302      	movs	r3, #2
 8009f48:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8009f4c:	f8c5 9014 	str.w	r9, [r5, #20]
 8009f50:	e791      	b.n	8009e76 <_tzset_unlocked_r+0x1da>
 8009f52:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009f56:	220b      	movs	r2, #11
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8009f5e:	2300      	movs	r3, #0
 8009f60:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009f62:	e788      	b.n	8009e76 <_tzset_unlocked_r+0x1da>
 8009f64:	b280      	uxth	r0, r0
 8009f66:	723b      	strb	r3, [r7, #8]
 8009f68:	6178      	str	r0, [r7, #20]
 8009f6a:	e784      	b.n	8009e76 <_tzset_unlocked_r+0x1da>
 8009f6c:	0800bea4 	.word	0x0800bea4
 8009f70:	20000d38 	.word	0x20000d38
 8009f74:	20000d40 	.word	0x20000d40
 8009f78:	0800bea7 	.word	0x0800bea7
 8009f7c:	20000d3c 	.word	0x20000d3c
 8009f80:	20000174 	.word	0x20000174
 8009f84:	20000d2b 	.word	0x20000d2b
 8009f88:	0800beab 	.word	0x0800beab
 8009f8c:	0800bece 	.word	0x0800bece
 8009f90:	0800beba 	.word	0x0800beba
 8009f94:	0800becd 	.word	0x0800becd
 8009f98:	20000d20 	.word	0x20000d20

08009f9c <__assert_func>:
 8009f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f9e:	4614      	mov	r4, r2
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <__assert_func+0x2c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	68d8      	ldr	r0, [r3, #12]
 8009faa:	b14c      	cbz	r4, 8009fc0 <__assert_func+0x24>
 8009fac:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <__assert_func+0x30>)
 8009fae:	9100      	str	r1, [sp, #0]
 8009fb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fb4:	4906      	ldr	r1, [pc, #24]	; (8009fd0 <__assert_func+0x34>)
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	f000 f80e 	bl	8009fd8 <fiprintf>
 8009fbc:	f000 ff4c 	bl	800ae58 <abort>
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <__assert_func+0x38>)
 8009fc2:	461c      	mov	r4, r3
 8009fc4:	e7f3      	b.n	8009fae <__assert_func+0x12>
 8009fc6:	bf00      	nop
 8009fc8:	20000110 	.word	0x20000110
 8009fcc:	0800bee0 	.word	0x0800bee0
 8009fd0:	0800beed 	.word	0x0800beed
 8009fd4:	0800bf1b 	.word	0x0800bf1b

08009fd8 <fiprintf>:
 8009fd8:	b40e      	push	{r1, r2, r3}
 8009fda:	b503      	push	{r0, r1, lr}
 8009fdc:	4601      	mov	r1, r0
 8009fde:	ab03      	add	r3, sp, #12
 8009fe0:	4805      	ldr	r0, [pc, #20]	; (8009ff8 <fiprintf+0x20>)
 8009fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fe6:	6800      	ldr	r0, [r0, #0]
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	f000 fa93 	bl	800a514 <_vfiprintf_r>
 8009fee:	b002      	add	sp, #8
 8009ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff4:	b003      	add	sp, #12
 8009ff6:	4770      	bx	lr
 8009ff8:	20000110 	.word	0x20000110

08009ffc <_findenv_r>:
 8009ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a070 <_findenv_r+0x74>
 800a004:	4607      	mov	r7, r0
 800a006:	4689      	mov	r9, r1
 800a008:	4616      	mov	r6, r2
 800a00a:	f000 ff3d 	bl	800ae88 <__env_lock>
 800a00e:	f8da 4000 	ldr.w	r4, [sl]
 800a012:	b134      	cbz	r4, 800a022 <_findenv_r+0x26>
 800a014:	464b      	mov	r3, r9
 800a016:	4698      	mov	r8, r3
 800a018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a01c:	b13a      	cbz	r2, 800a02e <_findenv_r+0x32>
 800a01e:	2a3d      	cmp	r2, #61	; 0x3d
 800a020:	d1f9      	bne.n	800a016 <_findenv_r+0x1a>
 800a022:	4638      	mov	r0, r7
 800a024:	f000 ff36 	bl	800ae94 <__env_unlock>
 800a028:	2000      	movs	r0, #0
 800a02a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	eba8 0809 	sub.w	r8, r8, r9
 800a032:	46a3      	mov	fp, r4
 800a034:	f854 0b04 	ldr.w	r0, [r4], #4
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0f2      	beq.n	800a022 <_findenv_r+0x26>
 800a03c:	4642      	mov	r2, r8
 800a03e:	4649      	mov	r1, r9
 800a040:	f000 fda5 	bl	800ab8e <strncmp>
 800a044:	2800      	cmp	r0, #0
 800a046:	d1f4      	bne.n	800a032 <_findenv_r+0x36>
 800a048:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a04c:	eb03 0508 	add.w	r5, r3, r8
 800a050:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a054:	2b3d      	cmp	r3, #61	; 0x3d
 800a056:	d1ec      	bne.n	800a032 <_findenv_r+0x36>
 800a058:	f8da 3000 	ldr.w	r3, [sl]
 800a05c:	ebab 0303 	sub.w	r3, fp, r3
 800a060:	109b      	asrs	r3, r3, #2
 800a062:	4638      	mov	r0, r7
 800a064:	6033      	str	r3, [r6, #0]
 800a066:	f000 ff15 	bl	800ae94 <__env_unlock>
 800a06a:	1c68      	adds	r0, r5, #1
 800a06c:	e7dd      	b.n	800a02a <_findenv_r+0x2e>
 800a06e:	bf00      	nop
 800a070:	20000100 	.word	0x20000100

0800a074 <_getenv_r>:
 800a074:	b507      	push	{r0, r1, r2, lr}
 800a076:	aa01      	add	r2, sp, #4
 800a078:	f7ff ffc0 	bl	8009ffc <_findenv_r>
 800a07c:	b003      	add	sp, #12
 800a07e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a084 <__gettzinfo>:
 800a084:	4800      	ldr	r0, [pc, #0]	; (800a088 <__gettzinfo+0x4>)
 800a086:	4770      	bx	lr
 800a088:	20000180 	.word	0x20000180

0800a08c <gmtime_r>:
 800a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a090:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a094:	460c      	mov	r4, r1
 800a096:	4a4f      	ldr	r2, [pc, #316]	; (800a1d4 <gmtime_r+0x148>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4630      	mov	r0, r6
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 fc6d 	bl	800097c <__aeabi_ldivmod>
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	4a4b      	ldr	r2, [pc, #300]	; (800a1d4 <gmtime_r+0x148>)
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f7f6 fc66 	bl	800097c <__aeabi_ldivmod>
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a0b6:	bfb7      	itett	lt
 800a0b8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a0bc:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a0c0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a0c4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a0c8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a0cc:	fbb2 f1f0 	udiv	r1, r2, r0
 800a0d0:	fb00 2211 	mls	r2, r0, r1, r2
 800a0d4:	203c      	movs	r0, #60	; 0x3c
 800a0d6:	60a1      	str	r1, [r4, #8]
 800a0d8:	fbb2 f1f0 	udiv	r1, r2, r0
 800a0dc:	fb00 2211 	mls	r2, r0, r1, r2
 800a0e0:	6061      	str	r1, [r4, #4]
 800a0e2:	6022      	str	r2, [r4, #0]
 800a0e4:	2107      	movs	r1, #7
 800a0e6:	1cda      	adds	r2, r3, #3
 800a0e8:	fb92 f1f1 	sdiv	r1, r2, r1
 800a0ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a0f0:	1a52      	subs	r2, r2, r1
 800a0f2:	bf48      	it	mi
 800a0f4:	3207      	addmi	r2, #7
 800a0f6:	4d38      	ldr	r5, [pc, #224]	; (800a1d8 <gmtime_r+0x14c>)
 800a0f8:	4838      	ldr	r0, [pc, #224]	; (800a1dc <gmtime_r+0x150>)
 800a0fa:	61a2      	str	r2, [r4, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	bfb7      	itett	lt
 800a100:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a104:	fb93 f5f5 	sdivge	r5, r3, r5
 800a108:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a10c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a110:	fb00 3005 	mla	r0, r0, r5, r3
 800a114:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a118:	fbb0 f2f2 	udiv	r2, r0, r2
 800a11c:	4402      	add	r2, r0
 800a11e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a122:	fbb0 f1f3 	udiv	r1, r0, r3
 800a126:	1a52      	subs	r2, r2, r1
 800a128:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a12c:	492c      	ldr	r1, [pc, #176]	; (800a1e0 <gmtime_r+0x154>)
 800a12e:	fbb0 f1f1 	udiv	r1, r0, r1
 800a132:	2764      	movs	r7, #100	; 0x64
 800a134:	1a52      	subs	r2, r2, r1
 800a136:	fbb2 f1fc 	udiv	r1, r2, ip
 800a13a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a13e:	fbb1 f6f7 	udiv	r6, r1, r7
 800a142:	1af3      	subs	r3, r6, r3
 800a144:	4403      	add	r3, r0
 800a146:	fb0c 3311 	mls	r3, ip, r1, r3
 800a14a:	2299      	movs	r2, #153	; 0x99
 800a14c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a150:	f10e 0e02 	add.w	lr, lr, #2
 800a154:	f103 0c01 	add.w	ip, r3, #1
 800a158:	fbbe f0f2 	udiv	r0, lr, r2
 800a15c:	4342      	muls	r2, r0
 800a15e:	3202      	adds	r2, #2
 800a160:	f04f 0805 	mov.w	r8, #5
 800a164:	fbb2 f2f8 	udiv	r2, r2, r8
 800a168:	ebac 0c02 	sub.w	ip, ip, r2
 800a16c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a170:	4596      	cmp	lr, r2
 800a172:	bf94      	ite	ls
 800a174:	2202      	movls	r2, #2
 800a176:	f06f 0209 	mvnhi.w	r2, #9
 800a17a:	4410      	add	r0, r2
 800a17c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a180:	fb02 1505 	mla	r5, r2, r5, r1
 800a184:	2801      	cmp	r0, #1
 800a186:	bf98      	it	ls
 800a188:	3501      	addls	r5, #1
 800a18a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a18e:	d30d      	bcc.n	800a1ac <gmtime_r+0x120>
 800a190:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a194:	61e3      	str	r3, [r4, #28]
 800a196:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a19a:	2300      	movs	r3, #0
 800a19c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a1a0:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a1a4:	6223      	str	r3, [r4, #32]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ac:	078a      	lsls	r2, r1, #30
 800a1ae:	d102      	bne.n	800a1b6 <gmtime_r+0x12a>
 800a1b0:	fb07 1616 	mls	r6, r7, r6, r1
 800a1b4:	b95e      	cbnz	r6, 800a1ce <gmtime_r+0x142>
 800a1b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a1ba:	fbb1 f6f2 	udiv	r6, r1, r2
 800a1be:	fb02 1216 	mls	r2, r2, r6, r1
 800a1c2:	fab2 f282 	clz	r2, r2
 800a1c6:	0952      	lsrs	r2, r2, #5
 800a1c8:	333b      	adds	r3, #59	; 0x3b
 800a1ca:	4413      	add	r3, r2
 800a1cc:	e7e2      	b.n	800a194 <gmtime_r+0x108>
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	e7fa      	b.n	800a1c8 <gmtime_r+0x13c>
 800a1d2:	bf00      	nop
 800a1d4:	00015180 	.word	0x00015180
 800a1d8:	00023ab1 	.word	0x00023ab1
 800a1dc:	fffdc54f 	.word	0xfffdc54f
 800a1e0:	00023ab0 	.word	0x00023ab0

0800a1e4 <__retarget_lock_init_recursive>:
 800a1e4:	4770      	bx	lr

0800a1e6 <__retarget_lock_acquire>:
 800a1e6:	4770      	bx	lr

0800a1e8 <__retarget_lock_acquire_recursive>:
 800a1e8:	4770      	bx	lr

0800a1ea <__retarget_lock_release>:
 800a1ea:	4770      	bx	lr

0800a1ec <__retarget_lock_release_recursive>:
 800a1ec:	4770      	bx	lr
	...

0800a1f0 <__malloc_lock>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <__malloc_lock+0x8>)
 800a1f2:	f7ff bff9 	b.w	800a1e8 <__retarget_lock_acquire_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20000d45 	.word	0x20000d45

0800a1fc <__malloc_unlock>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	; (800a204 <__malloc_unlock+0x8>)
 800a1fe:	f7ff bff5 	b.w	800a1ec <__retarget_lock_release_recursive>
 800a202:	bf00      	nop
 800a204:	20000d45 	.word	0x20000d45

0800a208 <__ssputs_r>:
 800a208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a20c:	688e      	ldr	r6, [r1, #8]
 800a20e:	429e      	cmp	r6, r3
 800a210:	4682      	mov	sl, r0
 800a212:	460c      	mov	r4, r1
 800a214:	4690      	mov	r8, r2
 800a216:	461f      	mov	r7, r3
 800a218:	d838      	bhi.n	800a28c <__ssputs_r+0x84>
 800a21a:	898a      	ldrh	r2, [r1, #12]
 800a21c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a220:	d032      	beq.n	800a288 <__ssputs_r+0x80>
 800a222:	6825      	ldr	r5, [r4, #0]
 800a224:	6909      	ldr	r1, [r1, #16]
 800a226:	eba5 0901 	sub.w	r9, r5, r1
 800a22a:	6965      	ldr	r5, [r4, #20]
 800a22c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a234:	3301      	adds	r3, #1
 800a236:	444b      	add	r3, r9
 800a238:	106d      	asrs	r5, r5, #1
 800a23a:	429d      	cmp	r5, r3
 800a23c:	bf38      	it	cc
 800a23e:	461d      	movcc	r5, r3
 800a240:	0553      	lsls	r3, r2, #21
 800a242:	d531      	bpl.n	800a2a8 <__ssputs_r+0xa0>
 800a244:	4629      	mov	r1, r5
 800a246:	f7ff fbc9 	bl	80099dc <_malloc_r>
 800a24a:	4606      	mov	r6, r0
 800a24c:	b950      	cbnz	r0, 800a264 <__ssputs_r+0x5c>
 800a24e:	230c      	movs	r3, #12
 800a250:	f8ca 3000 	str.w	r3, [sl]
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	f04f 30ff 	mov.w	r0, #4294967295
 800a260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a264:	6921      	ldr	r1, [r4, #16]
 800a266:	464a      	mov	r2, r9
 800a268:	f7ff fb36 	bl	80098d8 <memcpy>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	6126      	str	r6, [r4, #16]
 800a27a:	6165      	str	r5, [r4, #20]
 800a27c:	444e      	add	r6, r9
 800a27e:	eba5 0509 	sub.w	r5, r5, r9
 800a282:	6026      	str	r6, [r4, #0]
 800a284:	60a5      	str	r5, [r4, #8]
 800a286:	463e      	mov	r6, r7
 800a288:	42be      	cmp	r6, r7
 800a28a:	d900      	bls.n	800a28e <__ssputs_r+0x86>
 800a28c:	463e      	mov	r6, r7
 800a28e:	6820      	ldr	r0, [r4, #0]
 800a290:	4632      	mov	r2, r6
 800a292:	4641      	mov	r1, r8
 800a294:	f001 f834 	bl	800b300 <memmove>
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	1b9b      	subs	r3, r3, r6
 800a29c:	60a3      	str	r3, [r4, #8]
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	4433      	add	r3, r6
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e7db      	b.n	800a260 <__ssputs_r+0x58>
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	f001 f843 	bl	800b334 <_realloc_r>
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d1e1      	bne.n	800a278 <__ssputs_r+0x70>
 800a2b4:	6921      	ldr	r1, [r4, #16]
 800a2b6:	4650      	mov	r0, sl
 800a2b8:	f7ff fb24 	bl	8009904 <_free_r>
 800a2bc:	e7c7      	b.n	800a24e <__ssputs_r+0x46>
	...

0800a2c0 <_svfiprintf_r>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	4698      	mov	r8, r3
 800a2c6:	898b      	ldrh	r3, [r1, #12]
 800a2c8:	061b      	lsls	r3, r3, #24
 800a2ca:	b09d      	sub	sp, #116	; 0x74
 800a2cc:	4607      	mov	r7, r0
 800a2ce:	460d      	mov	r5, r1
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	d50e      	bpl.n	800a2f2 <_svfiprintf_r+0x32>
 800a2d4:	690b      	ldr	r3, [r1, #16]
 800a2d6:	b963      	cbnz	r3, 800a2f2 <_svfiprintf_r+0x32>
 800a2d8:	2140      	movs	r1, #64	; 0x40
 800a2da:	f7ff fb7f 	bl	80099dc <_malloc_r>
 800a2de:	6028      	str	r0, [r5, #0]
 800a2e0:	6128      	str	r0, [r5, #16]
 800a2e2:	b920      	cbnz	r0, 800a2ee <_svfiprintf_r+0x2e>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	e0d1      	b.n	800a492 <_svfiprintf_r+0x1d2>
 800a2ee:	2340      	movs	r3, #64	; 0x40
 800a2f0:	616b      	str	r3, [r5, #20]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f6:	2320      	movs	r3, #32
 800a2f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a300:	2330      	movs	r3, #48	; 0x30
 800a302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4ac <_svfiprintf_r+0x1ec>
 800a306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a30a:	f04f 0901 	mov.w	r9, #1
 800a30e:	4623      	mov	r3, r4
 800a310:	469a      	mov	sl, r3
 800a312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a316:	b10a      	cbz	r2, 800a31c <_svfiprintf_r+0x5c>
 800a318:	2a25      	cmp	r2, #37	; 0x25
 800a31a:	d1f9      	bne.n	800a310 <_svfiprintf_r+0x50>
 800a31c:	ebba 0b04 	subs.w	fp, sl, r4
 800a320:	d00b      	beq.n	800a33a <_svfiprintf_r+0x7a>
 800a322:	465b      	mov	r3, fp
 800a324:	4622      	mov	r2, r4
 800a326:	4629      	mov	r1, r5
 800a328:	4638      	mov	r0, r7
 800a32a:	f7ff ff6d 	bl	800a208 <__ssputs_r>
 800a32e:	3001      	adds	r0, #1
 800a330:	f000 80aa 	beq.w	800a488 <_svfiprintf_r+0x1c8>
 800a334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a336:	445a      	add	r2, fp
 800a338:	9209      	str	r2, [sp, #36]	; 0x24
 800a33a:	f89a 3000 	ldrb.w	r3, [sl]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 80a2 	beq.w	800a488 <_svfiprintf_r+0x1c8>
 800a344:	2300      	movs	r3, #0
 800a346:	f04f 32ff 	mov.w	r2, #4294967295
 800a34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a34e:	f10a 0a01 	add.w	sl, sl, #1
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	9307      	str	r3, [sp, #28]
 800a356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a35a:	931a      	str	r3, [sp, #104]	; 0x68
 800a35c:	4654      	mov	r4, sl
 800a35e:	2205      	movs	r2, #5
 800a360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a364:	4851      	ldr	r0, [pc, #324]	; (800a4ac <_svfiprintf_r+0x1ec>)
 800a366:	f7f5 ff4b 	bl	8000200 <memchr>
 800a36a:	9a04      	ldr	r2, [sp, #16]
 800a36c:	b9d8      	cbnz	r0, 800a3a6 <_svfiprintf_r+0xe6>
 800a36e:	06d0      	lsls	r0, r2, #27
 800a370:	bf44      	itt	mi
 800a372:	2320      	movmi	r3, #32
 800a374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a378:	0711      	lsls	r1, r2, #28
 800a37a:	bf44      	itt	mi
 800a37c:	232b      	movmi	r3, #43	; 0x2b
 800a37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a382:	f89a 3000 	ldrb.w	r3, [sl]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d015      	beq.n	800a3b6 <_svfiprintf_r+0xf6>
 800a38a:	9a07      	ldr	r2, [sp, #28]
 800a38c:	4654      	mov	r4, sl
 800a38e:	2000      	movs	r0, #0
 800a390:	f04f 0c0a 	mov.w	ip, #10
 800a394:	4621      	mov	r1, r4
 800a396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a39a:	3b30      	subs	r3, #48	; 0x30
 800a39c:	2b09      	cmp	r3, #9
 800a39e:	d94e      	bls.n	800a43e <_svfiprintf_r+0x17e>
 800a3a0:	b1b0      	cbz	r0, 800a3d0 <_svfiprintf_r+0x110>
 800a3a2:	9207      	str	r2, [sp, #28]
 800a3a4:	e014      	b.n	800a3d0 <_svfiprintf_r+0x110>
 800a3a6:	eba0 0308 	sub.w	r3, r0, r8
 800a3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	46a2      	mov	sl, r4
 800a3b4:	e7d2      	b.n	800a35c <_svfiprintf_r+0x9c>
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	1d19      	adds	r1, r3, #4
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	9103      	str	r1, [sp, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	bfbb      	ittet	lt
 800a3c2:	425b      	neglt	r3, r3
 800a3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c8:	9307      	strge	r3, [sp, #28]
 800a3ca:	9307      	strlt	r3, [sp, #28]
 800a3cc:	bfb8      	it	lt
 800a3ce:	9204      	strlt	r2, [sp, #16]
 800a3d0:	7823      	ldrb	r3, [r4, #0]
 800a3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3d4:	d10c      	bne.n	800a3f0 <_svfiprintf_r+0x130>
 800a3d6:	7863      	ldrb	r3, [r4, #1]
 800a3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3da:	d135      	bne.n	800a448 <_svfiprintf_r+0x188>
 800a3dc:	9b03      	ldr	r3, [sp, #12]
 800a3de:	1d1a      	adds	r2, r3, #4
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	9203      	str	r2, [sp, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bfb8      	it	lt
 800a3e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ec:	3402      	adds	r4, #2
 800a3ee:	9305      	str	r3, [sp, #20]
 800a3f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4bc <_svfiprintf_r+0x1fc>
 800a3f4:	7821      	ldrb	r1, [r4, #0]
 800a3f6:	2203      	movs	r2, #3
 800a3f8:	4650      	mov	r0, sl
 800a3fa:	f7f5 ff01 	bl	8000200 <memchr>
 800a3fe:	b140      	cbz	r0, 800a412 <_svfiprintf_r+0x152>
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	eba0 000a 	sub.w	r0, r0, sl
 800a406:	fa03 f000 	lsl.w	r0, r3, r0
 800a40a:	9b04      	ldr	r3, [sp, #16]
 800a40c:	4303      	orrs	r3, r0
 800a40e:	3401      	adds	r4, #1
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a416:	4826      	ldr	r0, [pc, #152]	; (800a4b0 <_svfiprintf_r+0x1f0>)
 800a418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a41c:	2206      	movs	r2, #6
 800a41e:	f7f5 feef 	bl	8000200 <memchr>
 800a422:	2800      	cmp	r0, #0
 800a424:	d038      	beq.n	800a498 <_svfiprintf_r+0x1d8>
 800a426:	4b23      	ldr	r3, [pc, #140]	; (800a4b4 <_svfiprintf_r+0x1f4>)
 800a428:	bb1b      	cbnz	r3, 800a472 <_svfiprintf_r+0x1b2>
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	3307      	adds	r3, #7
 800a42e:	f023 0307 	bic.w	r3, r3, #7
 800a432:	3308      	adds	r3, #8
 800a434:	9303      	str	r3, [sp, #12]
 800a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a438:	4433      	add	r3, r6
 800a43a:	9309      	str	r3, [sp, #36]	; 0x24
 800a43c:	e767      	b.n	800a30e <_svfiprintf_r+0x4e>
 800a43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a442:	460c      	mov	r4, r1
 800a444:	2001      	movs	r0, #1
 800a446:	e7a5      	b.n	800a394 <_svfiprintf_r+0xd4>
 800a448:	2300      	movs	r3, #0
 800a44a:	3401      	adds	r4, #1
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	4619      	mov	r1, r3
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4620      	mov	r0, r4
 800a456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a45a:	3a30      	subs	r2, #48	; 0x30
 800a45c:	2a09      	cmp	r2, #9
 800a45e:	d903      	bls.n	800a468 <_svfiprintf_r+0x1a8>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0c5      	beq.n	800a3f0 <_svfiprintf_r+0x130>
 800a464:	9105      	str	r1, [sp, #20]
 800a466:	e7c3      	b.n	800a3f0 <_svfiprintf_r+0x130>
 800a468:	fb0c 2101 	mla	r1, ip, r1, r2
 800a46c:	4604      	mov	r4, r0
 800a46e:	2301      	movs	r3, #1
 800a470:	e7f0      	b.n	800a454 <_svfiprintf_r+0x194>
 800a472:	ab03      	add	r3, sp, #12
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	462a      	mov	r2, r5
 800a478:	4b0f      	ldr	r3, [pc, #60]	; (800a4b8 <_svfiprintf_r+0x1f8>)
 800a47a:	a904      	add	r1, sp, #16
 800a47c:	4638      	mov	r0, r7
 800a47e:	f3af 8000 	nop.w
 800a482:	1c42      	adds	r2, r0, #1
 800a484:	4606      	mov	r6, r0
 800a486:	d1d6      	bne.n	800a436 <_svfiprintf_r+0x176>
 800a488:	89ab      	ldrh	r3, [r5, #12]
 800a48a:	065b      	lsls	r3, r3, #25
 800a48c:	f53f af2c 	bmi.w	800a2e8 <_svfiprintf_r+0x28>
 800a490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a492:	b01d      	add	sp, #116	; 0x74
 800a494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a498:	ab03      	add	r3, sp, #12
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	462a      	mov	r2, r5
 800a49e:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <_svfiprintf_r+0x1f8>)
 800a4a0:	a904      	add	r1, sp, #16
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f000 f9d4 	bl	800a850 <_printf_i>
 800a4a8:	e7eb      	b.n	800a482 <_svfiprintf_r+0x1c2>
 800a4aa:	bf00      	nop
 800a4ac:	0800bf1c 	.word	0x0800bf1c
 800a4b0:	0800bf26 	.word	0x0800bf26
 800a4b4:	00000000 	.word	0x00000000
 800a4b8:	0800a209 	.word	0x0800a209
 800a4bc:	0800bf22 	.word	0x0800bf22

0800a4c0 <__sfputc_r>:
 800a4c0:	6893      	ldr	r3, [r2, #8]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	b410      	push	{r4}
 800a4c8:	6093      	str	r3, [r2, #8]
 800a4ca:	da08      	bge.n	800a4de <__sfputc_r+0x1e>
 800a4cc:	6994      	ldr	r4, [r2, #24]
 800a4ce:	42a3      	cmp	r3, r4
 800a4d0:	db01      	blt.n	800a4d6 <__sfputc_r+0x16>
 800a4d2:	290a      	cmp	r1, #10
 800a4d4:	d103      	bne.n	800a4de <__sfputc_r+0x1e>
 800a4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4da:	f000 bbeb 	b.w	800acb4 <__swbuf_r>
 800a4de:	6813      	ldr	r3, [r2, #0]
 800a4e0:	1c58      	adds	r0, r3, #1
 800a4e2:	6010      	str	r0, [r2, #0]
 800a4e4:	7019      	strb	r1, [r3, #0]
 800a4e6:	4608      	mov	r0, r1
 800a4e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <__sfputs_r>:
 800a4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f0:	4606      	mov	r6, r0
 800a4f2:	460f      	mov	r7, r1
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	18d5      	adds	r5, r2, r3
 800a4f8:	42ac      	cmp	r4, r5
 800a4fa:	d101      	bne.n	800a500 <__sfputs_r+0x12>
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e007      	b.n	800a510 <__sfputs_r+0x22>
 800a500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a504:	463a      	mov	r2, r7
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ffda 	bl	800a4c0 <__sfputc_r>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d1f3      	bne.n	800a4f8 <__sfputs_r+0xa>
 800a510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a514 <_vfiprintf_r>:
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	460d      	mov	r5, r1
 800a51a:	b09d      	sub	sp, #116	; 0x74
 800a51c:	4614      	mov	r4, r2
 800a51e:	4698      	mov	r8, r3
 800a520:	4606      	mov	r6, r0
 800a522:	b118      	cbz	r0, 800a52c <_vfiprintf_r+0x18>
 800a524:	6983      	ldr	r3, [r0, #24]
 800a526:	b90b      	cbnz	r3, 800a52c <_vfiprintf_r+0x18>
 800a528:	f000 fdd4 	bl	800b0d4 <__sinit>
 800a52c:	4b89      	ldr	r3, [pc, #548]	; (800a754 <_vfiprintf_r+0x240>)
 800a52e:	429d      	cmp	r5, r3
 800a530:	d11b      	bne.n	800a56a <_vfiprintf_r+0x56>
 800a532:	6875      	ldr	r5, [r6, #4]
 800a534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a536:	07d9      	lsls	r1, r3, #31
 800a538:	d405      	bmi.n	800a546 <_vfiprintf_r+0x32>
 800a53a:	89ab      	ldrh	r3, [r5, #12]
 800a53c:	059a      	lsls	r2, r3, #22
 800a53e:	d402      	bmi.n	800a546 <_vfiprintf_r+0x32>
 800a540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a542:	f7ff fe51 	bl	800a1e8 <__retarget_lock_acquire_recursive>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	071b      	lsls	r3, r3, #28
 800a54a:	d501      	bpl.n	800a550 <_vfiprintf_r+0x3c>
 800a54c:	692b      	ldr	r3, [r5, #16]
 800a54e:	b9eb      	cbnz	r3, 800a58c <_vfiprintf_r+0x78>
 800a550:	4629      	mov	r1, r5
 800a552:	4630      	mov	r0, r6
 800a554:	f000 fc12 	bl	800ad7c <__swsetup_r>
 800a558:	b1c0      	cbz	r0, 800a58c <_vfiprintf_r+0x78>
 800a55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a55c:	07dc      	lsls	r4, r3, #31
 800a55e:	d50e      	bpl.n	800a57e <_vfiprintf_r+0x6a>
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	b01d      	add	sp, #116	; 0x74
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	4b7b      	ldr	r3, [pc, #492]	; (800a758 <_vfiprintf_r+0x244>)
 800a56c:	429d      	cmp	r5, r3
 800a56e:	d101      	bne.n	800a574 <_vfiprintf_r+0x60>
 800a570:	68b5      	ldr	r5, [r6, #8]
 800a572:	e7df      	b.n	800a534 <_vfiprintf_r+0x20>
 800a574:	4b79      	ldr	r3, [pc, #484]	; (800a75c <_vfiprintf_r+0x248>)
 800a576:	429d      	cmp	r5, r3
 800a578:	bf08      	it	eq
 800a57a:	68f5      	ldreq	r5, [r6, #12]
 800a57c:	e7da      	b.n	800a534 <_vfiprintf_r+0x20>
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	0598      	lsls	r0, r3, #22
 800a582:	d4ed      	bmi.n	800a560 <_vfiprintf_r+0x4c>
 800a584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a586:	f7ff fe31 	bl	800a1ec <__retarget_lock_release_recursive>
 800a58a:	e7e9      	b.n	800a560 <_vfiprintf_r+0x4c>
 800a58c:	2300      	movs	r3, #0
 800a58e:	9309      	str	r3, [sp, #36]	; 0x24
 800a590:	2320      	movs	r3, #32
 800a592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a596:	f8cd 800c 	str.w	r8, [sp, #12]
 800a59a:	2330      	movs	r3, #48	; 0x30
 800a59c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a760 <_vfiprintf_r+0x24c>
 800a5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5a4:	f04f 0901 	mov.w	r9, #1
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	469a      	mov	sl, r3
 800a5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b0:	b10a      	cbz	r2, 800a5b6 <_vfiprintf_r+0xa2>
 800a5b2:	2a25      	cmp	r2, #37	; 0x25
 800a5b4:	d1f9      	bne.n	800a5aa <_vfiprintf_r+0x96>
 800a5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ba:	d00b      	beq.n	800a5d4 <_vfiprintf_r+0xc0>
 800a5bc:	465b      	mov	r3, fp
 800a5be:	4622      	mov	r2, r4
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ff93 	bl	800a4ee <__sfputs_r>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	f000 80aa 	beq.w	800a722 <_vfiprintf_r+0x20e>
 800a5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d0:	445a      	add	r2, fp
 800a5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 80a2 	beq.w	800a722 <_vfiprintf_r+0x20e>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e8:	f10a 0a01 	add.w	sl, sl, #1
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	9307      	str	r3, [sp, #28]
 800a5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5f6:	4654      	mov	r4, sl
 800a5f8:	2205      	movs	r2, #5
 800a5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fe:	4858      	ldr	r0, [pc, #352]	; (800a760 <_vfiprintf_r+0x24c>)
 800a600:	f7f5 fdfe 	bl	8000200 <memchr>
 800a604:	9a04      	ldr	r2, [sp, #16]
 800a606:	b9d8      	cbnz	r0, 800a640 <_vfiprintf_r+0x12c>
 800a608:	06d1      	lsls	r1, r2, #27
 800a60a:	bf44      	itt	mi
 800a60c:	2320      	movmi	r3, #32
 800a60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a612:	0713      	lsls	r3, r2, #28
 800a614:	bf44      	itt	mi
 800a616:	232b      	movmi	r3, #43	; 0x2b
 800a618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a61c:	f89a 3000 	ldrb.w	r3, [sl]
 800a620:	2b2a      	cmp	r3, #42	; 0x2a
 800a622:	d015      	beq.n	800a650 <_vfiprintf_r+0x13c>
 800a624:	9a07      	ldr	r2, [sp, #28]
 800a626:	4654      	mov	r4, sl
 800a628:	2000      	movs	r0, #0
 800a62a:	f04f 0c0a 	mov.w	ip, #10
 800a62e:	4621      	mov	r1, r4
 800a630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a634:	3b30      	subs	r3, #48	; 0x30
 800a636:	2b09      	cmp	r3, #9
 800a638:	d94e      	bls.n	800a6d8 <_vfiprintf_r+0x1c4>
 800a63a:	b1b0      	cbz	r0, 800a66a <_vfiprintf_r+0x156>
 800a63c:	9207      	str	r2, [sp, #28]
 800a63e:	e014      	b.n	800a66a <_vfiprintf_r+0x156>
 800a640:	eba0 0308 	sub.w	r3, r0, r8
 800a644:	fa09 f303 	lsl.w	r3, r9, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	46a2      	mov	sl, r4
 800a64e:	e7d2      	b.n	800a5f6 <_vfiprintf_r+0xe2>
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	1d19      	adds	r1, r3, #4
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	9103      	str	r1, [sp, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bfbb      	ittet	lt
 800a65c:	425b      	neglt	r3, r3
 800a65e:	f042 0202 	orrlt.w	r2, r2, #2
 800a662:	9307      	strge	r3, [sp, #28]
 800a664:	9307      	strlt	r3, [sp, #28]
 800a666:	bfb8      	it	lt
 800a668:	9204      	strlt	r2, [sp, #16]
 800a66a:	7823      	ldrb	r3, [r4, #0]
 800a66c:	2b2e      	cmp	r3, #46	; 0x2e
 800a66e:	d10c      	bne.n	800a68a <_vfiprintf_r+0x176>
 800a670:	7863      	ldrb	r3, [r4, #1]
 800a672:	2b2a      	cmp	r3, #42	; 0x2a
 800a674:	d135      	bne.n	800a6e2 <_vfiprintf_r+0x1ce>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	1d1a      	adds	r2, r3, #4
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	9203      	str	r2, [sp, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfb8      	it	lt
 800a682:	f04f 33ff 	movlt.w	r3, #4294967295
 800a686:	3402      	adds	r4, #2
 800a688:	9305      	str	r3, [sp, #20]
 800a68a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a770 <_vfiprintf_r+0x25c>
 800a68e:	7821      	ldrb	r1, [r4, #0]
 800a690:	2203      	movs	r2, #3
 800a692:	4650      	mov	r0, sl
 800a694:	f7f5 fdb4 	bl	8000200 <memchr>
 800a698:	b140      	cbz	r0, 800a6ac <_vfiprintf_r+0x198>
 800a69a:	2340      	movs	r3, #64	; 0x40
 800a69c:	eba0 000a 	sub.w	r0, r0, sl
 800a6a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a6a4:	9b04      	ldr	r3, [sp, #16]
 800a6a6:	4303      	orrs	r3, r0
 800a6a8:	3401      	adds	r4, #1
 800a6aa:	9304      	str	r3, [sp, #16]
 800a6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b0:	482c      	ldr	r0, [pc, #176]	; (800a764 <_vfiprintf_r+0x250>)
 800a6b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6b6:	2206      	movs	r2, #6
 800a6b8:	f7f5 fda2 	bl	8000200 <memchr>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d03f      	beq.n	800a740 <_vfiprintf_r+0x22c>
 800a6c0:	4b29      	ldr	r3, [pc, #164]	; (800a768 <_vfiprintf_r+0x254>)
 800a6c2:	bb1b      	cbnz	r3, 800a70c <_vfiprintf_r+0x1f8>
 800a6c4:	9b03      	ldr	r3, [sp, #12]
 800a6c6:	3307      	adds	r3, #7
 800a6c8:	f023 0307 	bic.w	r3, r3, #7
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	9303      	str	r3, [sp, #12]
 800a6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d2:	443b      	add	r3, r7
 800a6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d6:	e767      	b.n	800a5a8 <_vfiprintf_r+0x94>
 800a6d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6dc:	460c      	mov	r4, r1
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7a5      	b.n	800a62e <_vfiprintf_r+0x11a>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	3401      	adds	r4, #1
 800a6e6:	9305      	str	r3, [sp, #20]
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f04f 0c0a 	mov.w	ip, #10
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f4:	3a30      	subs	r2, #48	; 0x30
 800a6f6:	2a09      	cmp	r2, #9
 800a6f8:	d903      	bls.n	800a702 <_vfiprintf_r+0x1ee>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d0c5      	beq.n	800a68a <_vfiprintf_r+0x176>
 800a6fe:	9105      	str	r1, [sp, #20]
 800a700:	e7c3      	b.n	800a68a <_vfiprintf_r+0x176>
 800a702:	fb0c 2101 	mla	r1, ip, r1, r2
 800a706:	4604      	mov	r4, r0
 800a708:	2301      	movs	r3, #1
 800a70a:	e7f0      	b.n	800a6ee <_vfiprintf_r+0x1da>
 800a70c:	ab03      	add	r3, sp, #12
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	462a      	mov	r2, r5
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <_vfiprintf_r+0x258>)
 800a714:	a904      	add	r1, sp, #16
 800a716:	4630      	mov	r0, r6
 800a718:	f3af 8000 	nop.w
 800a71c:	4607      	mov	r7, r0
 800a71e:	1c78      	adds	r0, r7, #1
 800a720:	d1d6      	bne.n	800a6d0 <_vfiprintf_r+0x1bc>
 800a722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a724:	07d9      	lsls	r1, r3, #31
 800a726:	d405      	bmi.n	800a734 <_vfiprintf_r+0x220>
 800a728:	89ab      	ldrh	r3, [r5, #12]
 800a72a:	059a      	lsls	r2, r3, #22
 800a72c:	d402      	bmi.n	800a734 <_vfiprintf_r+0x220>
 800a72e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a730:	f7ff fd5c 	bl	800a1ec <__retarget_lock_release_recursive>
 800a734:	89ab      	ldrh	r3, [r5, #12]
 800a736:	065b      	lsls	r3, r3, #25
 800a738:	f53f af12 	bmi.w	800a560 <_vfiprintf_r+0x4c>
 800a73c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a73e:	e711      	b.n	800a564 <_vfiprintf_r+0x50>
 800a740:	ab03      	add	r3, sp, #12
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	462a      	mov	r2, r5
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <_vfiprintf_r+0x258>)
 800a748:	a904      	add	r1, sp, #16
 800a74a:	4630      	mov	r0, r6
 800a74c:	f000 f880 	bl	800a850 <_printf_i>
 800a750:	e7e4      	b.n	800a71c <_vfiprintf_r+0x208>
 800a752:	bf00      	nop
 800a754:	0800c070 	.word	0x0800c070
 800a758:	0800c090 	.word	0x0800c090
 800a75c:	0800c050 	.word	0x0800c050
 800a760:	0800bf1c 	.word	0x0800bf1c
 800a764:	0800bf26 	.word	0x0800bf26
 800a768:	00000000 	.word	0x00000000
 800a76c:	0800a4ef 	.word	0x0800a4ef
 800a770:	0800bf22 	.word	0x0800bf22

0800a774 <_printf_common>:
 800a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a778:	4616      	mov	r6, r2
 800a77a:	4699      	mov	r9, r3
 800a77c:	688a      	ldr	r2, [r1, #8]
 800a77e:	690b      	ldr	r3, [r1, #16]
 800a780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a784:	4293      	cmp	r3, r2
 800a786:	bfb8      	it	lt
 800a788:	4613      	movlt	r3, r2
 800a78a:	6033      	str	r3, [r6, #0]
 800a78c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a790:	4607      	mov	r7, r0
 800a792:	460c      	mov	r4, r1
 800a794:	b10a      	cbz	r2, 800a79a <_printf_common+0x26>
 800a796:	3301      	adds	r3, #1
 800a798:	6033      	str	r3, [r6, #0]
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	0699      	lsls	r1, r3, #26
 800a79e:	bf42      	ittt	mi
 800a7a0:	6833      	ldrmi	r3, [r6, #0]
 800a7a2:	3302      	addmi	r3, #2
 800a7a4:	6033      	strmi	r3, [r6, #0]
 800a7a6:	6825      	ldr	r5, [r4, #0]
 800a7a8:	f015 0506 	ands.w	r5, r5, #6
 800a7ac:	d106      	bne.n	800a7bc <_printf_common+0x48>
 800a7ae:	f104 0a19 	add.w	sl, r4, #25
 800a7b2:	68e3      	ldr	r3, [r4, #12]
 800a7b4:	6832      	ldr	r2, [r6, #0]
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	42ab      	cmp	r3, r5
 800a7ba:	dc26      	bgt.n	800a80a <_printf_common+0x96>
 800a7bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7c0:	1e13      	subs	r3, r2, #0
 800a7c2:	6822      	ldr	r2, [r4, #0]
 800a7c4:	bf18      	it	ne
 800a7c6:	2301      	movne	r3, #1
 800a7c8:	0692      	lsls	r2, r2, #26
 800a7ca:	d42b      	bmi.n	800a824 <_printf_common+0xb0>
 800a7cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	47c0      	blx	r8
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d01e      	beq.n	800a818 <_printf_common+0xa4>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	68e5      	ldr	r5, [r4, #12]
 800a7de:	6832      	ldr	r2, [r6, #0]
 800a7e0:	f003 0306 	and.w	r3, r3, #6
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	bf08      	it	eq
 800a7e8:	1aad      	subeq	r5, r5, r2
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	6922      	ldr	r2, [r4, #16]
 800a7ee:	bf0c      	ite	eq
 800a7f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f4:	2500      	movne	r5, #0
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	bfc4      	itt	gt
 800a7fa:	1a9b      	subgt	r3, r3, r2
 800a7fc:	18ed      	addgt	r5, r5, r3
 800a7fe:	2600      	movs	r6, #0
 800a800:	341a      	adds	r4, #26
 800a802:	42b5      	cmp	r5, r6
 800a804:	d11a      	bne.n	800a83c <_printf_common+0xc8>
 800a806:	2000      	movs	r0, #0
 800a808:	e008      	b.n	800a81c <_printf_common+0xa8>
 800a80a:	2301      	movs	r3, #1
 800a80c:	4652      	mov	r2, sl
 800a80e:	4649      	mov	r1, r9
 800a810:	4638      	mov	r0, r7
 800a812:	47c0      	blx	r8
 800a814:	3001      	adds	r0, #1
 800a816:	d103      	bne.n	800a820 <_printf_common+0xac>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a820:	3501      	adds	r5, #1
 800a822:	e7c6      	b.n	800a7b2 <_printf_common+0x3e>
 800a824:	18e1      	adds	r1, r4, r3
 800a826:	1c5a      	adds	r2, r3, #1
 800a828:	2030      	movs	r0, #48	; 0x30
 800a82a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a82e:	4422      	add	r2, r4
 800a830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a838:	3302      	adds	r3, #2
 800a83a:	e7c7      	b.n	800a7cc <_printf_common+0x58>
 800a83c:	2301      	movs	r3, #1
 800a83e:	4622      	mov	r2, r4
 800a840:	4649      	mov	r1, r9
 800a842:	4638      	mov	r0, r7
 800a844:	47c0      	blx	r8
 800a846:	3001      	adds	r0, #1
 800a848:	d0e6      	beq.n	800a818 <_printf_common+0xa4>
 800a84a:	3601      	adds	r6, #1
 800a84c:	e7d9      	b.n	800a802 <_printf_common+0x8e>
	...

0800a850 <_printf_i>:
 800a850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	7e0f      	ldrb	r7, [r1, #24]
 800a856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a858:	2f78      	cmp	r7, #120	; 0x78
 800a85a:	4691      	mov	r9, r2
 800a85c:	4680      	mov	r8, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	469a      	mov	sl, r3
 800a862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a866:	d807      	bhi.n	800a878 <_printf_i+0x28>
 800a868:	2f62      	cmp	r7, #98	; 0x62
 800a86a:	d80a      	bhi.n	800a882 <_printf_i+0x32>
 800a86c:	2f00      	cmp	r7, #0
 800a86e:	f000 80d8 	beq.w	800aa22 <_printf_i+0x1d2>
 800a872:	2f58      	cmp	r7, #88	; 0x58
 800a874:	f000 80a3 	beq.w	800a9be <_printf_i+0x16e>
 800a878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a87c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a880:	e03a      	b.n	800a8f8 <_printf_i+0xa8>
 800a882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a886:	2b15      	cmp	r3, #21
 800a888:	d8f6      	bhi.n	800a878 <_printf_i+0x28>
 800a88a:	a101      	add	r1, pc, #4	; (adr r1, 800a890 <_printf_i+0x40>)
 800a88c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a890:	0800a8e9 	.word	0x0800a8e9
 800a894:	0800a8fd 	.word	0x0800a8fd
 800a898:	0800a879 	.word	0x0800a879
 800a89c:	0800a879 	.word	0x0800a879
 800a8a0:	0800a879 	.word	0x0800a879
 800a8a4:	0800a879 	.word	0x0800a879
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800a879 	.word	0x0800a879
 800a8b0:	0800a879 	.word	0x0800a879
 800a8b4:	0800a879 	.word	0x0800a879
 800a8b8:	0800a879 	.word	0x0800a879
 800a8bc:	0800aa09 	.word	0x0800aa09
 800a8c0:	0800a92d 	.word	0x0800a92d
 800a8c4:	0800a9eb 	.word	0x0800a9eb
 800a8c8:	0800a879 	.word	0x0800a879
 800a8cc:	0800a879 	.word	0x0800a879
 800a8d0:	0800aa2b 	.word	0x0800aa2b
 800a8d4:	0800a879 	.word	0x0800a879
 800a8d8:	0800a92d 	.word	0x0800a92d
 800a8dc:	0800a879 	.word	0x0800a879
 800a8e0:	0800a879 	.word	0x0800a879
 800a8e4:	0800a9f3 	.word	0x0800a9f3
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	1d1a      	adds	r2, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	602a      	str	r2, [r5, #0]
 800a8f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e0a3      	b.n	800aa44 <_printf_i+0x1f4>
 800a8fc:	6820      	ldr	r0, [r4, #0]
 800a8fe:	6829      	ldr	r1, [r5, #0]
 800a900:	0606      	lsls	r6, r0, #24
 800a902:	f101 0304 	add.w	r3, r1, #4
 800a906:	d50a      	bpl.n	800a91e <_printf_i+0xce>
 800a908:	680e      	ldr	r6, [r1, #0]
 800a90a:	602b      	str	r3, [r5, #0]
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	da03      	bge.n	800a918 <_printf_i+0xc8>
 800a910:	232d      	movs	r3, #45	; 0x2d
 800a912:	4276      	negs	r6, r6
 800a914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a918:	485e      	ldr	r0, [pc, #376]	; (800aa94 <_printf_i+0x244>)
 800a91a:	230a      	movs	r3, #10
 800a91c:	e019      	b.n	800a952 <_printf_i+0x102>
 800a91e:	680e      	ldr	r6, [r1, #0]
 800a920:	602b      	str	r3, [r5, #0]
 800a922:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a926:	bf18      	it	ne
 800a928:	b236      	sxthne	r6, r6
 800a92a:	e7ef      	b.n	800a90c <_printf_i+0xbc>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	6820      	ldr	r0, [r4, #0]
 800a930:	1d19      	adds	r1, r3, #4
 800a932:	6029      	str	r1, [r5, #0]
 800a934:	0601      	lsls	r1, r0, #24
 800a936:	d501      	bpl.n	800a93c <_printf_i+0xec>
 800a938:	681e      	ldr	r6, [r3, #0]
 800a93a:	e002      	b.n	800a942 <_printf_i+0xf2>
 800a93c:	0646      	lsls	r6, r0, #25
 800a93e:	d5fb      	bpl.n	800a938 <_printf_i+0xe8>
 800a940:	881e      	ldrh	r6, [r3, #0]
 800a942:	4854      	ldr	r0, [pc, #336]	; (800aa94 <_printf_i+0x244>)
 800a944:	2f6f      	cmp	r7, #111	; 0x6f
 800a946:	bf0c      	ite	eq
 800a948:	2308      	moveq	r3, #8
 800a94a:	230a      	movne	r3, #10
 800a94c:	2100      	movs	r1, #0
 800a94e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a952:	6865      	ldr	r5, [r4, #4]
 800a954:	60a5      	str	r5, [r4, #8]
 800a956:	2d00      	cmp	r5, #0
 800a958:	bfa2      	ittt	ge
 800a95a:	6821      	ldrge	r1, [r4, #0]
 800a95c:	f021 0104 	bicge.w	r1, r1, #4
 800a960:	6021      	strge	r1, [r4, #0]
 800a962:	b90e      	cbnz	r6, 800a968 <_printf_i+0x118>
 800a964:	2d00      	cmp	r5, #0
 800a966:	d04d      	beq.n	800aa04 <_printf_i+0x1b4>
 800a968:	4615      	mov	r5, r2
 800a96a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a96e:	fb03 6711 	mls	r7, r3, r1, r6
 800a972:	5dc7      	ldrb	r7, [r0, r7]
 800a974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a978:	4637      	mov	r7, r6
 800a97a:	42bb      	cmp	r3, r7
 800a97c:	460e      	mov	r6, r1
 800a97e:	d9f4      	bls.n	800a96a <_printf_i+0x11a>
 800a980:	2b08      	cmp	r3, #8
 800a982:	d10b      	bne.n	800a99c <_printf_i+0x14c>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	07de      	lsls	r6, r3, #31
 800a988:	d508      	bpl.n	800a99c <_printf_i+0x14c>
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	6861      	ldr	r1, [r4, #4]
 800a98e:	4299      	cmp	r1, r3
 800a990:	bfde      	ittt	le
 800a992:	2330      	movle	r3, #48	; 0x30
 800a994:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a99c:	1b52      	subs	r2, r2, r5
 800a99e:	6122      	str	r2, [r4, #16]
 800a9a0:	f8cd a000 	str.w	sl, [sp]
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	aa03      	add	r2, sp, #12
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	f7ff fee2 	bl	800a774 <_printf_common>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d14c      	bne.n	800aa4e <_printf_i+0x1fe>
 800a9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b8:	b004      	add	sp, #16
 800a9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9be:	4835      	ldr	r0, [pc, #212]	; (800aa94 <_printf_i+0x244>)
 800a9c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9c4:	6829      	ldr	r1, [r5, #0]
 800a9c6:	6823      	ldr	r3, [r4, #0]
 800a9c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9cc:	6029      	str	r1, [r5, #0]
 800a9ce:	061d      	lsls	r5, r3, #24
 800a9d0:	d514      	bpl.n	800a9fc <_printf_i+0x1ac>
 800a9d2:	07df      	lsls	r7, r3, #31
 800a9d4:	bf44      	itt	mi
 800a9d6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9da:	6023      	strmi	r3, [r4, #0]
 800a9dc:	b91e      	cbnz	r6, 800a9e6 <_printf_i+0x196>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	f023 0320 	bic.w	r3, r3, #32
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	2310      	movs	r3, #16
 800a9e8:	e7b0      	b.n	800a94c <_printf_i+0xfc>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	f043 0320 	orr.w	r3, r3, #32
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	2378      	movs	r3, #120	; 0x78
 800a9f4:	4828      	ldr	r0, [pc, #160]	; (800aa98 <_printf_i+0x248>)
 800a9f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9fa:	e7e3      	b.n	800a9c4 <_printf_i+0x174>
 800a9fc:	0659      	lsls	r1, r3, #25
 800a9fe:	bf48      	it	mi
 800aa00:	b2b6      	uxthmi	r6, r6
 800aa02:	e7e6      	b.n	800a9d2 <_printf_i+0x182>
 800aa04:	4615      	mov	r5, r2
 800aa06:	e7bb      	b.n	800a980 <_printf_i+0x130>
 800aa08:	682b      	ldr	r3, [r5, #0]
 800aa0a:	6826      	ldr	r6, [r4, #0]
 800aa0c:	6961      	ldr	r1, [r4, #20]
 800aa0e:	1d18      	adds	r0, r3, #4
 800aa10:	6028      	str	r0, [r5, #0]
 800aa12:	0635      	lsls	r5, r6, #24
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	d501      	bpl.n	800aa1c <_printf_i+0x1cc>
 800aa18:	6019      	str	r1, [r3, #0]
 800aa1a:	e002      	b.n	800aa22 <_printf_i+0x1d2>
 800aa1c:	0670      	lsls	r0, r6, #25
 800aa1e:	d5fb      	bpl.n	800aa18 <_printf_i+0x1c8>
 800aa20:	8019      	strh	r1, [r3, #0]
 800aa22:	2300      	movs	r3, #0
 800aa24:	6123      	str	r3, [r4, #16]
 800aa26:	4615      	mov	r5, r2
 800aa28:	e7ba      	b.n	800a9a0 <_printf_i+0x150>
 800aa2a:	682b      	ldr	r3, [r5, #0]
 800aa2c:	1d1a      	adds	r2, r3, #4
 800aa2e:	602a      	str	r2, [r5, #0]
 800aa30:	681d      	ldr	r5, [r3, #0]
 800aa32:	6862      	ldr	r2, [r4, #4]
 800aa34:	2100      	movs	r1, #0
 800aa36:	4628      	mov	r0, r5
 800aa38:	f7f5 fbe2 	bl	8000200 <memchr>
 800aa3c:	b108      	cbz	r0, 800aa42 <_printf_i+0x1f2>
 800aa3e:	1b40      	subs	r0, r0, r5
 800aa40:	6060      	str	r0, [r4, #4]
 800aa42:	6863      	ldr	r3, [r4, #4]
 800aa44:	6123      	str	r3, [r4, #16]
 800aa46:	2300      	movs	r3, #0
 800aa48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa4c:	e7a8      	b.n	800a9a0 <_printf_i+0x150>
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	462a      	mov	r2, r5
 800aa52:	4649      	mov	r1, r9
 800aa54:	4640      	mov	r0, r8
 800aa56:	47d0      	blx	sl
 800aa58:	3001      	adds	r0, #1
 800aa5a:	d0ab      	beq.n	800a9b4 <_printf_i+0x164>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	079b      	lsls	r3, r3, #30
 800aa60:	d413      	bmi.n	800aa8a <_printf_i+0x23a>
 800aa62:	68e0      	ldr	r0, [r4, #12]
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	4298      	cmp	r0, r3
 800aa68:	bfb8      	it	lt
 800aa6a:	4618      	movlt	r0, r3
 800aa6c:	e7a4      	b.n	800a9b8 <_printf_i+0x168>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4632      	mov	r2, r6
 800aa72:	4649      	mov	r1, r9
 800aa74:	4640      	mov	r0, r8
 800aa76:	47d0      	blx	sl
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d09b      	beq.n	800a9b4 <_printf_i+0x164>
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	68e3      	ldr	r3, [r4, #12]
 800aa80:	9903      	ldr	r1, [sp, #12]
 800aa82:	1a5b      	subs	r3, r3, r1
 800aa84:	42ab      	cmp	r3, r5
 800aa86:	dcf2      	bgt.n	800aa6e <_printf_i+0x21e>
 800aa88:	e7eb      	b.n	800aa62 <_printf_i+0x212>
 800aa8a:	2500      	movs	r5, #0
 800aa8c:	f104 0619 	add.w	r6, r4, #25
 800aa90:	e7f5      	b.n	800aa7e <_printf_i+0x22e>
 800aa92:	bf00      	nop
 800aa94:	0800bf2d 	.word	0x0800bf2d
 800aa98:	0800bf3e 	.word	0x0800bf3e

0800aa9c <siscanf>:
 800aa9c:	b40e      	push	{r1, r2, r3}
 800aa9e:	b510      	push	{r4, lr}
 800aaa0:	b09f      	sub	sp, #124	; 0x7c
 800aaa2:	ac21      	add	r4, sp, #132	; 0x84
 800aaa4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aaa8:	f854 2b04 	ldr.w	r2, [r4], #4
 800aaac:	9201      	str	r2, [sp, #4]
 800aaae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aab2:	9004      	str	r0, [sp, #16]
 800aab4:	9008      	str	r0, [sp, #32]
 800aab6:	f7f5 fb8b 	bl	80001d0 <strlen>
 800aaba:	4b0c      	ldr	r3, [pc, #48]	; (800aaec <siscanf+0x50>)
 800aabc:	9005      	str	r0, [sp, #20]
 800aabe:	9009      	str	r0, [sp, #36]	; 0x24
 800aac0:	930d      	str	r3, [sp, #52]	; 0x34
 800aac2:	480b      	ldr	r0, [pc, #44]	; (800aaf0 <siscanf+0x54>)
 800aac4:	9a01      	ldr	r2, [sp, #4]
 800aac6:	6800      	ldr	r0, [r0, #0]
 800aac8:	9403      	str	r4, [sp, #12]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9311      	str	r3, [sp, #68]	; 0x44
 800aace:	9316      	str	r3, [sp, #88]	; 0x58
 800aad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aad4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aad8:	a904      	add	r1, sp, #16
 800aada:	4623      	mov	r3, r4
 800aadc:	f000 fcb4 	bl	800b448 <__ssvfiscanf_r>
 800aae0:	b01f      	add	sp, #124	; 0x7c
 800aae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae6:	b003      	add	sp, #12
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	0800ab17 	.word	0x0800ab17
 800aaf0:	20000110 	.word	0x20000110

0800aaf4 <__sread>:
 800aaf4:	b510      	push	{r4, lr}
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafc:	f000 ff6e 	bl	800b9dc <_read_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	bfab      	itete	ge
 800ab04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab06:	89a3      	ldrhlt	r3, [r4, #12]
 800ab08:	181b      	addge	r3, r3, r0
 800ab0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab0e:	bfac      	ite	ge
 800ab10:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab12:	81a3      	strhlt	r3, [r4, #12]
 800ab14:	bd10      	pop	{r4, pc}

0800ab16 <__seofread>:
 800ab16:	2000      	movs	r0, #0
 800ab18:	4770      	bx	lr

0800ab1a <__swrite>:
 800ab1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1e:	461f      	mov	r7, r3
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	05db      	lsls	r3, r3, #23
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	4616      	mov	r6, r2
 800ab2a:	d505      	bpl.n	800ab38 <__swrite+0x1e>
 800ab2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab30:	2302      	movs	r3, #2
 800ab32:	2200      	movs	r2, #0
 800ab34:	f000 fb6c 	bl	800b210 <_lseek_r>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	4632      	mov	r2, r6
 800ab46:	463b      	mov	r3, r7
 800ab48:	4628      	mov	r0, r5
 800ab4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	f000 b903 	b.w	800ad58 <_write_r>

0800ab52 <__sseek>:
 800ab52:	b510      	push	{r4, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab5a:	f000 fb59 	bl	800b210 <_lseek_r>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	bf15      	itete	ne
 800ab64:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab6e:	81a3      	strheq	r3, [r4, #12]
 800ab70:	bf18      	it	ne
 800ab72:	81a3      	strhne	r3, [r4, #12]
 800ab74:	bd10      	pop	{r4, pc}

0800ab76 <__sclose>:
 800ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7a:	f000 b975 	b.w	800ae68 <_close_r>

0800ab7e <strcpy>:
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab84:	f803 2b01 	strb.w	r2, [r3], #1
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	d1f9      	bne.n	800ab80 <strcpy+0x2>
 800ab8c:	4770      	bx	lr

0800ab8e <strncmp>:
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	b17a      	cbz	r2, 800abb2 <strncmp+0x24>
 800ab92:	4603      	mov	r3, r0
 800ab94:	3901      	subs	r1, #1
 800ab96:	1884      	adds	r4, r0, r2
 800ab98:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aba0:	4290      	cmp	r0, r2
 800aba2:	d101      	bne.n	800aba8 <strncmp+0x1a>
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	d101      	bne.n	800abac <strncmp+0x1e>
 800aba8:	1a80      	subs	r0, r0, r2
 800abaa:	bd10      	pop	{r4, pc}
 800abac:	2800      	cmp	r0, #0
 800abae:	d1f3      	bne.n	800ab98 <strncmp+0xa>
 800abb0:	e7fa      	b.n	800aba8 <strncmp+0x1a>
 800abb2:	4610      	mov	r0, r2
 800abb4:	e7f9      	b.n	800abaa <strncmp+0x1c>
	...

0800abb8 <_strtoul_l.constprop.0>:
 800abb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abbc:	4f36      	ldr	r7, [pc, #216]	; (800ac98 <_strtoul_l.constprop.0+0xe0>)
 800abbe:	4686      	mov	lr, r0
 800abc0:	460d      	mov	r5, r1
 800abc2:	4628      	mov	r0, r5
 800abc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abc8:	5de6      	ldrb	r6, [r4, r7]
 800abca:	f016 0608 	ands.w	r6, r6, #8
 800abce:	d1f8      	bne.n	800abc2 <_strtoul_l.constprop.0+0xa>
 800abd0:	2c2d      	cmp	r4, #45	; 0x2d
 800abd2:	d12f      	bne.n	800ac34 <_strtoul_l.constprop.0+0x7c>
 800abd4:	782c      	ldrb	r4, [r5, #0]
 800abd6:	2601      	movs	r6, #1
 800abd8:	1c85      	adds	r5, r0, #2
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d057      	beq.n	800ac8e <_strtoul_l.constprop.0+0xd6>
 800abde:	2b10      	cmp	r3, #16
 800abe0:	d109      	bne.n	800abf6 <_strtoul_l.constprop.0+0x3e>
 800abe2:	2c30      	cmp	r4, #48	; 0x30
 800abe4:	d107      	bne.n	800abf6 <_strtoul_l.constprop.0+0x3e>
 800abe6:	7828      	ldrb	r0, [r5, #0]
 800abe8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800abec:	2858      	cmp	r0, #88	; 0x58
 800abee:	d149      	bne.n	800ac84 <_strtoul_l.constprop.0+0xcc>
 800abf0:	786c      	ldrb	r4, [r5, #1]
 800abf2:	2310      	movs	r3, #16
 800abf4:	3502      	adds	r5, #2
 800abf6:	f04f 38ff 	mov.w	r8, #4294967295
 800abfa:	2700      	movs	r7, #0
 800abfc:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac00:	fb03 f908 	mul.w	r9, r3, r8
 800ac04:	ea6f 0909 	mvn.w	r9, r9
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac0e:	f1bc 0f09 	cmp.w	ip, #9
 800ac12:	d814      	bhi.n	800ac3e <_strtoul_l.constprop.0+0x86>
 800ac14:	4664      	mov	r4, ip
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	dd22      	ble.n	800ac60 <_strtoul_l.constprop.0+0xa8>
 800ac1a:	2f00      	cmp	r7, #0
 800ac1c:	db1d      	blt.n	800ac5a <_strtoul_l.constprop.0+0xa2>
 800ac1e:	4580      	cmp	r8, r0
 800ac20:	d31b      	bcc.n	800ac5a <_strtoul_l.constprop.0+0xa2>
 800ac22:	d101      	bne.n	800ac28 <_strtoul_l.constprop.0+0x70>
 800ac24:	45a1      	cmp	r9, r4
 800ac26:	db18      	blt.n	800ac5a <_strtoul_l.constprop.0+0xa2>
 800ac28:	fb00 4003 	mla	r0, r0, r3, r4
 800ac2c:	2701      	movs	r7, #1
 800ac2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac32:	e7ea      	b.n	800ac0a <_strtoul_l.constprop.0+0x52>
 800ac34:	2c2b      	cmp	r4, #43	; 0x2b
 800ac36:	bf04      	itt	eq
 800ac38:	782c      	ldrbeq	r4, [r5, #0]
 800ac3a:	1c85      	addeq	r5, r0, #2
 800ac3c:	e7cd      	b.n	800abda <_strtoul_l.constprop.0+0x22>
 800ac3e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac42:	f1bc 0f19 	cmp.w	ip, #25
 800ac46:	d801      	bhi.n	800ac4c <_strtoul_l.constprop.0+0x94>
 800ac48:	3c37      	subs	r4, #55	; 0x37
 800ac4a:	e7e4      	b.n	800ac16 <_strtoul_l.constprop.0+0x5e>
 800ac4c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac50:	f1bc 0f19 	cmp.w	ip, #25
 800ac54:	d804      	bhi.n	800ac60 <_strtoul_l.constprop.0+0xa8>
 800ac56:	3c57      	subs	r4, #87	; 0x57
 800ac58:	e7dd      	b.n	800ac16 <_strtoul_l.constprop.0+0x5e>
 800ac5a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac5e:	e7e6      	b.n	800ac2e <_strtoul_l.constprop.0+0x76>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	da07      	bge.n	800ac74 <_strtoul_l.constprop.0+0xbc>
 800ac64:	2322      	movs	r3, #34	; 0x22
 800ac66:	f8ce 3000 	str.w	r3, [lr]
 800ac6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6e:	b932      	cbnz	r2, 800ac7e <_strtoul_l.constprop.0+0xc6>
 800ac70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac74:	b106      	cbz	r6, 800ac78 <_strtoul_l.constprop.0+0xc0>
 800ac76:	4240      	negs	r0, r0
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	d0f9      	beq.n	800ac70 <_strtoul_l.constprop.0+0xb8>
 800ac7c:	b107      	cbz	r7, 800ac80 <_strtoul_l.constprop.0+0xc8>
 800ac7e:	1e69      	subs	r1, r5, #1
 800ac80:	6011      	str	r1, [r2, #0]
 800ac82:	e7f5      	b.n	800ac70 <_strtoul_l.constprop.0+0xb8>
 800ac84:	2430      	movs	r4, #48	; 0x30
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1b5      	bne.n	800abf6 <_strtoul_l.constprop.0+0x3e>
 800ac8a:	2308      	movs	r3, #8
 800ac8c:	e7b3      	b.n	800abf6 <_strtoul_l.constprop.0+0x3e>
 800ac8e:	2c30      	cmp	r4, #48	; 0x30
 800ac90:	d0a9      	beq.n	800abe6 <_strtoul_l.constprop.0+0x2e>
 800ac92:	230a      	movs	r3, #10
 800ac94:	e7af      	b.n	800abf6 <_strtoul_l.constprop.0+0x3e>
 800ac96:	bf00      	nop
 800ac98:	0800bf50 	.word	0x0800bf50

0800ac9c <_strtoul_r>:
 800ac9c:	f7ff bf8c 	b.w	800abb8 <_strtoul_l.constprop.0>

0800aca0 <strtoul>:
 800aca0:	4613      	mov	r3, r2
 800aca2:	460a      	mov	r2, r1
 800aca4:	4601      	mov	r1, r0
 800aca6:	4802      	ldr	r0, [pc, #8]	; (800acb0 <strtoul+0x10>)
 800aca8:	6800      	ldr	r0, [r0, #0]
 800acaa:	f7ff bf85 	b.w	800abb8 <_strtoul_l.constprop.0>
 800acae:	bf00      	nop
 800acb0:	20000110 	.word	0x20000110

0800acb4 <__swbuf_r>:
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	460e      	mov	r6, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	4605      	mov	r5, r0
 800acbc:	b118      	cbz	r0, 800acc6 <__swbuf_r+0x12>
 800acbe:	6983      	ldr	r3, [r0, #24]
 800acc0:	b90b      	cbnz	r3, 800acc6 <__swbuf_r+0x12>
 800acc2:	f000 fa07 	bl	800b0d4 <__sinit>
 800acc6:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <__swbuf_r+0x98>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	d12b      	bne.n	800ad24 <__swbuf_r+0x70>
 800accc:	686c      	ldr	r4, [r5, #4]
 800acce:	69a3      	ldr	r3, [r4, #24]
 800acd0:	60a3      	str	r3, [r4, #8]
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	071a      	lsls	r2, r3, #28
 800acd6:	d52f      	bpl.n	800ad38 <__swbuf_r+0x84>
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	b36b      	cbz	r3, 800ad38 <__swbuf_r+0x84>
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	6820      	ldr	r0, [r4, #0]
 800ace0:	1ac0      	subs	r0, r0, r3
 800ace2:	6963      	ldr	r3, [r4, #20]
 800ace4:	b2f6      	uxtb	r6, r6
 800ace6:	4283      	cmp	r3, r0
 800ace8:	4637      	mov	r7, r6
 800acea:	dc04      	bgt.n	800acf6 <__swbuf_r+0x42>
 800acec:	4621      	mov	r1, r4
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 f95c 	bl	800afac <_fflush_r>
 800acf4:	bb30      	cbnz	r0, 800ad44 <__swbuf_r+0x90>
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	60a3      	str	r3, [r4, #8]
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	701e      	strb	r6, [r3, #0]
 800ad04:	6963      	ldr	r3, [r4, #20]
 800ad06:	3001      	adds	r0, #1
 800ad08:	4283      	cmp	r3, r0
 800ad0a:	d004      	beq.n	800ad16 <__swbuf_r+0x62>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	07db      	lsls	r3, r3, #31
 800ad10:	d506      	bpl.n	800ad20 <__swbuf_r+0x6c>
 800ad12:	2e0a      	cmp	r6, #10
 800ad14:	d104      	bne.n	800ad20 <__swbuf_r+0x6c>
 800ad16:	4621      	mov	r1, r4
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 f947 	bl	800afac <_fflush_r>
 800ad1e:	b988      	cbnz	r0, 800ad44 <__swbuf_r+0x90>
 800ad20:	4638      	mov	r0, r7
 800ad22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad24:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <__swbuf_r+0x9c>)
 800ad26:	429c      	cmp	r4, r3
 800ad28:	d101      	bne.n	800ad2e <__swbuf_r+0x7a>
 800ad2a:	68ac      	ldr	r4, [r5, #8]
 800ad2c:	e7cf      	b.n	800acce <__swbuf_r+0x1a>
 800ad2e:	4b09      	ldr	r3, [pc, #36]	; (800ad54 <__swbuf_r+0xa0>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	bf08      	it	eq
 800ad34:	68ec      	ldreq	r4, [r5, #12]
 800ad36:	e7ca      	b.n	800acce <__swbuf_r+0x1a>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 f81e 	bl	800ad7c <__swsetup_r>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d0cb      	beq.n	800acdc <__swbuf_r+0x28>
 800ad44:	f04f 37ff 	mov.w	r7, #4294967295
 800ad48:	e7ea      	b.n	800ad20 <__swbuf_r+0x6c>
 800ad4a:	bf00      	nop
 800ad4c:	0800c070 	.word	0x0800c070
 800ad50:	0800c090 	.word	0x0800c090
 800ad54:	0800c050 	.word	0x0800c050

0800ad58 <_write_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	; (800ad78 <_write_r+0x20>)
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	4608      	mov	r0, r1
 800ad60:	4611      	mov	r1, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f7f8 ff2b 	bl	8003bc2 <_write>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_write_r+0x1e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_write_r+0x1e>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	20000d4c 	.word	0x20000d4c

0800ad7c <__swsetup_r>:
 800ad7c:	4b32      	ldr	r3, [pc, #200]	; (800ae48 <__swsetup_r+0xcc>)
 800ad7e:	b570      	push	{r4, r5, r6, lr}
 800ad80:	681d      	ldr	r5, [r3, #0]
 800ad82:	4606      	mov	r6, r0
 800ad84:	460c      	mov	r4, r1
 800ad86:	b125      	cbz	r5, 800ad92 <__swsetup_r+0x16>
 800ad88:	69ab      	ldr	r3, [r5, #24]
 800ad8a:	b913      	cbnz	r3, 800ad92 <__swsetup_r+0x16>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 f9a1 	bl	800b0d4 <__sinit>
 800ad92:	4b2e      	ldr	r3, [pc, #184]	; (800ae4c <__swsetup_r+0xd0>)
 800ad94:	429c      	cmp	r4, r3
 800ad96:	d10f      	bne.n	800adb8 <__swsetup_r+0x3c>
 800ad98:	686c      	ldr	r4, [r5, #4]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ada0:	0719      	lsls	r1, r3, #28
 800ada2:	d42c      	bmi.n	800adfe <__swsetup_r+0x82>
 800ada4:	06dd      	lsls	r5, r3, #27
 800ada6:	d411      	bmi.n	800adcc <__swsetup_r+0x50>
 800ada8:	2309      	movs	r3, #9
 800adaa:	6033      	str	r3, [r6, #0]
 800adac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	e03e      	b.n	800ae36 <__swsetup_r+0xba>
 800adb8:	4b25      	ldr	r3, [pc, #148]	; (800ae50 <__swsetup_r+0xd4>)
 800adba:	429c      	cmp	r4, r3
 800adbc:	d101      	bne.n	800adc2 <__swsetup_r+0x46>
 800adbe:	68ac      	ldr	r4, [r5, #8]
 800adc0:	e7eb      	b.n	800ad9a <__swsetup_r+0x1e>
 800adc2:	4b24      	ldr	r3, [pc, #144]	; (800ae54 <__swsetup_r+0xd8>)
 800adc4:	429c      	cmp	r4, r3
 800adc6:	bf08      	it	eq
 800adc8:	68ec      	ldreq	r4, [r5, #12]
 800adca:	e7e6      	b.n	800ad9a <__swsetup_r+0x1e>
 800adcc:	0758      	lsls	r0, r3, #29
 800adce:	d512      	bpl.n	800adf6 <__swsetup_r+0x7a>
 800add0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800add2:	b141      	cbz	r1, 800ade6 <__swsetup_r+0x6a>
 800add4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800add8:	4299      	cmp	r1, r3
 800adda:	d002      	beq.n	800ade2 <__swsetup_r+0x66>
 800addc:	4630      	mov	r0, r6
 800adde:	f7fe fd91 	bl	8009904 <_free_r>
 800ade2:	2300      	movs	r3, #0
 800ade4:	6363      	str	r3, [r4, #52]	; 0x34
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800adec:	81a3      	strh	r3, [r4, #12]
 800adee:	2300      	movs	r3, #0
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	6923      	ldr	r3, [r4, #16]
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f043 0308 	orr.w	r3, r3, #8
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	6923      	ldr	r3, [r4, #16]
 800ae00:	b94b      	cbnz	r3, 800ae16 <__swsetup_r+0x9a>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae0c:	d003      	beq.n	800ae16 <__swsetup_r+0x9a>
 800ae0e:	4621      	mov	r1, r4
 800ae10:	4630      	mov	r0, r6
 800ae12:	f000 fa35 	bl	800b280 <__smakebuf_r>
 800ae16:	89a0      	ldrh	r0, [r4, #12]
 800ae18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae1c:	f010 0301 	ands.w	r3, r0, #1
 800ae20:	d00a      	beq.n	800ae38 <__swsetup_r+0xbc>
 800ae22:	2300      	movs	r3, #0
 800ae24:	60a3      	str	r3, [r4, #8]
 800ae26:	6963      	ldr	r3, [r4, #20]
 800ae28:	425b      	negs	r3, r3
 800ae2a:	61a3      	str	r3, [r4, #24]
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	b943      	cbnz	r3, 800ae42 <__swsetup_r+0xc6>
 800ae30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae34:	d1ba      	bne.n	800adac <__swsetup_r+0x30>
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	0781      	lsls	r1, r0, #30
 800ae3a:	bf58      	it	pl
 800ae3c:	6963      	ldrpl	r3, [r4, #20]
 800ae3e:	60a3      	str	r3, [r4, #8]
 800ae40:	e7f4      	b.n	800ae2c <__swsetup_r+0xb0>
 800ae42:	2000      	movs	r0, #0
 800ae44:	e7f7      	b.n	800ae36 <__swsetup_r+0xba>
 800ae46:	bf00      	nop
 800ae48:	20000110 	.word	0x20000110
 800ae4c:	0800c070 	.word	0x0800c070
 800ae50:	0800c090 	.word	0x0800c090
 800ae54:	0800c050 	.word	0x0800c050

0800ae58 <abort>:
 800ae58:	b508      	push	{r3, lr}
 800ae5a:	2006      	movs	r0, #6
 800ae5c:	f000 fe30 	bl	800bac0 <raise>
 800ae60:	2001      	movs	r0, #1
 800ae62:	f7f8 fe87 	bl	8003b74 <_exit>
	...

0800ae68 <_close_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d06      	ldr	r5, [pc, #24]	; (800ae84 <_close_r+0x1c>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	f7f8 fec1 	bl	8003bfa <_close>
 800ae78:	1c43      	adds	r3, r0, #1
 800ae7a:	d102      	bne.n	800ae82 <_close_r+0x1a>
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	b103      	cbz	r3, 800ae82 <_close_r+0x1a>
 800ae80:	6023      	str	r3, [r4, #0]
 800ae82:	bd38      	pop	{r3, r4, r5, pc}
 800ae84:	20000d4c 	.word	0x20000d4c

0800ae88 <__env_lock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__env_lock+0x8>)
 800ae8a:	f7ff b9ad 	b.w	800a1e8 <__retarget_lock_acquire_recursive>
 800ae8e:	bf00      	nop
 800ae90:	20000d44 	.word	0x20000d44

0800ae94 <__env_unlock>:
 800ae94:	4801      	ldr	r0, [pc, #4]	; (800ae9c <__env_unlock+0x8>)
 800ae96:	f7ff b9a9 	b.w	800a1ec <__retarget_lock_release_recursive>
 800ae9a:	bf00      	nop
 800ae9c:	20000d44 	.word	0x20000d44

0800aea0 <__sflush_r>:
 800aea0:	898a      	ldrh	r2, [r1, #12]
 800aea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea6:	4605      	mov	r5, r0
 800aea8:	0710      	lsls	r0, r2, #28
 800aeaa:	460c      	mov	r4, r1
 800aeac:	d458      	bmi.n	800af60 <__sflush_r+0xc0>
 800aeae:	684b      	ldr	r3, [r1, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc05      	bgt.n	800aec0 <__sflush_r+0x20>
 800aeb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dc02      	bgt.n	800aec0 <__sflush_r+0x20>
 800aeba:	2000      	movs	r0, #0
 800aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aec2:	2e00      	cmp	r6, #0
 800aec4:	d0f9      	beq.n	800aeba <__sflush_r+0x1a>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aecc:	682f      	ldr	r7, [r5, #0]
 800aece:	602b      	str	r3, [r5, #0]
 800aed0:	d032      	beq.n	800af38 <__sflush_r+0x98>
 800aed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	075a      	lsls	r2, r3, #29
 800aed8:	d505      	bpl.n	800aee6 <__sflush_r+0x46>
 800aeda:	6863      	ldr	r3, [r4, #4]
 800aedc:	1ac0      	subs	r0, r0, r3
 800aede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aee0:	b10b      	cbz	r3, 800aee6 <__sflush_r+0x46>
 800aee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aee4:	1ac0      	subs	r0, r0, r3
 800aee6:	2300      	movs	r3, #0
 800aee8:	4602      	mov	r2, r0
 800aeea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeec:	6a21      	ldr	r1, [r4, #32]
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b0      	blx	r6
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	d106      	bne.n	800af06 <__sflush_r+0x66>
 800aef8:	6829      	ldr	r1, [r5, #0]
 800aefa:	291d      	cmp	r1, #29
 800aefc:	d82c      	bhi.n	800af58 <__sflush_r+0xb8>
 800aefe:	4a2a      	ldr	r2, [pc, #168]	; (800afa8 <__sflush_r+0x108>)
 800af00:	40ca      	lsrs	r2, r1
 800af02:	07d6      	lsls	r6, r2, #31
 800af04:	d528      	bpl.n	800af58 <__sflush_r+0xb8>
 800af06:	2200      	movs	r2, #0
 800af08:	6062      	str	r2, [r4, #4]
 800af0a:	04d9      	lsls	r1, r3, #19
 800af0c:	6922      	ldr	r2, [r4, #16]
 800af0e:	6022      	str	r2, [r4, #0]
 800af10:	d504      	bpl.n	800af1c <__sflush_r+0x7c>
 800af12:	1c42      	adds	r2, r0, #1
 800af14:	d101      	bne.n	800af1a <__sflush_r+0x7a>
 800af16:	682b      	ldr	r3, [r5, #0]
 800af18:	b903      	cbnz	r3, 800af1c <__sflush_r+0x7c>
 800af1a:	6560      	str	r0, [r4, #84]	; 0x54
 800af1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af1e:	602f      	str	r7, [r5, #0]
 800af20:	2900      	cmp	r1, #0
 800af22:	d0ca      	beq.n	800aeba <__sflush_r+0x1a>
 800af24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af28:	4299      	cmp	r1, r3
 800af2a:	d002      	beq.n	800af32 <__sflush_r+0x92>
 800af2c:	4628      	mov	r0, r5
 800af2e:	f7fe fce9 	bl	8009904 <_free_r>
 800af32:	2000      	movs	r0, #0
 800af34:	6360      	str	r0, [r4, #52]	; 0x34
 800af36:	e7c1      	b.n	800aebc <__sflush_r+0x1c>
 800af38:	6a21      	ldr	r1, [r4, #32]
 800af3a:	2301      	movs	r3, #1
 800af3c:	4628      	mov	r0, r5
 800af3e:	47b0      	blx	r6
 800af40:	1c41      	adds	r1, r0, #1
 800af42:	d1c7      	bne.n	800aed4 <__sflush_r+0x34>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0c4      	beq.n	800aed4 <__sflush_r+0x34>
 800af4a:	2b1d      	cmp	r3, #29
 800af4c:	d001      	beq.n	800af52 <__sflush_r+0xb2>
 800af4e:	2b16      	cmp	r3, #22
 800af50:	d101      	bne.n	800af56 <__sflush_r+0xb6>
 800af52:	602f      	str	r7, [r5, #0]
 800af54:	e7b1      	b.n	800aeba <__sflush_r+0x1a>
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	e7ad      	b.n	800aebc <__sflush_r+0x1c>
 800af60:	690f      	ldr	r7, [r1, #16]
 800af62:	2f00      	cmp	r7, #0
 800af64:	d0a9      	beq.n	800aeba <__sflush_r+0x1a>
 800af66:	0793      	lsls	r3, r2, #30
 800af68:	680e      	ldr	r6, [r1, #0]
 800af6a:	bf08      	it	eq
 800af6c:	694b      	ldreq	r3, [r1, #20]
 800af6e:	600f      	str	r7, [r1, #0]
 800af70:	bf18      	it	ne
 800af72:	2300      	movne	r3, #0
 800af74:	eba6 0807 	sub.w	r8, r6, r7
 800af78:	608b      	str	r3, [r1, #8]
 800af7a:	f1b8 0f00 	cmp.w	r8, #0
 800af7e:	dd9c      	ble.n	800aeba <__sflush_r+0x1a>
 800af80:	6a21      	ldr	r1, [r4, #32]
 800af82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af84:	4643      	mov	r3, r8
 800af86:	463a      	mov	r2, r7
 800af88:	4628      	mov	r0, r5
 800af8a:	47b0      	blx	r6
 800af8c:	2800      	cmp	r0, #0
 800af8e:	dc06      	bgt.n	800af9e <__sflush_r+0xfe>
 800af90:	89a3      	ldrh	r3, [r4, #12]
 800af92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af96:	81a3      	strh	r3, [r4, #12]
 800af98:	f04f 30ff 	mov.w	r0, #4294967295
 800af9c:	e78e      	b.n	800aebc <__sflush_r+0x1c>
 800af9e:	4407      	add	r7, r0
 800afa0:	eba8 0800 	sub.w	r8, r8, r0
 800afa4:	e7e9      	b.n	800af7a <__sflush_r+0xda>
 800afa6:	bf00      	nop
 800afa8:	20400001 	.word	0x20400001

0800afac <_fflush_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	690b      	ldr	r3, [r1, #16]
 800afb0:	4605      	mov	r5, r0
 800afb2:	460c      	mov	r4, r1
 800afb4:	b913      	cbnz	r3, 800afbc <_fflush_r+0x10>
 800afb6:	2500      	movs	r5, #0
 800afb8:	4628      	mov	r0, r5
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	b118      	cbz	r0, 800afc6 <_fflush_r+0x1a>
 800afbe:	6983      	ldr	r3, [r0, #24]
 800afc0:	b90b      	cbnz	r3, 800afc6 <_fflush_r+0x1a>
 800afc2:	f000 f887 	bl	800b0d4 <__sinit>
 800afc6:	4b14      	ldr	r3, [pc, #80]	; (800b018 <_fflush_r+0x6c>)
 800afc8:	429c      	cmp	r4, r3
 800afca:	d11b      	bne.n	800b004 <_fflush_r+0x58>
 800afcc:	686c      	ldr	r4, [r5, #4]
 800afce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0ef      	beq.n	800afb6 <_fflush_r+0xa>
 800afd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afd8:	07d0      	lsls	r0, r2, #31
 800afda:	d404      	bmi.n	800afe6 <_fflush_r+0x3a>
 800afdc:	0599      	lsls	r1, r3, #22
 800afde:	d402      	bmi.n	800afe6 <_fflush_r+0x3a>
 800afe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afe2:	f7ff f901 	bl	800a1e8 <__retarget_lock_acquire_recursive>
 800afe6:	4628      	mov	r0, r5
 800afe8:	4621      	mov	r1, r4
 800afea:	f7ff ff59 	bl	800aea0 <__sflush_r>
 800afee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aff0:	07da      	lsls	r2, r3, #31
 800aff2:	4605      	mov	r5, r0
 800aff4:	d4e0      	bmi.n	800afb8 <_fflush_r+0xc>
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	059b      	lsls	r3, r3, #22
 800affa:	d4dd      	bmi.n	800afb8 <_fflush_r+0xc>
 800affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800affe:	f7ff f8f5 	bl	800a1ec <__retarget_lock_release_recursive>
 800b002:	e7d9      	b.n	800afb8 <_fflush_r+0xc>
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <_fflush_r+0x70>)
 800b006:	429c      	cmp	r4, r3
 800b008:	d101      	bne.n	800b00e <_fflush_r+0x62>
 800b00a:	68ac      	ldr	r4, [r5, #8]
 800b00c:	e7df      	b.n	800afce <_fflush_r+0x22>
 800b00e:	4b04      	ldr	r3, [pc, #16]	; (800b020 <_fflush_r+0x74>)
 800b010:	429c      	cmp	r4, r3
 800b012:	bf08      	it	eq
 800b014:	68ec      	ldreq	r4, [r5, #12]
 800b016:	e7da      	b.n	800afce <_fflush_r+0x22>
 800b018:	0800c070 	.word	0x0800c070
 800b01c:	0800c090 	.word	0x0800c090
 800b020:	0800c050 	.word	0x0800c050

0800b024 <std>:
 800b024:	2300      	movs	r3, #0
 800b026:	b510      	push	{r4, lr}
 800b028:	4604      	mov	r4, r0
 800b02a:	e9c0 3300 	strd	r3, r3, [r0]
 800b02e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b032:	6083      	str	r3, [r0, #8]
 800b034:	8181      	strh	r1, [r0, #12]
 800b036:	6643      	str	r3, [r0, #100]	; 0x64
 800b038:	81c2      	strh	r2, [r0, #14]
 800b03a:	6183      	str	r3, [r0, #24]
 800b03c:	4619      	mov	r1, r3
 800b03e:	2208      	movs	r2, #8
 800b040:	305c      	adds	r0, #92	; 0x5c
 800b042:	f7fe fc57 	bl	80098f4 <memset>
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <std+0x38>)
 800b048:	6263      	str	r3, [r4, #36]	; 0x24
 800b04a:	4b05      	ldr	r3, [pc, #20]	; (800b060 <std+0x3c>)
 800b04c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b04e:	4b05      	ldr	r3, [pc, #20]	; (800b064 <std+0x40>)
 800b050:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b052:	4b05      	ldr	r3, [pc, #20]	; (800b068 <std+0x44>)
 800b054:	6224      	str	r4, [r4, #32]
 800b056:	6323      	str	r3, [r4, #48]	; 0x30
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop
 800b05c:	0800aaf5 	.word	0x0800aaf5
 800b060:	0800ab1b 	.word	0x0800ab1b
 800b064:	0800ab53 	.word	0x0800ab53
 800b068:	0800ab77 	.word	0x0800ab77

0800b06c <_cleanup_r>:
 800b06c:	4901      	ldr	r1, [pc, #4]	; (800b074 <_cleanup_r+0x8>)
 800b06e:	f000 b8af 	b.w	800b1d0 <_fwalk_reent>
 800b072:	bf00      	nop
 800b074:	0800afad 	.word	0x0800afad

0800b078 <__sfmoreglue>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	2268      	movs	r2, #104	; 0x68
 800b07c:	1e4d      	subs	r5, r1, #1
 800b07e:	4355      	muls	r5, r2
 800b080:	460e      	mov	r6, r1
 800b082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b086:	f7fe fca9 	bl	80099dc <_malloc_r>
 800b08a:	4604      	mov	r4, r0
 800b08c:	b140      	cbz	r0, 800b0a0 <__sfmoreglue+0x28>
 800b08e:	2100      	movs	r1, #0
 800b090:	e9c0 1600 	strd	r1, r6, [r0]
 800b094:	300c      	adds	r0, #12
 800b096:	60a0      	str	r0, [r4, #8]
 800b098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b09c:	f7fe fc2a 	bl	80098f4 <memset>
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}

0800b0a4 <__sfp_lock_acquire>:
 800b0a4:	4801      	ldr	r0, [pc, #4]	; (800b0ac <__sfp_lock_acquire+0x8>)
 800b0a6:	f7ff b89f 	b.w	800a1e8 <__retarget_lock_acquire_recursive>
 800b0aa:	bf00      	nop
 800b0ac:	20000d46 	.word	0x20000d46

0800b0b0 <__sfp_lock_release>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	; (800b0b8 <__sfp_lock_release+0x8>)
 800b0b2:	f7ff b89b 	b.w	800a1ec <__retarget_lock_release_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20000d46 	.word	0x20000d46

0800b0bc <__sinit_lock_acquire>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	; (800b0c4 <__sinit_lock_acquire+0x8>)
 800b0be:	f7ff b893 	b.w	800a1e8 <__retarget_lock_acquire_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20000d47 	.word	0x20000d47

0800b0c8 <__sinit_lock_release>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <__sinit_lock_release+0x8>)
 800b0ca:	f7ff b88f 	b.w	800a1ec <__retarget_lock_release_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20000d47 	.word	0x20000d47

0800b0d4 <__sinit>:
 800b0d4:	b510      	push	{r4, lr}
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	f7ff fff0 	bl	800b0bc <__sinit_lock_acquire>
 800b0dc:	69a3      	ldr	r3, [r4, #24]
 800b0de:	b11b      	cbz	r3, 800b0e8 <__sinit+0x14>
 800b0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0e4:	f7ff bff0 	b.w	800b0c8 <__sinit_lock_release>
 800b0e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b0ec:	6523      	str	r3, [r4, #80]	; 0x50
 800b0ee:	4b13      	ldr	r3, [pc, #76]	; (800b13c <__sinit+0x68>)
 800b0f0:	4a13      	ldr	r2, [pc, #76]	; (800b140 <__sinit+0x6c>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b0f6:	42a3      	cmp	r3, r4
 800b0f8:	bf04      	itt	eq
 800b0fa:	2301      	moveq	r3, #1
 800b0fc:	61a3      	streq	r3, [r4, #24]
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 f820 	bl	800b144 <__sfp>
 800b104:	6060      	str	r0, [r4, #4]
 800b106:	4620      	mov	r0, r4
 800b108:	f000 f81c 	bl	800b144 <__sfp>
 800b10c:	60a0      	str	r0, [r4, #8]
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 f818 	bl	800b144 <__sfp>
 800b114:	2200      	movs	r2, #0
 800b116:	60e0      	str	r0, [r4, #12]
 800b118:	2104      	movs	r1, #4
 800b11a:	6860      	ldr	r0, [r4, #4]
 800b11c:	f7ff ff82 	bl	800b024 <std>
 800b120:	68a0      	ldr	r0, [r4, #8]
 800b122:	2201      	movs	r2, #1
 800b124:	2109      	movs	r1, #9
 800b126:	f7ff ff7d 	bl	800b024 <std>
 800b12a:	68e0      	ldr	r0, [r4, #12]
 800b12c:	2202      	movs	r2, #2
 800b12e:	2112      	movs	r1, #18
 800b130:	f7ff ff78 	bl	800b024 <std>
 800b134:	2301      	movs	r3, #1
 800b136:	61a3      	str	r3, [r4, #24]
 800b138:	e7d2      	b.n	800b0e0 <__sinit+0xc>
 800b13a:	bf00      	nop
 800b13c:	0800bdcc 	.word	0x0800bdcc
 800b140:	0800b06d 	.word	0x0800b06d

0800b144 <__sfp>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	4607      	mov	r7, r0
 800b148:	f7ff ffac 	bl	800b0a4 <__sfp_lock_acquire>
 800b14c:	4b1e      	ldr	r3, [pc, #120]	; (800b1c8 <__sfp+0x84>)
 800b14e:	681e      	ldr	r6, [r3, #0]
 800b150:	69b3      	ldr	r3, [r6, #24]
 800b152:	b913      	cbnz	r3, 800b15a <__sfp+0x16>
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff ffbd 	bl	800b0d4 <__sinit>
 800b15a:	3648      	adds	r6, #72	; 0x48
 800b15c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b160:	3b01      	subs	r3, #1
 800b162:	d503      	bpl.n	800b16c <__sfp+0x28>
 800b164:	6833      	ldr	r3, [r6, #0]
 800b166:	b30b      	cbz	r3, 800b1ac <__sfp+0x68>
 800b168:	6836      	ldr	r6, [r6, #0]
 800b16a:	e7f7      	b.n	800b15c <__sfp+0x18>
 800b16c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b170:	b9d5      	cbnz	r5, 800b1a8 <__sfp+0x64>
 800b172:	4b16      	ldr	r3, [pc, #88]	; (800b1cc <__sfp+0x88>)
 800b174:	60e3      	str	r3, [r4, #12]
 800b176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b17a:	6665      	str	r5, [r4, #100]	; 0x64
 800b17c:	f7ff f832 	bl	800a1e4 <__retarget_lock_init_recursive>
 800b180:	f7ff ff96 	bl	800b0b0 <__sfp_lock_release>
 800b184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b18c:	6025      	str	r5, [r4, #0]
 800b18e:	61a5      	str	r5, [r4, #24]
 800b190:	2208      	movs	r2, #8
 800b192:	4629      	mov	r1, r5
 800b194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b198:	f7fe fbac 	bl	80098f4 <memset>
 800b19c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a8:	3468      	adds	r4, #104	; 0x68
 800b1aa:	e7d9      	b.n	800b160 <__sfp+0x1c>
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f7ff ff62 	bl	800b078 <__sfmoreglue>
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	6030      	str	r0, [r6, #0]
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d1d5      	bne.n	800b168 <__sfp+0x24>
 800b1bc:	f7ff ff78 	bl	800b0b0 <__sfp_lock_release>
 800b1c0:	230c      	movs	r3, #12
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	e7ee      	b.n	800b1a4 <__sfp+0x60>
 800b1c6:	bf00      	nop
 800b1c8:	0800bdcc 	.word	0x0800bdcc
 800b1cc:	ffff0001 	.word	0xffff0001

0800b1d0 <_fwalk_reent>:
 800b1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	4688      	mov	r8, r1
 800b1d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b1dc:	2700      	movs	r7, #0
 800b1de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1e2:	f1b9 0901 	subs.w	r9, r9, #1
 800b1e6:	d505      	bpl.n	800b1f4 <_fwalk_reent+0x24>
 800b1e8:	6824      	ldr	r4, [r4, #0]
 800b1ea:	2c00      	cmp	r4, #0
 800b1ec:	d1f7      	bne.n	800b1de <_fwalk_reent+0xe>
 800b1ee:	4638      	mov	r0, r7
 800b1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f4:	89ab      	ldrh	r3, [r5, #12]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d907      	bls.n	800b20a <_fwalk_reent+0x3a>
 800b1fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1fe:	3301      	adds	r3, #1
 800b200:	d003      	beq.n	800b20a <_fwalk_reent+0x3a>
 800b202:	4629      	mov	r1, r5
 800b204:	4630      	mov	r0, r6
 800b206:	47c0      	blx	r8
 800b208:	4307      	orrs	r7, r0
 800b20a:	3568      	adds	r5, #104	; 0x68
 800b20c:	e7e9      	b.n	800b1e2 <_fwalk_reent+0x12>
	...

0800b210 <_lseek_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d07      	ldr	r5, [pc, #28]	; (800b230 <_lseek_r+0x20>)
 800b214:	4604      	mov	r4, r0
 800b216:	4608      	mov	r0, r1
 800b218:	4611      	mov	r1, r2
 800b21a:	2200      	movs	r2, #0
 800b21c:	602a      	str	r2, [r5, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	f7f8 fd12 	bl	8003c48 <_lseek>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_lseek_r+0x1e>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_lseek_r+0x1e>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20000d4c 	.word	0x20000d4c

0800b234 <__swhatbuf_r>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	460e      	mov	r6, r1
 800b238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23c:	2900      	cmp	r1, #0
 800b23e:	b096      	sub	sp, #88	; 0x58
 800b240:	4614      	mov	r4, r2
 800b242:	461d      	mov	r5, r3
 800b244:	da08      	bge.n	800b258 <__swhatbuf_r+0x24>
 800b246:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	602a      	str	r2, [r5, #0]
 800b24e:	061a      	lsls	r2, r3, #24
 800b250:	d410      	bmi.n	800b274 <__swhatbuf_r+0x40>
 800b252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b256:	e00e      	b.n	800b276 <__swhatbuf_r+0x42>
 800b258:	466a      	mov	r2, sp
 800b25a:	f000 fd0b 	bl	800bc74 <_fstat_r>
 800b25e:	2800      	cmp	r0, #0
 800b260:	dbf1      	blt.n	800b246 <__swhatbuf_r+0x12>
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b268:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b26c:	425a      	negs	r2, r3
 800b26e:	415a      	adcs	r2, r3
 800b270:	602a      	str	r2, [r5, #0]
 800b272:	e7ee      	b.n	800b252 <__swhatbuf_r+0x1e>
 800b274:	2340      	movs	r3, #64	; 0x40
 800b276:	2000      	movs	r0, #0
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	b016      	add	sp, #88	; 0x58
 800b27c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b280 <__smakebuf_r>:
 800b280:	898b      	ldrh	r3, [r1, #12]
 800b282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b284:	079d      	lsls	r5, r3, #30
 800b286:	4606      	mov	r6, r0
 800b288:	460c      	mov	r4, r1
 800b28a:	d507      	bpl.n	800b29c <__smakebuf_r+0x1c>
 800b28c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	6123      	str	r3, [r4, #16]
 800b294:	2301      	movs	r3, #1
 800b296:	6163      	str	r3, [r4, #20]
 800b298:	b002      	add	sp, #8
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	ab01      	add	r3, sp, #4
 800b29e:	466a      	mov	r2, sp
 800b2a0:	f7ff ffc8 	bl	800b234 <__swhatbuf_r>
 800b2a4:	9900      	ldr	r1, [sp, #0]
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7fe fb97 	bl	80099dc <_malloc_r>
 800b2ae:	b948      	cbnz	r0, 800b2c4 <__smakebuf_r+0x44>
 800b2b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b4:	059a      	lsls	r2, r3, #22
 800b2b6:	d4ef      	bmi.n	800b298 <__smakebuf_r+0x18>
 800b2b8:	f023 0303 	bic.w	r3, r3, #3
 800b2bc:	f043 0302 	orr.w	r3, r3, #2
 800b2c0:	81a3      	strh	r3, [r4, #12]
 800b2c2:	e7e3      	b.n	800b28c <__smakebuf_r+0xc>
 800b2c4:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <__smakebuf_r+0x7c>)
 800b2c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	6020      	str	r0, [r4, #0]
 800b2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d0:	81a3      	strh	r3, [r4, #12]
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	6163      	str	r3, [r4, #20]
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	6120      	str	r0, [r4, #16]
 800b2da:	b15b      	cbz	r3, 800b2f4 <__smakebuf_r+0x74>
 800b2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 fcd9 	bl	800bc98 <_isatty_r>
 800b2e6:	b128      	cbz	r0, 800b2f4 <__smakebuf_r+0x74>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	f023 0303 	bic.w	r3, r3, #3
 800b2ee:	f043 0301 	orr.w	r3, r3, #1
 800b2f2:	81a3      	strh	r3, [r4, #12]
 800b2f4:	89a0      	ldrh	r0, [r4, #12]
 800b2f6:	4305      	orrs	r5, r0
 800b2f8:	81a5      	strh	r5, [r4, #12]
 800b2fa:	e7cd      	b.n	800b298 <__smakebuf_r+0x18>
 800b2fc:	0800b06d 	.word	0x0800b06d

0800b300 <memmove>:
 800b300:	4288      	cmp	r0, r1
 800b302:	b510      	push	{r4, lr}
 800b304:	eb01 0402 	add.w	r4, r1, r2
 800b308:	d902      	bls.n	800b310 <memmove+0x10>
 800b30a:	4284      	cmp	r4, r0
 800b30c:	4623      	mov	r3, r4
 800b30e:	d807      	bhi.n	800b320 <memmove+0x20>
 800b310:	1e43      	subs	r3, r0, #1
 800b312:	42a1      	cmp	r1, r4
 800b314:	d008      	beq.n	800b328 <memmove+0x28>
 800b316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b31e:	e7f8      	b.n	800b312 <memmove+0x12>
 800b320:	4402      	add	r2, r0
 800b322:	4601      	mov	r1, r0
 800b324:	428a      	cmp	r2, r1
 800b326:	d100      	bne.n	800b32a <memmove+0x2a>
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b332:	e7f7      	b.n	800b324 <memmove+0x24>

0800b334 <_realloc_r>:
 800b334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b338:	4680      	mov	r8, r0
 800b33a:	4614      	mov	r4, r2
 800b33c:	460e      	mov	r6, r1
 800b33e:	b921      	cbnz	r1, 800b34a <_realloc_r+0x16>
 800b340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	4611      	mov	r1, r2
 800b346:	f7fe bb49 	b.w	80099dc <_malloc_r>
 800b34a:	b92a      	cbnz	r2, 800b358 <_realloc_r+0x24>
 800b34c:	f7fe fada 	bl	8009904 <_free_r>
 800b350:	4625      	mov	r5, r4
 800b352:	4628      	mov	r0, r5
 800b354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b358:	f000 fcae 	bl	800bcb8 <_malloc_usable_size_r>
 800b35c:	4284      	cmp	r4, r0
 800b35e:	4607      	mov	r7, r0
 800b360:	d802      	bhi.n	800b368 <_realloc_r+0x34>
 800b362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b366:	d812      	bhi.n	800b38e <_realloc_r+0x5a>
 800b368:	4621      	mov	r1, r4
 800b36a:	4640      	mov	r0, r8
 800b36c:	f7fe fb36 	bl	80099dc <_malloc_r>
 800b370:	4605      	mov	r5, r0
 800b372:	2800      	cmp	r0, #0
 800b374:	d0ed      	beq.n	800b352 <_realloc_r+0x1e>
 800b376:	42bc      	cmp	r4, r7
 800b378:	4622      	mov	r2, r4
 800b37a:	4631      	mov	r1, r6
 800b37c:	bf28      	it	cs
 800b37e:	463a      	movcs	r2, r7
 800b380:	f7fe faaa 	bl	80098d8 <memcpy>
 800b384:	4631      	mov	r1, r6
 800b386:	4640      	mov	r0, r8
 800b388:	f7fe fabc 	bl	8009904 <_free_r>
 800b38c:	e7e1      	b.n	800b352 <_realloc_r+0x1e>
 800b38e:	4635      	mov	r5, r6
 800b390:	e7df      	b.n	800b352 <_realloc_r+0x1e>

0800b392 <_sungetc_r>:
 800b392:	b538      	push	{r3, r4, r5, lr}
 800b394:	1c4b      	adds	r3, r1, #1
 800b396:	4614      	mov	r4, r2
 800b398:	d103      	bne.n	800b3a2 <_sungetc_r+0x10>
 800b39a:	f04f 35ff 	mov.w	r5, #4294967295
 800b39e:	4628      	mov	r0, r5
 800b3a0:	bd38      	pop	{r3, r4, r5, pc}
 800b3a2:	8993      	ldrh	r3, [r2, #12]
 800b3a4:	f023 0320 	bic.w	r3, r3, #32
 800b3a8:	8193      	strh	r3, [r2, #12]
 800b3aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ac:	6852      	ldr	r2, [r2, #4]
 800b3ae:	b2cd      	uxtb	r5, r1
 800b3b0:	b18b      	cbz	r3, 800b3d6 <_sungetc_r+0x44>
 800b3b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	dd08      	ble.n	800b3ca <_sungetc_r+0x38>
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	1e5a      	subs	r2, r3, #1
 800b3bc:	6022      	str	r2, [r4, #0]
 800b3be:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b3c2:	6863      	ldr	r3, [r4, #4]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	e7e9      	b.n	800b39e <_sungetc_r+0xc>
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	f000 fc18 	bl	800bc00 <__submore>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d0f1      	beq.n	800b3b8 <_sungetc_r+0x26>
 800b3d4:	e7e1      	b.n	800b39a <_sungetc_r+0x8>
 800b3d6:	6921      	ldr	r1, [r4, #16]
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	b151      	cbz	r1, 800b3f2 <_sungetc_r+0x60>
 800b3dc:	4299      	cmp	r1, r3
 800b3de:	d208      	bcs.n	800b3f2 <_sungetc_r+0x60>
 800b3e0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b3e4:	42a9      	cmp	r1, r5
 800b3e6:	d104      	bne.n	800b3f2 <_sungetc_r+0x60>
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	3201      	adds	r2, #1
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	6062      	str	r2, [r4, #4]
 800b3f0:	e7d5      	b.n	800b39e <_sungetc_r+0xc>
 800b3f2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b3f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3fa:	6363      	str	r3, [r4, #52]	; 0x34
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	63a3      	str	r3, [r4, #56]	; 0x38
 800b400:	4623      	mov	r3, r4
 800b402:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	2301      	movs	r3, #1
 800b40a:	e7dc      	b.n	800b3c6 <_sungetc_r+0x34>

0800b40c <__ssrefill_r>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	460c      	mov	r4, r1
 800b410:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b412:	b169      	cbz	r1, 800b430 <__ssrefill_r+0x24>
 800b414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b418:	4299      	cmp	r1, r3
 800b41a:	d001      	beq.n	800b420 <__ssrefill_r+0x14>
 800b41c:	f7fe fa72 	bl	8009904 <_free_r>
 800b420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b422:	6063      	str	r3, [r4, #4]
 800b424:	2000      	movs	r0, #0
 800b426:	6360      	str	r0, [r4, #52]	; 0x34
 800b428:	b113      	cbz	r3, 800b430 <__ssrefill_r+0x24>
 800b42a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	6923      	ldr	r3, [r4, #16]
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	2300      	movs	r3, #0
 800b436:	6063      	str	r3, [r4, #4]
 800b438:	89a3      	ldrh	r3, [r4, #12]
 800b43a:	f043 0320 	orr.w	r3, r3, #32
 800b43e:	81a3      	strh	r3, [r4, #12]
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	e7f3      	b.n	800b42e <__ssrefill_r+0x22>
	...

0800b448 <__ssvfiscanf_r>:
 800b448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44c:	460c      	mov	r4, r1
 800b44e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b452:	2100      	movs	r1, #0
 800b454:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b458:	49a6      	ldr	r1, [pc, #664]	; (800b6f4 <__ssvfiscanf_r+0x2ac>)
 800b45a:	91a0      	str	r1, [sp, #640]	; 0x280
 800b45c:	f10d 0804 	add.w	r8, sp, #4
 800b460:	49a5      	ldr	r1, [pc, #660]	; (800b6f8 <__ssvfiscanf_r+0x2b0>)
 800b462:	4fa6      	ldr	r7, [pc, #664]	; (800b6fc <__ssvfiscanf_r+0x2b4>)
 800b464:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b700 <__ssvfiscanf_r+0x2b8>
 800b468:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b46c:	4606      	mov	r6, r0
 800b46e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	7813      	ldrb	r3, [r2, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 815a 	beq.w	800b72e <__ssvfiscanf_r+0x2e6>
 800b47a:	5dd9      	ldrb	r1, [r3, r7]
 800b47c:	f011 0108 	ands.w	r1, r1, #8
 800b480:	f102 0501 	add.w	r5, r2, #1
 800b484:	d019      	beq.n	800b4ba <__ssvfiscanf_r+0x72>
 800b486:	6863      	ldr	r3, [r4, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dd0f      	ble.n	800b4ac <__ssvfiscanf_r+0x64>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	5cba      	ldrb	r2, [r7, r2]
 800b492:	0712      	lsls	r2, r2, #28
 800b494:	d401      	bmi.n	800b49a <__ssvfiscanf_r+0x52>
 800b496:	462a      	mov	r2, r5
 800b498:	e7eb      	b.n	800b472 <__ssvfiscanf_r+0x2a>
 800b49a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b49c:	3201      	adds	r2, #1
 800b49e:	9245      	str	r2, [sp, #276]	; 0x114
 800b4a0:	6862      	ldr	r2, [r4, #4]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	3a01      	subs	r2, #1
 800b4a6:	6062      	str	r2, [r4, #4]
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	e7ec      	b.n	800b486 <__ssvfiscanf_r+0x3e>
 800b4ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	4798      	blx	r3
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d0e9      	beq.n	800b48c <__ssvfiscanf_r+0x44>
 800b4b8:	e7ed      	b.n	800b496 <__ssvfiscanf_r+0x4e>
 800b4ba:	2b25      	cmp	r3, #37	; 0x25
 800b4bc:	d012      	beq.n	800b4e4 <__ssvfiscanf_r+0x9c>
 800b4be:	469a      	mov	sl, r3
 800b4c0:	6863      	ldr	r3, [r4, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f340 8091 	ble.w	800b5ea <__ssvfiscanf_r+0x1a2>
 800b4c8:	6822      	ldr	r2, [r4, #0]
 800b4ca:	7813      	ldrb	r3, [r2, #0]
 800b4cc:	4553      	cmp	r3, sl
 800b4ce:	f040 812e 	bne.w	800b72e <__ssvfiscanf_r+0x2e6>
 800b4d2:	6863      	ldr	r3, [r4, #4]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	6063      	str	r3, [r4, #4]
 800b4d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b4da:	3201      	adds	r2, #1
 800b4dc:	3301      	adds	r3, #1
 800b4de:	6022      	str	r2, [r4, #0]
 800b4e0:	9345      	str	r3, [sp, #276]	; 0x114
 800b4e2:	e7d8      	b.n	800b496 <__ssvfiscanf_r+0x4e>
 800b4e4:	9141      	str	r1, [sp, #260]	; 0x104
 800b4e6:	9143      	str	r1, [sp, #268]	; 0x10c
 800b4e8:	7853      	ldrb	r3, [r2, #1]
 800b4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ec:	bf02      	ittt	eq
 800b4ee:	2310      	moveq	r3, #16
 800b4f0:	1c95      	addeq	r5, r2, #2
 800b4f2:	9341      	streq	r3, [sp, #260]	; 0x104
 800b4f4:	220a      	movs	r2, #10
 800b4f6:	46aa      	mov	sl, r5
 800b4f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b4fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b500:	2b09      	cmp	r3, #9
 800b502:	d91d      	bls.n	800b540 <__ssvfiscanf_r+0xf8>
 800b504:	487e      	ldr	r0, [pc, #504]	; (800b700 <__ssvfiscanf_r+0x2b8>)
 800b506:	2203      	movs	r2, #3
 800b508:	f7f4 fe7a 	bl	8000200 <memchr>
 800b50c:	b140      	cbz	r0, 800b520 <__ssvfiscanf_r+0xd8>
 800b50e:	2301      	movs	r3, #1
 800b510:	eba0 0009 	sub.w	r0, r0, r9
 800b514:	fa03 f000 	lsl.w	r0, r3, r0
 800b518:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b51a:	4318      	orrs	r0, r3
 800b51c:	9041      	str	r0, [sp, #260]	; 0x104
 800b51e:	4655      	mov	r5, sl
 800b520:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b524:	2b78      	cmp	r3, #120	; 0x78
 800b526:	d806      	bhi.n	800b536 <__ssvfiscanf_r+0xee>
 800b528:	2b57      	cmp	r3, #87	; 0x57
 800b52a:	d810      	bhi.n	800b54e <__ssvfiscanf_r+0x106>
 800b52c:	2b25      	cmp	r3, #37	; 0x25
 800b52e:	d0c6      	beq.n	800b4be <__ssvfiscanf_r+0x76>
 800b530:	d856      	bhi.n	800b5e0 <__ssvfiscanf_r+0x198>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d064      	beq.n	800b600 <__ssvfiscanf_r+0x1b8>
 800b536:	2303      	movs	r3, #3
 800b538:	9347      	str	r3, [sp, #284]	; 0x11c
 800b53a:	230a      	movs	r3, #10
 800b53c:	9342      	str	r3, [sp, #264]	; 0x108
 800b53e:	e071      	b.n	800b624 <__ssvfiscanf_r+0x1dc>
 800b540:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b542:	fb02 1103 	mla	r1, r2, r3, r1
 800b546:	3930      	subs	r1, #48	; 0x30
 800b548:	9143      	str	r1, [sp, #268]	; 0x10c
 800b54a:	4655      	mov	r5, sl
 800b54c:	e7d3      	b.n	800b4f6 <__ssvfiscanf_r+0xae>
 800b54e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b552:	2a20      	cmp	r2, #32
 800b554:	d8ef      	bhi.n	800b536 <__ssvfiscanf_r+0xee>
 800b556:	a101      	add	r1, pc, #4	; (adr r1, 800b55c <__ssvfiscanf_r+0x114>)
 800b558:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b55c:	0800b60f 	.word	0x0800b60f
 800b560:	0800b537 	.word	0x0800b537
 800b564:	0800b537 	.word	0x0800b537
 800b568:	0800b66d 	.word	0x0800b66d
 800b56c:	0800b537 	.word	0x0800b537
 800b570:	0800b537 	.word	0x0800b537
 800b574:	0800b537 	.word	0x0800b537
 800b578:	0800b537 	.word	0x0800b537
 800b57c:	0800b537 	.word	0x0800b537
 800b580:	0800b537 	.word	0x0800b537
 800b584:	0800b537 	.word	0x0800b537
 800b588:	0800b683 	.word	0x0800b683
 800b58c:	0800b659 	.word	0x0800b659
 800b590:	0800b5e7 	.word	0x0800b5e7
 800b594:	0800b5e7 	.word	0x0800b5e7
 800b598:	0800b5e7 	.word	0x0800b5e7
 800b59c:	0800b537 	.word	0x0800b537
 800b5a0:	0800b65d 	.word	0x0800b65d
 800b5a4:	0800b537 	.word	0x0800b537
 800b5a8:	0800b537 	.word	0x0800b537
 800b5ac:	0800b537 	.word	0x0800b537
 800b5b0:	0800b537 	.word	0x0800b537
 800b5b4:	0800b693 	.word	0x0800b693
 800b5b8:	0800b665 	.word	0x0800b665
 800b5bc:	0800b607 	.word	0x0800b607
 800b5c0:	0800b537 	.word	0x0800b537
 800b5c4:	0800b537 	.word	0x0800b537
 800b5c8:	0800b68f 	.word	0x0800b68f
 800b5cc:	0800b537 	.word	0x0800b537
 800b5d0:	0800b659 	.word	0x0800b659
 800b5d4:	0800b537 	.word	0x0800b537
 800b5d8:	0800b537 	.word	0x0800b537
 800b5dc:	0800b60f 	.word	0x0800b60f
 800b5e0:	3b45      	subs	r3, #69	; 0x45
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d8a7      	bhi.n	800b536 <__ssvfiscanf_r+0xee>
 800b5e6:	2305      	movs	r3, #5
 800b5e8:	e01b      	b.n	800b622 <__ssvfiscanf_r+0x1da>
 800b5ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4798      	blx	r3
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f af68 	beq.w	800b4c8 <__ssvfiscanf_r+0x80>
 800b5f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	f040 808d 	bne.w	800b71a <__ssvfiscanf_r+0x2d2>
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	e08f      	b.n	800b726 <__ssvfiscanf_r+0x2de>
 800b606:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b608:	f042 0220 	orr.w	r2, r2, #32
 800b60c:	9241      	str	r2, [sp, #260]	; 0x104
 800b60e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b614:	9241      	str	r2, [sp, #260]	; 0x104
 800b616:	2210      	movs	r2, #16
 800b618:	2b6f      	cmp	r3, #111	; 0x6f
 800b61a:	9242      	str	r2, [sp, #264]	; 0x108
 800b61c:	bf34      	ite	cc
 800b61e:	2303      	movcc	r3, #3
 800b620:	2304      	movcs	r3, #4
 800b622:	9347      	str	r3, [sp, #284]	; 0x11c
 800b624:	6863      	ldr	r3, [r4, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	dd42      	ble.n	800b6b0 <__ssvfiscanf_r+0x268>
 800b62a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b62c:	0659      	lsls	r1, r3, #25
 800b62e:	d404      	bmi.n	800b63a <__ssvfiscanf_r+0x1f2>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	5cba      	ldrb	r2, [r7, r2]
 800b636:	0712      	lsls	r2, r2, #28
 800b638:	d441      	bmi.n	800b6be <__ssvfiscanf_r+0x276>
 800b63a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	dc50      	bgt.n	800b6e2 <__ssvfiscanf_r+0x29a>
 800b640:	466b      	mov	r3, sp
 800b642:	4622      	mov	r2, r4
 800b644:	a941      	add	r1, sp, #260	; 0x104
 800b646:	4630      	mov	r0, r6
 800b648:	f000 f876 	bl	800b738 <_scanf_chars>
 800b64c:	2801      	cmp	r0, #1
 800b64e:	d06e      	beq.n	800b72e <__ssvfiscanf_r+0x2e6>
 800b650:	2802      	cmp	r0, #2
 800b652:	f47f af20 	bne.w	800b496 <__ssvfiscanf_r+0x4e>
 800b656:	e7cf      	b.n	800b5f8 <__ssvfiscanf_r+0x1b0>
 800b658:	220a      	movs	r2, #10
 800b65a:	e7dd      	b.n	800b618 <__ssvfiscanf_r+0x1d0>
 800b65c:	2300      	movs	r3, #0
 800b65e:	9342      	str	r3, [sp, #264]	; 0x108
 800b660:	2303      	movs	r3, #3
 800b662:	e7de      	b.n	800b622 <__ssvfiscanf_r+0x1da>
 800b664:	2308      	movs	r3, #8
 800b666:	9342      	str	r3, [sp, #264]	; 0x108
 800b668:	2304      	movs	r3, #4
 800b66a:	e7da      	b.n	800b622 <__ssvfiscanf_r+0x1da>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4640      	mov	r0, r8
 800b670:	f000 f9c6 	bl	800ba00 <__sccl>
 800b674:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67a:	9341      	str	r3, [sp, #260]	; 0x104
 800b67c:	4605      	mov	r5, r0
 800b67e:	2301      	movs	r3, #1
 800b680:	e7cf      	b.n	800b622 <__ssvfiscanf_r+0x1da>
 800b682:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b688:	9341      	str	r3, [sp, #260]	; 0x104
 800b68a:	2300      	movs	r3, #0
 800b68c:	e7c9      	b.n	800b622 <__ssvfiscanf_r+0x1da>
 800b68e:	2302      	movs	r3, #2
 800b690:	e7c7      	b.n	800b622 <__ssvfiscanf_r+0x1da>
 800b692:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b694:	06c3      	lsls	r3, r0, #27
 800b696:	f53f aefe 	bmi.w	800b496 <__ssvfiscanf_r+0x4e>
 800b69a:	9b00      	ldr	r3, [sp, #0]
 800b69c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b69e:	1d19      	adds	r1, r3, #4
 800b6a0:	9100      	str	r1, [sp, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f010 0f01 	tst.w	r0, #1
 800b6a8:	bf14      	ite	ne
 800b6aa:	801a      	strhne	r2, [r3, #0]
 800b6ac:	601a      	streq	r2, [r3, #0]
 800b6ae:	e6f2      	b.n	800b496 <__ssvfiscanf_r+0x4e>
 800b6b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4798      	blx	r3
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d0b6      	beq.n	800b62a <__ssvfiscanf_r+0x1e2>
 800b6bc:	e79c      	b.n	800b5f8 <__ssvfiscanf_r+0x1b0>
 800b6be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	9245      	str	r2, [sp, #276]	; 0x114
 800b6c4:	6862      	ldr	r2, [r4, #4]
 800b6c6:	3a01      	subs	r2, #1
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	6062      	str	r2, [r4, #4]
 800b6cc:	dd02      	ble.n	800b6d4 <__ssvfiscanf_r+0x28c>
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	e7ad      	b.n	800b630 <__ssvfiscanf_r+0x1e8>
 800b6d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4630      	mov	r0, r6
 800b6da:	4798      	blx	r3
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d0a7      	beq.n	800b630 <__ssvfiscanf_r+0x1e8>
 800b6e0:	e78a      	b.n	800b5f8 <__ssvfiscanf_r+0x1b0>
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	dc0e      	bgt.n	800b704 <__ssvfiscanf_r+0x2bc>
 800b6e6:	466b      	mov	r3, sp
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	a941      	add	r1, sp, #260	; 0x104
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	f000 f87d 	bl	800b7ec <_scanf_i>
 800b6f2:	e7ab      	b.n	800b64c <__ssvfiscanf_r+0x204>
 800b6f4:	0800b393 	.word	0x0800b393
 800b6f8:	0800b40d 	.word	0x0800b40d
 800b6fc:	0800bf50 	.word	0x0800bf50
 800b700:	0800bf22 	.word	0x0800bf22
 800b704:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <__ssvfiscanf_r+0x2ec>)
 800b706:	2b00      	cmp	r3, #0
 800b708:	f43f aec5 	beq.w	800b496 <__ssvfiscanf_r+0x4e>
 800b70c:	466b      	mov	r3, sp
 800b70e:	4622      	mov	r2, r4
 800b710:	a941      	add	r1, sp, #260	; 0x104
 800b712:	4630      	mov	r0, r6
 800b714:	f3af 8000 	nop.w
 800b718:	e798      	b.n	800b64c <__ssvfiscanf_r+0x204>
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b720:	bf18      	it	ne
 800b722:	f04f 30ff 	movne.w	r0, #4294967295
 800b726:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b730:	e7f9      	b.n	800b726 <__ssvfiscanf_r+0x2de>
 800b732:	bf00      	nop
 800b734:	00000000 	.word	0x00000000

0800b738 <_scanf_chars>:
 800b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b73c:	4615      	mov	r5, r2
 800b73e:	688a      	ldr	r2, [r1, #8]
 800b740:	4680      	mov	r8, r0
 800b742:	460c      	mov	r4, r1
 800b744:	b932      	cbnz	r2, 800b754 <_scanf_chars+0x1c>
 800b746:	698a      	ldr	r2, [r1, #24]
 800b748:	2a00      	cmp	r2, #0
 800b74a:	bf0c      	ite	eq
 800b74c:	2201      	moveq	r2, #1
 800b74e:	f04f 32ff 	movne.w	r2, #4294967295
 800b752:	608a      	str	r2, [r1, #8]
 800b754:	6822      	ldr	r2, [r4, #0]
 800b756:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b7e8 <_scanf_chars+0xb0>
 800b75a:	06d1      	lsls	r1, r2, #27
 800b75c:	bf5f      	itttt	pl
 800b75e:	681a      	ldrpl	r2, [r3, #0]
 800b760:	1d11      	addpl	r1, r2, #4
 800b762:	6019      	strpl	r1, [r3, #0]
 800b764:	6816      	ldrpl	r6, [r2, #0]
 800b766:	2700      	movs	r7, #0
 800b768:	69a0      	ldr	r0, [r4, #24]
 800b76a:	b188      	cbz	r0, 800b790 <_scanf_chars+0x58>
 800b76c:	2801      	cmp	r0, #1
 800b76e:	d107      	bne.n	800b780 <_scanf_chars+0x48>
 800b770:	682a      	ldr	r2, [r5, #0]
 800b772:	7811      	ldrb	r1, [r2, #0]
 800b774:	6962      	ldr	r2, [r4, #20]
 800b776:	5c52      	ldrb	r2, [r2, r1]
 800b778:	b952      	cbnz	r2, 800b790 <_scanf_chars+0x58>
 800b77a:	2f00      	cmp	r7, #0
 800b77c:	d031      	beq.n	800b7e2 <_scanf_chars+0xaa>
 800b77e:	e022      	b.n	800b7c6 <_scanf_chars+0x8e>
 800b780:	2802      	cmp	r0, #2
 800b782:	d120      	bne.n	800b7c6 <_scanf_chars+0x8e>
 800b784:	682b      	ldr	r3, [r5, #0]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b78c:	071b      	lsls	r3, r3, #28
 800b78e:	d41a      	bmi.n	800b7c6 <_scanf_chars+0x8e>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	06da      	lsls	r2, r3, #27
 800b794:	bf5e      	ittt	pl
 800b796:	682b      	ldrpl	r3, [r5, #0]
 800b798:	781b      	ldrbpl	r3, [r3, #0]
 800b79a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b79e:	682a      	ldr	r2, [r5, #0]
 800b7a0:	686b      	ldr	r3, [r5, #4]
 800b7a2:	3201      	adds	r2, #1
 800b7a4:	602a      	str	r2, [r5, #0]
 800b7a6:	68a2      	ldr	r2, [r4, #8]
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	3a01      	subs	r2, #1
 800b7ac:	606b      	str	r3, [r5, #4]
 800b7ae:	3701      	adds	r7, #1
 800b7b0:	60a2      	str	r2, [r4, #8]
 800b7b2:	b142      	cbz	r2, 800b7c6 <_scanf_chars+0x8e>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dcd7      	bgt.n	800b768 <_scanf_chars+0x30>
 800b7b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4640      	mov	r0, r8
 800b7c0:	4798      	blx	r3
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d0d0      	beq.n	800b768 <_scanf_chars+0x30>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	f013 0310 	ands.w	r3, r3, #16
 800b7cc:	d105      	bne.n	800b7da <_scanf_chars+0xa2>
 800b7ce:	68e2      	ldr	r2, [r4, #12]
 800b7d0:	3201      	adds	r2, #1
 800b7d2:	60e2      	str	r2, [r4, #12]
 800b7d4:	69a2      	ldr	r2, [r4, #24]
 800b7d6:	b102      	cbz	r2, 800b7da <_scanf_chars+0xa2>
 800b7d8:	7033      	strb	r3, [r6, #0]
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	443b      	add	r3, r7
 800b7de:	6123      	str	r3, [r4, #16]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0800bf50 	.word	0x0800bf50

0800b7ec <_scanf_i>:
 800b7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	4698      	mov	r8, r3
 800b7f2:	4b76      	ldr	r3, [pc, #472]	; (800b9cc <_scanf_i+0x1e0>)
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	4616      	mov	r6, r2
 800b7fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7fe:	b087      	sub	sp, #28
 800b800:	ab03      	add	r3, sp, #12
 800b802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b806:	4b72      	ldr	r3, [pc, #456]	; (800b9d0 <_scanf_i+0x1e4>)
 800b808:	69a1      	ldr	r1, [r4, #24]
 800b80a:	4a72      	ldr	r2, [pc, #456]	; (800b9d4 <_scanf_i+0x1e8>)
 800b80c:	2903      	cmp	r1, #3
 800b80e:	bf18      	it	ne
 800b810:	461a      	movne	r2, r3
 800b812:	68a3      	ldr	r3, [r4, #8]
 800b814:	9201      	str	r2, [sp, #4]
 800b816:	1e5a      	subs	r2, r3, #1
 800b818:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b81c:	bf88      	it	hi
 800b81e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b822:	4627      	mov	r7, r4
 800b824:	bf82      	ittt	hi
 800b826:	eb03 0905 	addhi.w	r9, r3, r5
 800b82a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b82e:	60a3      	strhi	r3, [r4, #8]
 800b830:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b834:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b838:	bf98      	it	ls
 800b83a:	f04f 0900 	movls.w	r9, #0
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	463d      	mov	r5, r7
 800b842:	f04f 0b00 	mov.w	fp, #0
 800b846:	6831      	ldr	r1, [r6, #0]
 800b848:	ab03      	add	r3, sp, #12
 800b84a:	7809      	ldrb	r1, [r1, #0]
 800b84c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b850:	2202      	movs	r2, #2
 800b852:	f7f4 fcd5 	bl	8000200 <memchr>
 800b856:	b328      	cbz	r0, 800b8a4 <_scanf_i+0xb8>
 800b858:	f1bb 0f01 	cmp.w	fp, #1
 800b85c:	d159      	bne.n	800b912 <_scanf_i+0x126>
 800b85e:	6862      	ldr	r2, [r4, #4]
 800b860:	b92a      	cbnz	r2, 800b86e <_scanf_i+0x82>
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	2308      	movs	r3, #8
 800b866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b86a:	6063      	str	r3, [r4, #4]
 800b86c:	6022      	str	r2, [r4, #0]
 800b86e:	6822      	ldr	r2, [r4, #0]
 800b870:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b874:	6022      	str	r2, [r4, #0]
 800b876:	68a2      	ldr	r2, [r4, #8]
 800b878:	1e51      	subs	r1, r2, #1
 800b87a:	60a1      	str	r1, [r4, #8]
 800b87c:	b192      	cbz	r2, 800b8a4 <_scanf_i+0xb8>
 800b87e:	6832      	ldr	r2, [r6, #0]
 800b880:	1c51      	adds	r1, r2, #1
 800b882:	6031      	str	r1, [r6, #0]
 800b884:	7812      	ldrb	r2, [r2, #0]
 800b886:	f805 2b01 	strb.w	r2, [r5], #1
 800b88a:	6872      	ldr	r2, [r6, #4]
 800b88c:	3a01      	subs	r2, #1
 800b88e:	2a00      	cmp	r2, #0
 800b890:	6072      	str	r2, [r6, #4]
 800b892:	dc07      	bgt.n	800b8a4 <_scanf_i+0xb8>
 800b894:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b898:	4631      	mov	r1, r6
 800b89a:	4650      	mov	r0, sl
 800b89c:	4790      	blx	r2
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f040 8085 	bne.w	800b9ae <_scanf_i+0x1c2>
 800b8a4:	f10b 0b01 	add.w	fp, fp, #1
 800b8a8:	f1bb 0f03 	cmp.w	fp, #3
 800b8ac:	d1cb      	bne.n	800b846 <_scanf_i+0x5a>
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	b90b      	cbnz	r3, 800b8b6 <_scanf_i+0xca>
 800b8b2:	230a      	movs	r3, #10
 800b8b4:	6063      	str	r3, [r4, #4]
 800b8b6:	6863      	ldr	r3, [r4, #4]
 800b8b8:	4947      	ldr	r1, [pc, #284]	; (800b9d8 <_scanf_i+0x1ec>)
 800b8ba:	6960      	ldr	r0, [r4, #20]
 800b8bc:	1ac9      	subs	r1, r1, r3
 800b8be:	f000 f89f 	bl	800ba00 <__sccl>
 800b8c2:	f04f 0b00 	mov.w	fp, #0
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	6822      	ldr	r2, [r4, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d03d      	beq.n	800b94a <_scanf_i+0x15e>
 800b8ce:	6831      	ldr	r1, [r6, #0]
 800b8d0:	6960      	ldr	r0, [r4, #20]
 800b8d2:	f891 c000 	ldrb.w	ip, [r1]
 800b8d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d035      	beq.n	800b94a <_scanf_i+0x15e>
 800b8de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b8e2:	d124      	bne.n	800b92e <_scanf_i+0x142>
 800b8e4:	0510      	lsls	r0, r2, #20
 800b8e6:	d522      	bpl.n	800b92e <_scanf_i+0x142>
 800b8e8:	f10b 0b01 	add.w	fp, fp, #1
 800b8ec:	f1b9 0f00 	cmp.w	r9, #0
 800b8f0:	d003      	beq.n	800b8fa <_scanf_i+0x10e>
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	f109 39ff 	add.w	r9, r9, #4294967295
 800b8f8:	60a3      	str	r3, [r4, #8]
 800b8fa:	6873      	ldr	r3, [r6, #4]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	6073      	str	r3, [r6, #4]
 800b902:	dd1b      	ble.n	800b93c <_scanf_i+0x150>
 800b904:	6833      	ldr	r3, [r6, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	6033      	str	r3, [r6, #0]
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	60a3      	str	r3, [r4, #8]
 800b910:	e7d9      	b.n	800b8c6 <_scanf_i+0xda>
 800b912:	f1bb 0f02 	cmp.w	fp, #2
 800b916:	d1ae      	bne.n	800b876 <_scanf_i+0x8a>
 800b918:	6822      	ldr	r2, [r4, #0]
 800b91a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b91e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b922:	d1bf      	bne.n	800b8a4 <_scanf_i+0xb8>
 800b924:	2310      	movs	r3, #16
 800b926:	6063      	str	r3, [r4, #4]
 800b928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b92c:	e7a2      	b.n	800b874 <_scanf_i+0x88>
 800b92e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b932:	6022      	str	r2, [r4, #0]
 800b934:	780b      	ldrb	r3, [r1, #0]
 800b936:	f805 3b01 	strb.w	r3, [r5], #1
 800b93a:	e7de      	b.n	800b8fa <_scanf_i+0x10e>
 800b93c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b940:	4631      	mov	r1, r6
 800b942:	4650      	mov	r0, sl
 800b944:	4798      	blx	r3
 800b946:	2800      	cmp	r0, #0
 800b948:	d0df      	beq.n	800b90a <_scanf_i+0x11e>
 800b94a:	6823      	ldr	r3, [r4, #0]
 800b94c:	05db      	lsls	r3, r3, #23
 800b94e:	d50d      	bpl.n	800b96c <_scanf_i+0x180>
 800b950:	42bd      	cmp	r5, r7
 800b952:	d909      	bls.n	800b968 <_scanf_i+0x17c>
 800b954:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b958:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b95c:	4632      	mov	r2, r6
 800b95e:	4650      	mov	r0, sl
 800b960:	4798      	blx	r3
 800b962:	f105 39ff 	add.w	r9, r5, #4294967295
 800b966:	464d      	mov	r5, r9
 800b968:	42bd      	cmp	r5, r7
 800b96a:	d02d      	beq.n	800b9c8 <_scanf_i+0x1dc>
 800b96c:	6822      	ldr	r2, [r4, #0]
 800b96e:	f012 0210 	ands.w	r2, r2, #16
 800b972:	d113      	bne.n	800b99c <_scanf_i+0x1b0>
 800b974:	702a      	strb	r2, [r5, #0]
 800b976:	6863      	ldr	r3, [r4, #4]
 800b978:	9e01      	ldr	r6, [sp, #4]
 800b97a:	4639      	mov	r1, r7
 800b97c:	4650      	mov	r0, sl
 800b97e:	47b0      	blx	r6
 800b980:	6821      	ldr	r1, [r4, #0]
 800b982:	f8d8 3000 	ldr.w	r3, [r8]
 800b986:	f011 0f20 	tst.w	r1, #32
 800b98a:	d013      	beq.n	800b9b4 <_scanf_i+0x1c8>
 800b98c:	1d1a      	adds	r2, r3, #4
 800b98e:	f8c8 2000 	str.w	r2, [r8]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6018      	str	r0, [r3, #0]
 800b996:	68e3      	ldr	r3, [r4, #12]
 800b998:	3301      	adds	r3, #1
 800b99a:	60e3      	str	r3, [r4, #12]
 800b99c:	1bed      	subs	r5, r5, r7
 800b99e:	44ab      	add	fp, r5
 800b9a0:	6925      	ldr	r5, [r4, #16]
 800b9a2:	445d      	add	r5, fp
 800b9a4:	6125      	str	r5, [r4, #16]
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	b007      	add	sp, #28
 800b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	f04f 0b00 	mov.w	fp, #0
 800b9b2:	e7ca      	b.n	800b94a <_scanf_i+0x15e>
 800b9b4:	1d1a      	adds	r2, r3, #4
 800b9b6:	f8c8 2000 	str.w	r2, [r8]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f011 0f01 	tst.w	r1, #1
 800b9c0:	bf14      	ite	ne
 800b9c2:	8018      	strhne	r0, [r3, #0]
 800b9c4:	6018      	streq	r0, [r3, #0]
 800b9c6:	e7e6      	b.n	800b996 <_scanf_i+0x1aa>
 800b9c8:	2001      	movs	r0, #1
 800b9ca:	e7ed      	b.n	800b9a8 <_scanf_i+0x1bc>
 800b9cc:	0800bd80 	.word	0x0800bd80
 800b9d0:	0800ac9d 	.word	0x0800ac9d
 800b9d4:	0800bbfd 	.word	0x0800bbfd
 800b9d8:	0800c0c9 	.word	0x0800c0c9

0800b9dc <_read_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	; (800b9fc <_read_r+0x20>)
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	602a      	str	r2, [r5, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f7f8 f8cc 	bl	8003b88 <_read>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_read_r+0x1e>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_read_r+0x1e>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20000d4c 	.word	0x20000d4c

0800ba00 <__sccl>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	780b      	ldrb	r3, [r1, #0]
 800ba04:	4604      	mov	r4, r0
 800ba06:	2b5e      	cmp	r3, #94	; 0x5e
 800ba08:	bf0b      	itete	eq
 800ba0a:	784b      	ldrbeq	r3, [r1, #1]
 800ba0c:	1c48      	addne	r0, r1, #1
 800ba0e:	1c88      	addeq	r0, r1, #2
 800ba10:	2200      	movne	r2, #0
 800ba12:	bf08      	it	eq
 800ba14:	2201      	moveq	r2, #1
 800ba16:	1e61      	subs	r1, r4, #1
 800ba18:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ba1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ba20:	42a9      	cmp	r1, r5
 800ba22:	d1fb      	bne.n	800ba1c <__sccl+0x1c>
 800ba24:	b90b      	cbnz	r3, 800ba2a <__sccl+0x2a>
 800ba26:	3801      	subs	r0, #1
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	f082 0201 	eor.w	r2, r2, #1
 800ba2e:	54e2      	strb	r2, [r4, r3]
 800ba30:	4605      	mov	r5, r0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ba38:	292d      	cmp	r1, #45	; 0x2d
 800ba3a:	d006      	beq.n	800ba4a <__sccl+0x4a>
 800ba3c:	295d      	cmp	r1, #93	; 0x5d
 800ba3e:	d0f3      	beq.n	800ba28 <__sccl+0x28>
 800ba40:	b909      	cbnz	r1, 800ba46 <__sccl+0x46>
 800ba42:	4628      	mov	r0, r5
 800ba44:	e7f0      	b.n	800ba28 <__sccl+0x28>
 800ba46:	460b      	mov	r3, r1
 800ba48:	e7f1      	b.n	800ba2e <__sccl+0x2e>
 800ba4a:	786e      	ldrb	r6, [r5, #1]
 800ba4c:	2e5d      	cmp	r6, #93	; 0x5d
 800ba4e:	d0fa      	beq.n	800ba46 <__sccl+0x46>
 800ba50:	42b3      	cmp	r3, r6
 800ba52:	dcf8      	bgt.n	800ba46 <__sccl+0x46>
 800ba54:	3502      	adds	r5, #2
 800ba56:	4619      	mov	r1, r3
 800ba58:	3101      	adds	r1, #1
 800ba5a:	428e      	cmp	r6, r1
 800ba5c:	5462      	strb	r2, [r4, r1]
 800ba5e:	dcfb      	bgt.n	800ba58 <__sccl+0x58>
 800ba60:	1af1      	subs	r1, r6, r3
 800ba62:	3901      	subs	r1, #1
 800ba64:	1c58      	adds	r0, r3, #1
 800ba66:	42b3      	cmp	r3, r6
 800ba68:	bfa8      	it	ge
 800ba6a:	2100      	movge	r1, #0
 800ba6c:	1843      	adds	r3, r0, r1
 800ba6e:	e7e0      	b.n	800ba32 <__sccl+0x32>

0800ba70 <_raise_r>:
 800ba70:	291f      	cmp	r1, #31
 800ba72:	b538      	push	{r3, r4, r5, lr}
 800ba74:	4604      	mov	r4, r0
 800ba76:	460d      	mov	r5, r1
 800ba78:	d904      	bls.n	800ba84 <_raise_r+0x14>
 800ba7a:	2316      	movs	r3, #22
 800ba7c:	6003      	str	r3, [r0, #0]
 800ba7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba86:	b112      	cbz	r2, 800ba8e <_raise_r+0x1e>
 800ba88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba8c:	b94b      	cbnz	r3, 800baa2 <_raise_r+0x32>
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 f830 	bl	800baf4 <_getpid_r>
 800ba94:	462a      	mov	r2, r5
 800ba96:	4601      	mov	r1, r0
 800ba98:	4620      	mov	r0, r4
 800ba9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba9e:	f000 b817 	b.w	800bad0 <_kill_r>
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d00a      	beq.n	800babc <_raise_r+0x4c>
 800baa6:	1c59      	adds	r1, r3, #1
 800baa8:	d103      	bne.n	800bab2 <_raise_r+0x42>
 800baaa:	2316      	movs	r3, #22
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	2001      	movs	r0, #1
 800bab0:	e7e7      	b.n	800ba82 <_raise_r+0x12>
 800bab2:	2400      	movs	r4, #0
 800bab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bab8:	4628      	mov	r0, r5
 800baba:	4798      	blx	r3
 800babc:	2000      	movs	r0, #0
 800babe:	e7e0      	b.n	800ba82 <_raise_r+0x12>

0800bac0 <raise>:
 800bac0:	4b02      	ldr	r3, [pc, #8]	; (800bacc <raise+0xc>)
 800bac2:	4601      	mov	r1, r0
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	f7ff bfd3 	b.w	800ba70 <_raise_r>
 800baca:	bf00      	nop
 800bacc:	20000110 	.word	0x20000110

0800bad0 <_kill_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d07      	ldr	r5, [pc, #28]	; (800baf0 <_kill_r+0x20>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	4611      	mov	r1, r2
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	f7f8 f839 	bl	8003b54 <_kill>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	d102      	bne.n	800baec <_kill_r+0x1c>
 800bae6:	682b      	ldr	r3, [r5, #0]
 800bae8:	b103      	cbz	r3, 800baec <_kill_r+0x1c>
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	bd38      	pop	{r3, r4, r5, pc}
 800baee:	bf00      	nop
 800baf0:	20000d4c 	.word	0x20000d4c

0800baf4 <_getpid_r>:
 800baf4:	f7f8 b826 	b.w	8003b44 <_getpid>

0800baf8 <_strtol_l.constprop.0>:
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafe:	d001      	beq.n	800bb04 <_strtol_l.constprop.0+0xc>
 800bb00:	2b24      	cmp	r3, #36	; 0x24
 800bb02:	d906      	bls.n	800bb12 <_strtol_l.constprop.0+0x1a>
 800bb04:	f7fd fd9c 	bl	8009640 <__errno>
 800bb08:	2316      	movs	r3, #22
 800bb0a:	6003      	str	r3, [r0, #0]
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bbf8 <_strtol_l.constprop.0+0x100>
 800bb16:	460d      	mov	r5, r1
 800bb18:	462e      	mov	r6, r5
 800bb1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb22:	f017 0708 	ands.w	r7, r7, #8
 800bb26:	d1f7      	bne.n	800bb18 <_strtol_l.constprop.0+0x20>
 800bb28:	2c2d      	cmp	r4, #45	; 0x2d
 800bb2a:	d132      	bne.n	800bb92 <_strtol_l.constprop.0+0x9a>
 800bb2c:	782c      	ldrb	r4, [r5, #0]
 800bb2e:	2701      	movs	r7, #1
 800bb30:	1cb5      	adds	r5, r6, #2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d05b      	beq.n	800bbee <_strtol_l.constprop.0+0xf6>
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d109      	bne.n	800bb4e <_strtol_l.constprop.0+0x56>
 800bb3a:	2c30      	cmp	r4, #48	; 0x30
 800bb3c:	d107      	bne.n	800bb4e <_strtol_l.constprop.0+0x56>
 800bb3e:	782c      	ldrb	r4, [r5, #0]
 800bb40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb44:	2c58      	cmp	r4, #88	; 0x58
 800bb46:	d14d      	bne.n	800bbe4 <_strtol_l.constprop.0+0xec>
 800bb48:	786c      	ldrb	r4, [r5, #1]
 800bb4a:	2310      	movs	r3, #16
 800bb4c:	3502      	adds	r5, #2
 800bb4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb52:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb56:	f04f 0c00 	mov.w	ip, #0
 800bb5a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb5e:	4666      	mov	r6, ip
 800bb60:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb68:	f1be 0f09 	cmp.w	lr, #9
 800bb6c:	d816      	bhi.n	800bb9c <_strtol_l.constprop.0+0xa4>
 800bb6e:	4674      	mov	r4, lr
 800bb70:	42a3      	cmp	r3, r4
 800bb72:	dd24      	ble.n	800bbbe <_strtol_l.constprop.0+0xc6>
 800bb74:	f1bc 0f00 	cmp.w	ip, #0
 800bb78:	db1e      	blt.n	800bbb8 <_strtol_l.constprop.0+0xc0>
 800bb7a:	45b1      	cmp	r9, r6
 800bb7c:	d31c      	bcc.n	800bbb8 <_strtol_l.constprop.0+0xc0>
 800bb7e:	d101      	bne.n	800bb84 <_strtol_l.constprop.0+0x8c>
 800bb80:	45a2      	cmp	sl, r4
 800bb82:	db19      	blt.n	800bbb8 <_strtol_l.constprop.0+0xc0>
 800bb84:	fb06 4603 	mla	r6, r6, r3, r4
 800bb88:	f04f 0c01 	mov.w	ip, #1
 800bb8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb90:	e7e8      	b.n	800bb64 <_strtol_l.constprop.0+0x6c>
 800bb92:	2c2b      	cmp	r4, #43	; 0x2b
 800bb94:	bf04      	itt	eq
 800bb96:	782c      	ldrbeq	r4, [r5, #0]
 800bb98:	1cb5      	addeq	r5, r6, #2
 800bb9a:	e7ca      	b.n	800bb32 <_strtol_l.constprop.0+0x3a>
 800bb9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bba0:	f1be 0f19 	cmp.w	lr, #25
 800bba4:	d801      	bhi.n	800bbaa <_strtol_l.constprop.0+0xb2>
 800bba6:	3c37      	subs	r4, #55	; 0x37
 800bba8:	e7e2      	b.n	800bb70 <_strtol_l.constprop.0+0x78>
 800bbaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbae:	f1be 0f19 	cmp.w	lr, #25
 800bbb2:	d804      	bhi.n	800bbbe <_strtol_l.constprop.0+0xc6>
 800bbb4:	3c57      	subs	r4, #87	; 0x57
 800bbb6:	e7db      	b.n	800bb70 <_strtol_l.constprop.0+0x78>
 800bbb8:	f04f 3cff 	mov.w	ip, #4294967295
 800bbbc:	e7e6      	b.n	800bb8c <_strtol_l.constprop.0+0x94>
 800bbbe:	f1bc 0f00 	cmp.w	ip, #0
 800bbc2:	da05      	bge.n	800bbd0 <_strtol_l.constprop.0+0xd8>
 800bbc4:	2322      	movs	r3, #34	; 0x22
 800bbc6:	6003      	str	r3, [r0, #0]
 800bbc8:	4646      	mov	r6, r8
 800bbca:	b942      	cbnz	r2, 800bbde <_strtol_l.constprop.0+0xe6>
 800bbcc:	4630      	mov	r0, r6
 800bbce:	e79e      	b.n	800bb0e <_strtol_l.constprop.0+0x16>
 800bbd0:	b107      	cbz	r7, 800bbd4 <_strtol_l.constprop.0+0xdc>
 800bbd2:	4276      	negs	r6, r6
 800bbd4:	2a00      	cmp	r2, #0
 800bbd6:	d0f9      	beq.n	800bbcc <_strtol_l.constprop.0+0xd4>
 800bbd8:	f1bc 0f00 	cmp.w	ip, #0
 800bbdc:	d000      	beq.n	800bbe0 <_strtol_l.constprop.0+0xe8>
 800bbde:	1e69      	subs	r1, r5, #1
 800bbe0:	6011      	str	r1, [r2, #0]
 800bbe2:	e7f3      	b.n	800bbcc <_strtol_l.constprop.0+0xd4>
 800bbe4:	2430      	movs	r4, #48	; 0x30
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1b1      	bne.n	800bb4e <_strtol_l.constprop.0+0x56>
 800bbea:	2308      	movs	r3, #8
 800bbec:	e7af      	b.n	800bb4e <_strtol_l.constprop.0+0x56>
 800bbee:	2c30      	cmp	r4, #48	; 0x30
 800bbf0:	d0a5      	beq.n	800bb3e <_strtol_l.constprop.0+0x46>
 800bbf2:	230a      	movs	r3, #10
 800bbf4:	e7ab      	b.n	800bb4e <_strtol_l.constprop.0+0x56>
 800bbf6:	bf00      	nop
 800bbf8:	0800bf50 	.word	0x0800bf50

0800bbfc <_strtol_r>:
 800bbfc:	f7ff bf7c 	b.w	800baf8 <_strtol_l.constprop.0>

0800bc00 <__submore>:
 800bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc04:	460c      	mov	r4, r1
 800bc06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc0c:	4299      	cmp	r1, r3
 800bc0e:	d11d      	bne.n	800bc4c <__submore+0x4c>
 800bc10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc14:	f7fd fee2 	bl	80099dc <_malloc_r>
 800bc18:	b918      	cbnz	r0, 800bc22 <__submore+0x22>
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc26:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bc2c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bc32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bc36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bc3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bc3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bc42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bc46:	6020      	str	r0, [r4, #0]
 800bc48:	2000      	movs	r0, #0
 800bc4a:	e7e8      	b.n	800bc1e <__submore+0x1e>
 800bc4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bc4e:	0077      	lsls	r7, r6, #1
 800bc50:	463a      	mov	r2, r7
 800bc52:	f7ff fb6f 	bl	800b334 <_realloc_r>
 800bc56:	4605      	mov	r5, r0
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d0de      	beq.n	800bc1a <__submore+0x1a>
 800bc5c:	eb00 0806 	add.w	r8, r0, r6
 800bc60:	4601      	mov	r1, r0
 800bc62:	4632      	mov	r2, r6
 800bc64:	4640      	mov	r0, r8
 800bc66:	f7fd fe37 	bl	80098d8 <memcpy>
 800bc6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bc6e:	f8c4 8000 	str.w	r8, [r4]
 800bc72:	e7e9      	b.n	800bc48 <__submore+0x48>

0800bc74 <_fstat_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4d07      	ldr	r5, [pc, #28]	; (800bc94 <_fstat_r+0x20>)
 800bc78:	2300      	movs	r3, #0
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	4611      	mov	r1, r2
 800bc80:	602b      	str	r3, [r5, #0]
 800bc82:	f7f7 ffc6 	bl	8003c12 <_fstat>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	d102      	bne.n	800bc90 <_fstat_r+0x1c>
 800bc8a:	682b      	ldr	r3, [r5, #0]
 800bc8c:	b103      	cbz	r3, 800bc90 <_fstat_r+0x1c>
 800bc8e:	6023      	str	r3, [r4, #0]
 800bc90:	bd38      	pop	{r3, r4, r5, pc}
 800bc92:	bf00      	nop
 800bc94:	20000d4c 	.word	0x20000d4c

0800bc98 <_isatty_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d06      	ldr	r5, [pc, #24]	; (800bcb4 <_isatty_r+0x1c>)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	602b      	str	r3, [r5, #0]
 800bca4:	f7f7 ffc5 	bl	8003c32 <_isatty>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_isatty_r+0x1a>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_isatty_r+0x1a>
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	20000d4c 	.word	0x20000d4c

0800bcb8 <_malloc_usable_size_r>:
 800bcb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcbc:	1f18      	subs	r0, r3, #4
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bfbc      	itt	lt
 800bcc2:	580b      	ldrlt	r3, [r1, r0]
 800bcc4:	18c0      	addlt	r0, r0, r3
 800bcc6:	4770      	bx	lr

0800bcc8 <_init>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	bf00      	nop
 800bccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcce:	bc08      	pop	{r3}
 800bcd0:	469e      	mov	lr, r3
 800bcd2:	4770      	bx	lr

0800bcd4 <_fini>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr
